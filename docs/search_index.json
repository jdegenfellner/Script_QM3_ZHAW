[["index.html", "Quantitative Methods 2, ZHAW Chapter 1 Preamble 1.1 Books we will heavily borrow from are: 1.2 If you need a good reason to buy great books…", " Quantitative Methods 2, ZHAW Jürgen Degenfellner 2025-04-03 Chapter 1 Preamble This script is a continuation of the first one for Quantitative Methods 1 at ZHAW. In the first part, we learned about the basics of probability theory, descriptive statistics, Bayesian statistics, and hypothesis testing. In this script, we will dive into the basics of statistical modeling - a world of aesthetic wonder and surprises. This script is a first draft as you are the first group to be working with it. Please feel free to send me suggestions for improvements or corrections. This should be a collaborative effort and will (hopefully) never be finished as our insight grows over time. The script can also be seen as a pointer to great sources which are suited to deepen your understanding of the topics. Knowledge is decentralized, and there are many great resources out there. For the working setup with R, please see this and the following sections in the first script. The complete code for this script can be found here. 1.1 Books we will heavily borrow from are: (older online version is Free; current version in ZHAW Library) Statistical Rethinking, YouTube-Playlist: Statistical Rethinking 2023 (Free) Understanding Regression Analysis: A Conditional Distribution Approach (Free online-access via ZHAW Library) Data Analysis Using Regression and Multilevel/Hierarchical Models (Free) Doing Bayesian Data Analysis 1.2 If you need a good reason to buy great books… Think of the total costs of your education. You want to extract maximum benefit from it. In the US, an education costs a lot. In beautiful Switzerland, the tuition fees (if applicable) are nowhere near these figures. Costs you could consider are opportunity costs of not working. A comparison with both, a foreign education or opportunity costs, justifies the investment in good books. Or: The costs of all the good books of your education combined are probably less than an iPhone Pro. "],["intro.html", "Chapter 2 Introduction 2.1 What is statistical modeling and what do we need this for? 2.2 A (simple) model for adult body heights in the Bayesian framework 2.3 Classical approach for the simplest model 2.4 Exercises 2.5 Addendum 2.6 Sample exam questions for this chapter (in German since exam is in German)", " Chapter 2 Introduction 2.1 What is statistical modeling and what do we need this for? Typically, one simplifies the complex reality (and loses information) in order to make it better understandable (explainable), mathematically treatable and to make predictions. Underlying our models, there are theories which should be falsifiable and testable. For instance, I would be really surprised if I pull up my multimeter and measure the voltage (V) and electric current (I) at a resistence (R) in a circuit and find that Ohm’s law \\(V = IR\\) is not true. This law can be tested over and over again and if one would find a single valid counterexample, the law would be falsified. It is also true that the law is probably not 100% accularate, but an extremely precise approximation of reality. Real-world measurements carry measurement errors and when plotting the data, one would see that the data points might not lie exactly on a straight line. This is not a problem. A statistical model is a mathematical framework that represents the relationships between variables, helping us understand, infer, and predict patterns in data. It acts as a bridge between observed data and the real-world processes that generated them. In health research, where variability and uncertainty are inherent, statistical models are valuable tools for making sense of complex phenomena. You can watch this as short intro. In QM1 we have already made testable predictions with respect to the probability of an event. In our 1000-researcher experiment we stated for instance, that the probability of obeserving \\(66\\) or more findings would be very unlikely. If such an event would occur (while not repeating the experiment many times), we would reconsider our model. Inexactly, we could have stated something like: “We will not see more than 100 findings by chance.” With respect to our multiple choice test at the end of QM1 we could predict: “We will not see a single person answering all questions correctly by chance in our lifetime (given the frequency of tests).” Note, that in this context, the word predict is used with respect to a future event (chance finding or chance passing of the test). As we will see, there does not necessarily have to be a temporal connection in order to predict something. Depending on the task at hand, we would use different models. In any case, logical reasoning and critical thinking comes first, then comes the model. It makes no sense to estimate statistical models just for the sake of it. All models are wrong, but some are useful. Or to quote George Box: “Since all models are wrong the scientist cannot obtain a ‘correct’ one by excessive elaboration. On the contrary following William of Occam he should seek an economical description of natural phenomena. Just as the ability to devise simple but evocative models is the signature of the great scientist so overelaboration and overparameterization is often the mark of mediocrity.” In my opinion, statistical modeling is an art form: difficult and beautiful. One goal of this course is to improve interpretation and limitations of statistical models. They are not magical tools turning data into truth. Firstly, the rule gargabe in, garbage out (GABA) applies. Secondly, statistical models are based on data and their variability and have inherent limitations one cannot overcome even with the most sophisticated models. This is expressed for instance in the so-called bias-variance trade-off. You can’t have it all. 2.1.1 Explanatory vs. Predictive Models I can recommend reading this article by Shmueli et al. (2010) on this topic. Statistical models serve different purposes depending on the research question. Two primary goals are explanation and prediction, and each requires a different approach: Explanatory models (the harder of the two) focus on understanding causal relationships. These models aim to uncover mechanisms and answer “why” questions. For example: Does smoking increase the risk of lung cancer? Yes. (If you want to see what a large effect-size looks like, check out this study.) How large is the effect (causal) of smoking on lung cancer? Large. Does pain education and graded sensorimotor relearning improve disability (a question we ask in our Resolve Swiss project)? Explanatory models are theory-driven, designed to test hypotheses. Here, one wants to understand the underlying mechanisms and the relationships between variables and hence often uses (parsimonious) models that are more interpretable, like linear regression. Predictive models prioritize forecasting/predicting (future) outcomes based on patterns in the data. These models aim to answer “what will happen?” For instance: Gait analysis using Machine Learning (ML)? Skin cancer detection using neural networks? If I know the age, sex and weight of a person, can I predict his/her height? Can I predict the height better with the given covariates compared to just guessing by using the mean height of my sample for the next patient? Predictive models are data-driven, often using complex algorithms to achieve high accuracy. Their success is measured using metrics like Root Means Square Error (RMSE), Area Unter the Curve (AUC), or prediction error on new, unseen data. Any amount of model complexity is allowed. One could for instance estimate a neural network (“just” another statistical model) with many hidden layers and neurons in order to improve prediction quality. Interpretability of the model weights is not a priority here. While explanatory and predictive goals often complement each other, their differences highlight the importance of clearly defining the purpose of your analysis. In applied health research, explanatory models help identify causal mechanisms, while predictive models can guide real-world decisions by providing actionable forecasts. Together, they enhance both our understanding of phenomena and our ability to make informed decisions in complex environments. 2.1.2 Individual vs. Population Prediction Another important distinction is between individual vs. population prediction. In the smoking example above, we can be very sure about the mean effects that smoking has on lung cancer. On an individual level, it is harder to predict the outcome. Nevertheless, individual predictions will be (notably) better than random guessing. We will discuss this in greater detail. Statistical models are often much worse than one would naively expect, but they very often better than experts. If you are interested and want to boost your confidence in the predictive ability of statistical models, I recommend reading chapter 21 (“Intuitions vs. Formulas”) of Daniel Kahneman’s book “Thinking, Fast and Slow” (available in the ZHAW library). Of course, you should check if the studies mentioned in the book were replicated and if the results are still valid. 2.1.3 Practical Use of Statistical Models In my optinion, we should never be afraid to test our statistical models (as honestly as possible) against reality. We could for instance ask ourselves: “How much better does this model estimate an outcome than the arithmetic mean? (i.e., the linear model with just an intercept)” “How much better does this model classify than random guessing?” Is it worth the effort to collect data and estimate this model by using hundreds of hours of our time? In some cases, these questions can be answered straightforwardly. In advertising (Google, Facebook, …), a couple of percentage points in prediction quality might make a difference of millions of dollars in revenue offsetting the statistitians salary by a large margin. Improved forecasts of a few percentage points in the stock market or just being slightly better than the average, will make you faboulously rich. Improved cancer forecasting might save lives, money and pain and is of course not only measured in financial gains. 2.1.4 Start at the beginning What do we actually want to do in general? Very broadly speaking we want to: describe the association of variables to each other that carry variability. Hence, the relationship is not deterministic like \\[y = 2x + 3\\] but rather we need to “loosen up” the relationship to account for variability (in \\(x\\) and \\(y\\)). So, \\(y\\) and \\(x\\) are not fixed but aflicted with uncertainty. Depending on your philosophical view, you might say you want to find the “true” but unknown relationship (here, \\(2\\) and \\(3\\) are the true coefficients) between variables. This is what we do in simulation studies all the time: We know the true relationship, simulate data by adding variability and then try to estimate the true relationship we assumed in the first place. This is an advantage the pioneers of statistics did not have. We can simulate millions of lines of data at the click of a button. For some practical applications, we can get a really nice and complete answer to our question (for instance sample size for proportions). So we are looking for a function \\(f\\) such that \\[ \\mathbf{Y} = f(\\mathbf{X}) \\] where \\(\\mathbf{Y}\\) is the “outcome”, “dependent variable” or “response”. \\(\\mathbf{X}\\) are the “predictors”. \\(\\mathbf{X}\\) can be a single Variable \\(x\\) or many variables \\(x_1, x_2, \\ldots, x_p\\). It is important to be aware of the notation here: “Predict” does not necessarily mean that we can predict the value in the future. It merely means we estimate the value (or mean) of \\(Y\\) given \\(X\\). This can be done at the same time points, known as cross-sectional analysis (“What is the maximum jumping height of a person given their age at a certain point in time, whereas both variables are measured at the same time?”); or at different time points, known as longitudinal analysis (“What is the maximum jumping height of a person 10 years later (\\(t_2\\)) given their baseline health status at time \\(t_1\\)?”). The simplest statistical model would be the mean model where \\(Y\\) is “predicted” by a constant: \\(Y = c\\) which (at least in the classical linear regression) turns out to be \\(c = \\bar{x}\\). This simple model is often surprisingly good, or, to put it in other words, models with more complexity are often not that much better. 2.2 A (simple) model for adult body heights in the Bayesian framework As repetition, read the parts about Bayes statistics from QM1 again to refresh your memory about the Bayesian framework. It’s recommendable to read the beginning of the book Statistical rethinking (hint: the online-version of the book differs a bit from the paper-version) up until page 39 as well. We are not completely new to the topic of Bayes thanks to QM1. In the Bayesian setting we use (well argued for) prior knowledge about a parameter or effect and update this knowledge with new data. We want to start building our first model right away. Let’s begin with the example in Statistical rethinking using data from the !Kung San people. library(rethinking) data(&quot;Howell1&quot;) d &lt;- Howell1 str(d) ## &#39;data.frame&#39;: 544 obs. of 4 variables: ## $ height: num 152 140 137 157 145 ... ## $ weight: num 47.8 36.5 31.9 53 41.3 ... ## $ age : num 63 63 65 41 51 35 32 27 19 54 ... ## $ male : int 1 0 0 1 0 1 0 1 0 1 ... d2 &lt;- d[d$age &gt;= 18, ] # only adults We want to model the adult height of the !Kun San people using prior knowledge (about the Swiss population) and data. library(tidyverse) d2 %&gt;% ggplot(aes(x = height)) + geom_histogram() Since we already have domain knowledge in this area, we can say that heights are usually normally distributed, or at least a mixture of normal distrubutions (female/male). We assume the following model: \\[h_i \\sim \\text{Normal}(\\mu, \\sigma)\\] As in QM1, we want to start with a Bayesian model and hence, we need some priors. Since we are in Switzerland and just for fun, we use the mean of Swiss body heights as expected value for the prior for the mean. According to the link (Bundesamt für Statistik), the mean height of \\(n=21,873\\) people in the Swiss sample is \\(171.1\\) cm. We choose the same \\(\\sigma\\) for the prior of the normal as in the book not to deviate too much from the example at hand. Next comes our model definition in the Bayesian framework, which I often find more intuitive than the Frequentist approach: \\[ h_i \\sim \\text{Normal}(\\mu, \\sigma) \\] \\[ \\mu \\sim \\text{Normal}(171.1, 20) \\] \\[ \\sigma \\sim \\text{Uniform}(0, 50) \\] Description of the model definition: The heights are normally distributed with unknown mean and standard deviation. As our current knowledge about the mean height, we use a prior distribution for the mean (we do not know but want to estimate) by assuming the mean of a population we know and a standard deviation of \\(20\\) cm which allows are rather large range of possible values for \\(\\mu\\) (the unobserved population mean of the !Kung San people). \\(\\sigma\\) (the unobserved standard deviation of the population of !Kun San people) is also unknown and a priori we restrict ourselves to values between \\(0\\) and \\(50\\) cm, whereas we assign equal plausibility to all values in this range (which can and should be critically discussed). Vizualisation of the model structure: Mind that there is a conceptual difference between the normal distribution of the heights and the normal prior distribution of the mean. The latter expresses our prior knowledge/insecurity about the unobserved mean of the normal distribution of the heights. The normal distribution of the heights says we expect the heights to be normally distributed but we do not know the parameters (\\(\\mu\\) and \\(\\sigma\\)) yet. We will estimate these parameters using prior knowledge and the data. Of course we would not need the prior here due to the large sample size, but let’s do it anyways for demonstration purposes. We are not completely uninformed about body heights and express our knowledge with the prior for \\(\\mu\\). The \\(20\\) in the prior for the mean expresses our range of possible true mean values and aknowledge that there are a variety of different subpopulations with different means. Using the Swiss data in the link one could estimate that the standard deviation of the heights from \\(21,873\\) Swiss people is around is \\(25.67\\) cm (Exercise 1). Remember, in the Baysian world, there is no fixed but unknown parameter, but instead we define a distribution over the unobserved parameter. We visualize the prior for \\(\\mu\\): curve(dnorm(x, 171.1, 20), from = 100, to = 250) A wide range of population means is possible. Once could discuss this distribution and maybe further restrict it. The prior for \\(\\sigma\\) is uniform between \\(0\\) and \\(50\\) cm. This is a very wide prior and just constrains the values to be positive and below \\(50\\) cm. This could be stronger of course. Visualization of the prior for \\(\\sigma\\): curve(dunif(x, 0, 50), from = -10, to = 60) Note, we didn’t specify a prior probability distribution of heights directly, but once we’ve chosen priors for \\(\\mu\\) and \\(\\sigma\\), these imply a prior distribution of individual heights. Without even having seen the new data, we can check what our prior (model) for heights would predict. This is important. If the prior already predicts impossible values, we should reconsider our priors and/or model. So, we simply draw \\(\\mu\\) and \\(\\sigma\\) from the priors and then draw heights from the normal distribution using the drawn parameters. Vizualisation of the prior for heights: sample_mu &lt;- rnorm(10^4, 171.1, 20) sample_sigma &lt;- runif(10^4, 0, 50) prior_h &lt;- rnorm(10^4, sample_mu, sample_sigma) length(prior_h) ## [1] 10000 dens(prior_h) The prior is not itself a Gaussian distribution, but a distribution of relative plausibilities of different heights, before seeing the data. Note how we have created the model predictions for heights. We first drew \\(\\mu\\) and \\(\\sigma\\) independently (there is no arrow between \\(\\mu\\) and \\(\\sigma\\)) from the priors. Then we drew heights from the normal distribution using the drawn parameters. You just follow the model structure. Now, there are a couple of different ways to estimtate the model incorporating the new data. For didactic reasons, grid approximation is often used (as in the books). For many parameters, this approach becomes more and more infeasible (due to combinatorial explosion). We will skip that for now and use quadratic approximation instead which works well for many common procedures in applied statistics (like linear regression). Later, you’ll probably use (or the software in the background) mostly Markov chain Monte Carlo (MCMC) sampling to get the posterior. Pages 39 and the following explain the 3 concepts grid approximation, quadratic approximation and MCMC. In short, quadratic approximation assumes that our posterior distribution of body heights can be approximated well by a normal distribution, at least near the peak. Please read the addendum to get a clearer picture of what a bivariate normal distribution is. Using the rethinking package we can estimate the model using quadratic approximation. First, we define the model in the rethinking syntax (see R code 4.25 in the book). library(rethinking) flist &lt;- alist( height ~ dnorm(mu, sigma), mu ~ dnorm(171.1, 20), sigma ~ dunif(0, 50) ) Then we estimate/fit the model using quadratic approximation. m_heights &lt;- quap(flist, data = d2) Now let’s take a look at the fitted model: (Note: In the online-version of the book, they used the command map instead of quap.) The precisfunction displays concise parameter estimate information (from the posterior) for an existing model fit. precis(m_heights) ## mean sd 5.5% 94.5% ## mu 154.604056 0.4119902 153.945616 155.262496 ## sigma 7.731255 0.2913786 7.265575 8.196934 Above, we see the mean of the posterior for \\(\\mu\\) and \\(\\sigma\\); and a 89% credible interval for those parameters. Note that these are rather tight credible intervals. We are rather confident that the mean is somewhere between \\(154\\) and \\(155\\) cm and the standard deviation is between \\(7\\) and \\(8\\) cm. We can now plot the posterior distribution of the mean (\\(\\mu\\)) and the standard deviation (\\(\\sigma\\)) separately by drawing from the posterior distribution. post &lt;- extract.samples(m_heights, n = 10^4) head(post) ## mu sigma ## 1 154.5756 8.035119 ## 2 154.2660 7.816108 ## 3 154.5687 7.902579 ## 4 155.3427 7.939300 ## 5 154.7065 7.440716 ## 6 154.1022 7.548077 dens(post$mu) dens(post$sigma) Note, that these samples come from a multi-dimensional posterior distribution. In our case, we approximated the joint posterior distribution of \\(\\mu\\) and \\(\\sigma\\) with a bivariate normal distribution. They are not necessarily independent from each other, but in this case they are (see exercise 6). We know this from the prior definition above. \\(\\mu\\) and \\(\\sigma\\) are both defined as normal respectively uniform distributions and by definition do not influence each other. This is also visible in the vizualisation of the model structure: There is no confounding variable or connection between those priors. One could think of a common variable \\(Z\\) that influences both \\(\\mu\\) and \\(\\sigma\\). This could be genetic similarity which could influence both \\(\\mu\\) and \\(\\sigma\\). Let’s verify that \\(\\mu\\) and \\(\\sigma\\) are uncorrelated: vcov(m_heights) ## mu sigma ## mu 0.1697358985 0.0001528654 ## sigma 0.0001528654 0.0849014791 gives you the variance-covariance matrix of the parameters of the posterior distribution. In the diagonal you see the variance of the parameters. diag(vcov(m_heights)) ## mu sigma ## 0.16973590 0.08490148 And we can compute the correlation matrix easily: cov2cor(vcov(m_heights)) ## mu sigma ## mu 1.0000000 0.0012734 ## sigma 0.0012734 1.0000000 Let’s plot the posterior in 3D, because we can: How beautiful ist that? This shows how credible each combination of \\(\\mu\\) and \\(\\sigma\\) is based on our priors and the data observed. The higher the mountain for a certain parameter combination, the more credible this combination is. We see in the 3D plot, that the “mountain” is not rotated, indicating graphically that the parameters are independent from each other. We also see in the correlation matrix, the correlation of the parameters is \\(\\sim 0\\). In the context of a joint normal distribution, this means that the parameters are also independent. And, it is not an accident that the posterior looks like this. Using quadratic approximation, we used the bivariate normal distribution to approximate the posterior. 2.3 Classical approach for the simplest model We have seen, how we could use prior knowledge to fit a very simple model for body heights of a population (!Kung San) in the Bayesian framework. Now, let’s start at the same point in the classical framework. Here, we do not use any prior knowledge, at least not that explicitely. The classical approach to fit a regression line is the so-called least squares method. There are hundreds of videos online explaining this method in great detail with animations. Maybe watch these videos later, when we add a predictor to the mean model, since most of instructional videos start at the simple linear regression using two parameters (intercept (\\(\\beta_0\\) or \\(\\alpha\\)) and slope (\\(\\beta_1\\))). The (simple mean-) model is: \\[ Y_i = height_i = c + \\varepsilon_i \\] for some \\(c \\in \\mathbb{R}\\) and normally distributed errors \\(\\varepsilon_i \\sim \\text{Normal}(0, \\sigma)\\). The errors \\(\\varepsilon_i\\) are on average zero and have a constant standard deviation of \\(\\sigma\\). So, we assume there is a fixed, but unknown, constant \\(c\\) that we want to estimate and we assume that there is a special sort of error in our model that is normally distributed. Sometimes there is a large deviation from the true \\(c\\), sometimes there is a small deviation. On average, the deviations are zero and the errors should also be independent from each other: \\[ \\varepsilon_i \\perp \\varepsilon_j \\text{ for } i \\neq j\\] This means that just because I have just observed a large deviation from the true \\(c\\) does not mean, that the probability of a large deviation in the next observation is higher/lower. Note, that we cannot readily define different types of errors in the classical framework. But what is \\(c\\)? We determine the shape of the model ourselves (constant model, or mean model) and then estimate the parameter \\(c\\). By defining the shape of the model ourselves and imposing a distribution where we want to estimate the parameter of said distribution, we are in parametric statistics. We choose the \\(c\\) which minimizes the sum of squared errors from the actual heights. This has the advantage that deviations upper and lower from the actual height are equally weighted. The larger the deviation the (quadratically) larger the penalty. Why do we do that? Because, if the model assumptions (more on that later) are correct, the least squares estimator is a really good estimator. How good? Later… We want to miminize the following function: \\[ SSE \\text{ (Sum of Squared Errors) }(c) = (height_1 - c)^2 + (height_2 - c)^2 + \\ldots + (height_n - c)^2 =\\] \\[ = \\sum_{i=1}^{n} (height_i - c)^2\\] The SSE is a function of \\(c\\) and we want to find the \\(c\\) that minimizes the function. Since it is a quadratic function, we can always find the minimum. We have learnt in school how to do this (hopefully): Take the derivative of the function and set it to zero. Solve for \\(c\\) and you have the \\(c\\) which yields the minimum of SSE(c). Let’s do that: \\[ \\frac{d}{dc} SSE(c) = 2(height_1 - c)(-1) + 2(height_2 - c)(-1) + \\ldots + 2(height_n - c)(-1) =\\] \\[ = -2 \\sum_{i=1}^{n} (height_i - c)\\] This should be zero for the minimum: \\[ -2 \\sum_{i=1}^{n} (height_i - c) = 0\\] \\[ \\sum_{i=1}^{n} (height_i - c) = 0\\] \\[ \\sum_{i=1}^{n} height_i - n \\cdot c = 0\\] \\[ \\hat{c} = \\frac{1}{n} \\sum_{i=1}^{n} height_i = \\overline{height_i}\\] The hat over the \\(c\\) indicates that this is the estimated value of the true but unknown \\(c\\). Everytime we estimate a parameter, we put a hat over it. And voilà, we have estimated the parameter \\(c\\) of the model, which is just the sample mean of all the heights. In contrast to before, we did not put in a lot of prior knowledge, but just estimated the parameter from the data. In R, we can do this easily: mod &lt;- lm(height ~ 1, data = d2) summary(mod) ## ## Call: ## lm(formula = height ~ 1, data = d2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -18.0721 -6.0071 -0.2921 6.0579 24.4729 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 154.5971 0.4127 374.6 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 7.742 on 351 degrees of freedom dim(d2) ## [1] 352 4 mean(d2$height) # same as the intercept ## [1] 154.5971 sd(d2$height) / sqrt(nrow(d2)) # standard error of the estimator ## [1] 0.4126677 # test-statistic for the intercept: mean(d2$height) / (sd(d2$height) / sqrt(nrow(d2))) ## [1] 374.6285 # residual standard error: sqrt(sum(mod$residuals^2) / (nrow(d2) - 1)) ## [1] 7.742332 The ~1 means that there is just a so-called intercept in the model. There are no covariates, just the constant \\(c\\). This is the simplest we can do. lm stands for linear model and with this base command in R we ask the software to do the least squares estimation for us. Let’s look at the R-output of the model estimation: lm(formula = height ~ 1, data = d2): This is the model we estimated. Residuals: The difference between the actual height and the estimated height: \\(r_i = height_i - \\hat{c}\\). A univariate 5-point summary is given. Coefficients: The estimated coefficients of the model. In this case, there is just the intercept. We get the Std. Error of the estimate, i.e. the standard error (SE) of the mean, which is (according to the Central Limit Theorem) \\[\\frac{\\sigma}{\\sqrt{n}}\\] and can be estimated by the sample standard deviation divided by the square root of the sample size. \\(\\hat{SE} = \\frac{s}{\\sqrt{n}}\\) the t value and the Pr(&gt;|t|) which is the \\(p\\)-value of the (Wald-)test of the null hypothesis that the coefficient is zero (\\(H_0: \\text{intercept}=0\\)). This is a perfect example of an absolutely useless \\(t\\)-test. Why? Because obviously (exercise 2) the population mean of body heights is not zero. Residual standard error: The standard deviation of the residuals \\(r_i = height_i - \\hat{c}\\). In this case identical with the sample standard deviation of heights (exercise 3). \\(351\\) degrees of freedom. There are \\(352\\) observations and \\(1\\) parameter estimated (intercept/mean). Hence, there are \\(352-1=351\\) freely movable variables in the statistic of the sample standard deviation. Let’s look at the situation graphically: Above, the heights are plotted against the index of the observation (the order does not matter). The variability of heights around the regression line (constant in this case) seems to stay constant, which is a good sign. We will call this homoscedasticity later. The dashed vertical red lines show two residuals (one \\(&gt;0\\), the other \\(&lt;0\\)), the difference between the actual height and the estimated height. The model-estimated heights (\\(\\widehat{heights_i}\\)) are all identical and nothing but the mean of all heights. Peter Westfall explains in his excellent book a conditional distribution approach to regression, which is just what happens in the classical linear regression model. I highly recommend reading the first chapters. What does this mean in this context? This means, that for every fixed value of the predictor (which we formally do not have), the distribution of the response is normal with mean \\(\\hat{c}\\) and standard deviation \\(\\sigma\\). Since, we do not have a predictor (apart from the intercept), we can say, that the distribution of the heights is normal with mean \\(\\hat{c}\\) and standard deviation \\(\\sigma\\). This is what we assumed in the model. It can also be directly seen in the formula: \\[ height_i = c + \\varepsilon_i \\] If you add a normally distributed random variable (\\(\\varepsilon_i\\)) to a constant (\\(c\\)), the result is a normally distributed. No surprise here. We can also create new data (heights) from this model and compare the distributions of the actual data versus the model simulated data, since we have estimated the parameter \\(c\\) and the standard deviation \\(\\sigma\\). c_hat &lt;- mean(d2$height) sigma_hat &lt;- sqrt(sum(mod$residuals^2) / (nrow(d2) - 1)) # simulate heights from model heights_sim &lt;- rnorm(nrow(d2), c_hat, sigma_hat) # as many as in orig. # Convert to data frames for plotting df_actual &lt;- data.frame(height = d2$height, type = &quot;Actual Heights&quot;) df_simulated &lt;- data.frame(height = heights_sim, type = &quot;Simulated Heights&quot;) # Combine the datasets df_combined &lt;- rbind(df_actual, df_simulated) ggplot(df_combined, aes(x = height, fill = type)) + geom_density(alpha = 0.5) + labs(title = &quot;Comparison of Actual and Model-Simulated Heights&quot;, x = &quot;Height&quot;, y = &quot;Density&quot;) + scale_fill_manual(values = c(&quot;blue&quot;, &quot;red&quot;)) + theme_minimal() + theme(plot.title = element_text(hjust = 0.5)) One can repeat the simulation and see how the distributions changes to get a feeling for the variability of the model/data. 2.4 Exercises [E] Easy, [M] Medium, [H] Hard (Some) solutions to exercises can be found in the git-repo here. 2.4.1 [E] Exercise 1 Use the Swiss body heights data to determine the 95% “Vertrauensintervall” for \\(\\mu\\) and calculate the standard deviation of the heights from \\(21,873\\) Swiss people. Read the definition of the confidence interval in the footer of the table and explain why this is correct. 2.4.2 [E] Exercise 2 Why do we not need a hypothesis test to know that the population mean of body heights is not zero? Give 2 reasons. 2.4.3 [H] Exercise 3 Verify analytically that the Residual standard error is identical with the sample standard deviation of the heights in the simple mean model above. 2.4.4 [M] Exercise 4 Repeat the Bayesian and Frequentist estimation of the simple model using a different data set about chicken weights, which is included in R. Set useful priors for the mean and standard deviation of the model for the Baysian and the frequentist version considering your a priori knowledge about chicken weights. 2.4.5 [M] Exercise 5 Try to understand/verify the code in the addendum below. Change the parameters \\(\\mu = (\\mu_X, \\mu_Y)\\) and \\(\\Sigma\\) of the bivariate normal distribution and see how the 3D plot changes. Plot the scatter plot of the \\(X\\) and \\(Y\\) values and compare it to the 3D plot. Does this make sense? Why is the scatter plot elliptical? 2.4.6 [M] Exercise 6 Independence of two random variables \\(X\\) and \\(Y\\) implies that the correlation between them is zero. A correlation of zero does not necessarily imply independence. Verify this counterexample: For example, suppose the random variable \\(X\\) is symmetrically distributed about zero, and \\(Y = X^2\\). Then \\(\\mathit{Y}\\) is completely determined by \\(X\\), so that \\(\\mathit{X}\\) and \\(\\mathit{Y}\\) are perfectly dependent, but their correlation is zero. 2.4.7 [H] Exercise 7 Go to the section aobut the bivariate normal distribution below. How do you get the correlation matrix from the covariance matrix (\\(\\Sigma\\))? \\[ \\Sigma = \\begin{bmatrix} 0.75 &amp; 0.5 \\\\ 0.5 &amp; 0.75 \\end{bmatrix} \\] Hint: For the bivariate normal distribution, the correlation matrix is defined here. 2.5 Addendum 2.5.1 The bivariate normal distribution As a refresher, you can look into the old QM1 script and read the chapter “4.7 Gemeinsame Verteilungen”. Maybe this video also helps. The bivariate normal distribution is a generalization of the normal distribution to two dimensions. Now, we look at the distribution of two random variables \\(X\\) and \\(Y\\) at the same time. Instead of one Gaussian curve, we have a 3D curve. This curve defines how plausible different combinations of \\(X\\) and \\(Y\\) are. Single points (like (3,6)) still have probability zero, because now the volume over a single point (\\(x\\), \\(y\\)) is zero. The probability of a certain area is now the volume under the curve compared to the area under the density curve in the one-dimensional case. Example: The following plot shows the density of a bivariate normal distribution of two variables \\(X\\) and \\(Y\\) with \\(\\mu_X = 0\\), \\(\\mu_Y = 0\\), \\(\\sigma_X = 1\\), \\(\\sigma_Y = 1\\) and \\(\\rho = \\frac{2}{3}\\). Below is the correlation matrix of the bivariate normal distribution. ## [,1] [,2] ## [1,] 1.0000000 0.6666667 ## [2,] 0.6666667 1.0000000 If you move the plot around with your mouse, you see that there is a positive correlation between \\(X\\) and \\(Y\\) (\\(\\rho = \\frac{2}{3}\\)). This means that if \\(X\\) is above its mean, \\(Y\\) is also more likely to be above its mean. The variances of \\(X\\) and \\(Y\\) are both \\(1\\). That means, that if you cut through the plot in \\(X=0\\) or \\(Y=0\\), you see the same form of normal distribution. If you look at if from above, we have hihglighted the section on the surface over the area \\(X \\in [0.5, 2]\\) and \\(Y \\in [0.5, 2]\\). The volume over this area under the density curve is the probability of this area: \\(P(X \\in [0.5, 2] \\text{ and } Y \\in [0.5, 2])\\) Calculate with R this probability with R: # Load the mvtnorm package library(mvtnorm) # Define the parameters of the bivariate normal distribution mu &lt;- c(0, 0) # Mean sigma &lt;- matrix(c(0.75, 0.5, 0.5, 0.75), ncol = 2) # Covariance matrix # Define the bounds of the square highlight_x &lt;- c(0.5, 2) highlight_y &lt;- c(0.5, 2) # Calculate the probability using pmvnorm pmvnorm( lower = c(highlight_x[1], highlight_y[1]), upper = c(highlight_x[2], highlight_y[2]), mean = mu, sigma = sigma ) ## [1] 0.1526031 ## attr(,&quot;error&quot;) ## [1] 1e-15 ## attr(,&quot;msg&quot;) ## [1] &quot;Normal Completion&quot; Since we do not believe everything we are told, we rather check via simulation, if \\(0.1526\\) is a plausible value for the probability: # Load necessary library library(MASS) # Define the parameters of the bivariate normal distribution mu &lt;- c(0, 0) # Mean sigma &lt;- matrix(c(0.75, 0.5, 0.5, 0.75), ncol = 2) # Covariance matrix cov2cor(sigma) # Convert covariance matrix to correlation matrix ## [,1] [,2] ## [1,] 1.0000000 0.6666667 ## [2,] 0.6666667 1.0000000 # Define the bounds of the square highlight_x &lt;- c(0.5, 2) highlight_y &lt;- c(0.5, 2) # Number of simulations n_sim &lt;- 10^4 set.seed(343434) # Simulate bivariate normal samples samples &lt;- mvrnorm(n = n_sim, mu = mu, Sigma = sigma) # Count how many samples fall within the square inside_square &lt;- sum( samples[, 1] &gt;= highlight_x[1] &amp; samples[, 1] &lt;= highlight_x[2] &amp; samples[, 2] &gt;= highlight_y[1] &amp; samples[, 2] &lt;= highlight_y[2] ) # Estimate the probability inside_square / n_sim ## [1] 0.1557 Looks good. 2.6 Sample exam questions for this chapter (in German since exam is in German) 2.6.1 Question 1 Welche der folgenden Aussage(n) hinsichtlich Predcition und Explanation im Kontext statistischer Modellierung ist/sind korrekt? Prediction models, die gut funktionieren, lassen im Allgemeinen auch Rückschlüsse auf die zugrunde liegenden kausalen Zusammenhänge zu. Prediction models fokussieren sich auf die Güte der Prognose für neue Daten, nicht auf das Verständnis kausaler Beziehungen. Explanatory models benötigen eine gute theoretische Fundierung, um kausale Zusammenhänge zwischen Variablen testen zu können. Ein Beispiel für ein Explanatory model ist die Klassifikation von Bildern mittels neuronaler Netzwerke. 2.6.2 Question 2 Welche Aussage(n) bezüglich Bayes’scher statistischer Modellierung ist/sind korrekt? Bayes’sche Modelle sind nur für kleine Stichproben geeignet, da sie bei großen Datenmengen instabil werden. Die Prior-Verteilungen der Parameter beeinflussen die Posterior-Verteilungen der Parameter in der Regel kaum. Aus Bayes Modellierung erhält man in erster Linie Punktschätzungen der Parameter. Ist der \\(p\\)-Wert bei einer Hypothese \\(H_0\\) kleiner als \\(0.05\\), so ist die Hypothese \\(H_0\\) falsch. 2.6.3 Question 3 Wir gehen (wie in der Vorlesung) von einem simplen Mittelwert-Modell für Körpergrößen aus. Welche der folgenden Aussage(n) ist/sind korrekt? Die posterioren Verteilungen von \\(\\mu\\) und \\(\\sigma\\) sind stochastisch unabhängig. Man ist sich a priori zu (ca.) 95% sicher, dass \\(\\mu\\) im Bereich \\([171.1-20, 171.1+20]\\) liegt. Gäbe es noch eine dritte Variable - z.B. geographische Region - die sowohl \\(\\mu\\) als auch \\(\\sigma\\) beeinflusst, so wäre die Verteilung von \\(\\mu\\) und \\(\\sigma\\) nicht mehr stochastisch unabhängig. Je größer die sample size, desto weniger spielen die Priors eine Rolle und desto ähnlicher sind sich die Resultate der Bayes’schen und Frequentistischen Modellierung. "],["simple-linear-regression.html", "Chapter 3 Simple Linear Regression 3.1 Simple Linear Regression in the Bayesian Framework 3.2 Simple Linear Regression in the Frequentist Framework 3.3 Exercises 3.4 eLearning 1 3.5 Sample exam questions for this chapter (in German since exam is in German)", " Chapter 3 Simple Linear Regression 3.1 Simple Linear Regression in the Bayesian Framework You can watch this video as primer. We will now add one covariate/explanatory variable to the model. Refer to Statistical Rethinking “4.4 Linear prediction” or “4.4 Adding a predictor” as it’s called in the online version of the book. So far, our “regression” did not do much to be honest. The mean of a list of values was already calculated in the descriptive statistics section before and we have mentioned how great this statistic is as measure of location and where its weaknesses are. Now, we want to model how body height and weight are related. Formally, one wants to predict body heights from body weights. Here and in the Frequentist framework, we will see that it is not the same problem (and therefore results in a different statistical model) to predict body weights from body heights or vice versa. We remember the following: Regress \\(Y\\) on \\(X\\), which is equivalent to predict \\(Y\\) from \\(X\\). We know X and want to predict Y. Regress \\(X\\) on \\(Y\\), which is equivalent to predict \\(X\\) from \\(Y\\). We know Y and want to predict X. The word “predictor” is important here. It is a technical term and describes a variable that we know (in our case weight) and with which we want to “guess as good as possible” the value of the dependent variable (in our case height). “As good as possible” means that we put a penalty on an error. The farer our prediction is away from the true value (\\(y_i\\)), the higher the penalty. And not only that, but if you are twice as far away from the true value, you should be penalized four times as much. This is the idea behind the squared error loss function and the core of the least squares method. What if we would punish differently, you ask? There are many loss functions one could use (for instance the Huber loss), maybe we will see some later. For now, we punish quadratically. We always visualize the data first to improve our understanding. First comes descriptive statistics, then one can think about modeling. library(rethinking) data(Howell1) d &lt;- Howell1 d2 &lt;- d[d$age &gt;= 18, ] plot(d2$height ~ d2$weight) It’s not often that you see such a clean plot. The scatterplot indicates a linear relationship between the two variables. The higher the weight, the higher the height; with some deviations of course and we decide that normally distributed errors are a good idea. This relationsip is neither causal, nor deterministic. It is not causal since an increase in weight does not necessarily lead to an increase in height, especially in grown-ups. It is not deterministic since there are deviations from the line. It if was deterministic, we would not need statistical modeling. For simpler notation, we will call d2$weight \\(x\\). \\(\\bar{x}\\) is the mean of \\(x\\). 3.1.1 Model definition Let’s write down our model (again with the Swiss population prior mean): \\[\\begin{eqnarray*} h_i &amp;\\sim&amp; \\text{Normal}(\\mu_i, \\sigma)\\\\ \\mu_i &amp;\\sim&amp; \\alpha + \\beta (x_i - \\bar{x})\\\\ \\alpha &amp;\\sim&amp; \\text{Normal}(171.1, 20)\\\\ \\beta &amp;\\sim&amp; \\text{Normal}(0, 10)\\\\ \\sigma &amp;\\sim&amp; \\text{Uniform}(0, 50) \\end{eqnarray*}\\] Visualization of the model structure: There are now additional lines for the priors of \\(\\alpha\\) and \\(\\beta\\) (compared to the simple mean model before). The model structure also shows the way to simulate from the prior. One starts at the top and ends up with the heights. \\(h_i\\) is the height of the \\(i\\)-th person and we assume it is normally distributed. \\(\\mu_i\\) is the mean of the height of the \\(i\\)-th person and we assume it is linearly dependent on the difference \\(x_i-\\bar{x}\\). Compared to the intercept model, a different mean is assumed for each person depending on his/her weight. \\(\\alpha\\) is the intercept and we use the same prior as before. \\(\\beta\\) is the slope of the line and we use the normal distribution as prior for it, hence it can be positive or negative and how plausible each value is, is determined by that specific normal distribution. Note, that we could easily adapt the distribution to any distribution we like. The prior for \\(\\sigma\\) is unchanged. \\(x_i - \\bar{x}\\) is the deviation of the weight from the mean weight, thereby we center the weight variable. This is a common practice in regression analysis. A value \\(x_i - \\bar{x} &gt; 0\\) implies that the person is heavier than the average. The linear model is quite popular in applied statistics and one reason is probably the rather straightforward interpretation of the coefficients: A one unit increase in weight is on average (in the mean) associated with a \\(\\beta\\) unit increase/decrease (depending if \\(\\beta\\) is \\(&gt;0\\) or \\(&lt;0\\)) in height. 3.1.2 Priors We want to plot our prior predictions to get a feeling what the model would predict without seeing the data. This is a kind of “sanity check” to see if the priors and the model definition are reasonable. Again, we just draw from the assumed distributions for \\(\\alpha\\) and \\(\\beta\\) 100 times and draw the corresponding lines. Just as the model definition says. set.seed(2971) N &lt;- 100 # 100 lines a &lt;- rnorm(N, 171.1, 20) b &lt;- rnorm(N, 0, 10) xbar &lt;- mean(d2$weight) # start with empty plot plot(NULL, xlim = range(d2$weight), ylim = c(-100, 400), xlab = &quot;weight&quot;, ylab = &quot;height&quot;) abline(h = 0, lty = 2) # horizontal line at 0 abline(h = 272, lty = 1, lwd = 0.5) # horizontal line at 272 mtext(&quot;b ~ dnorm(0, 10)&quot;) # Overlay the 100 lines for (i in 1:N) { curve(a[i] + b[i] * (x - xbar), from = min(d2$weight), to = max(d2$weight), add = TRUE, col = col.alpha(&quot;black&quot;, 0.2)) } This linear relationship defined with the chosen priors seems rather non-restrictive. According to our priors, one could see very steeply rising or falling relationships between weight and expected heights. We could at least make the priors for the slope (\\(\\beta\\)) non-negative. One possibility to do this is to use a log-normal distribution for the prior of \\(\\beta\\) which can only take non-negative values. \\[\\beta \\sim \\text{Log-Normal}(0, 1)\\] Lets plot the priors again. set.seed(2971) N &lt;- 100 # 100 lines a &lt;- rnorm(N, 171.1, 20) b &lt;- rlnorm(N, 0, 1) xbar &lt;- mean(d2$weight) plot(NULL, xlim = range(d2$weight), ylim = c(-100, 400), xlab = &quot;weight&quot;, ylab = &quot;height&quot;) abline(h = 0, lty = 2) # horizontal line at 0 abline(h = 272, lty = 1, lwd = 0.5) # horizontal line at 272 mtext(&quot;b ~ dlnorm(0, 1)&quot;) # Overlay the 100 lines for (i in 1:N) { curve(a[i] + b[i] * (x - xbar), from = min(d2$weight), to = max(d2$weight), add = TRUE, col = col.alpha(&quot;black&quot;, 0.2)) } This seems definitely more realistic. There is some sort of positive linear relationship between weight and expected height. 3.1.3 Fit model Now, let’s estimate the posterior/fit the model as before: # load data again, since it&#39;s a long way back library(rethinking) data(Howell1) d &lt;- Howell1 d2 &lt;- d[d$age &gt;= 18, ] xbar &lt;- mean(d2$weight) # fit model mod &lt;- quap( alist( height ~ dnorm(mu, sigma), mu &lt;- a + b * (weight - xbar), a ~ dnorm(171.1, 100), b ~ dnorm(0, 10), sigma ~ dunif(0, 50) ) , data = d2) Note that the model definition was now directly included in the quap function. Let’s look at the marginal distributions of the parameters: precis(mod) ## mean sd 5.5% 94.5% ## a 154.5972120 0.27033045 154.1651717 155.0292523 ## b 0.9050131 0.04192754 0.8380048 0.9720214 ## sigma 5.0718673 0.19115323 4.7663675 5.3773671 plot(mod) Note, that the credible intervals in the plot of the coefficients are hardly noticable. The reason is that the intercept \\(a\\) is rather large, whereas \\(b\\) and sigma are comparativly small. The plot is scaled to the largest parameter. We can improve this by centering the height variable as well. Or, we could standardize both weight and height. This would change the interpretation of the \\(\\beta\\) parameter. It would then be the expected change in standard deviations when changing weight by one standard deviation. See exercise 12. The analysis yields estimates for all our parameters of the model: \\(\\alpha\\), \\(\\beta\\) and \\(\\sigma\\). The estimates are the mean of the posterior distribution. See exercise 2. Interpretation of \\(\\beta\\): The mean of the posterior distribution of \\(\\beta\\) is 0.9. A person with a weight of 1 kg more weight can be expected to be 0.9 cm taller. A 89% credible interval for this estimate is \\([0.83, 0.97]\\). We can be quite sure that the slope is positive (of course we designed it that way too via the prior). It might also be interesting to inspect the variance-covariance matrix, respectively the correlation between the parameters as we did before in the intercept model. Remember, these are the correlations of parameters in the multivariate (because three paremeters simulatenously) posterior distribution. diag(vcov(mod)) ## a b sigma ## 0.073078550 0.001757918 0.036539558 round(cov2cor(vcov(mod)),2) ## a b sigma ## a 1 0 0 ## b 0 1 0 ## sigma 0 0 1 diag(vcov(mod)) gives the variances of the parameters and cov2cor(vcov(mod))the correlations. As we can see the correlations are (near) zero. Compare to the graphical display of the model structure. There is no connection. 3.1.4 Result Graphical end result of fitting the model: We plot the marginal posterior distributions of \\(\\alpha\\) and \\(\\beta\\), and also the raw data with the found regression line. post &lt;- extract.samples(mod) dens(post$a, col = rangi2) dens(post$b, col = rangi2) # both posteror plots seem symmetric # we use the mean as point estimate # for a and b. a_quap &lt;- mean(post$a) b_quap &lt;- mean(post$b) plot(d2$height ~ d2$weight, col = rangi2) curve(a_quap + b_quap * (x - xbar), add = TRUE) 3.1.5 Credible bands We could draw again and again from the posterior distribution and calculate the means like above. Plotting the regression lines with the respective parameters \\(\\alpha\\), \\(\\beta\\) would indicate the variability of the estimates. Note that we do not draw from the data (as one does in bootstrap resampling), but from the posterior distribution. The link function does this for us. It takes the posterior distribution we have just fit, samples \\(\\alpha\\) and \\(\\beta\\) from it, calculates the mean and then samples from this normal distribution for the mean at a given weight. Refer to pages 98-106 in the current version of the book Statistical Rethinking for all details. # Define a sequence of weights for predictions weight.seq &lt;- seq(from = 25, to = 70, by = 1) # Use the model to compute mu for each weight mu &lt;- link(mod, data = data.frame(weight = weight.seq)) str(mu) ## num [1:1000, 1:46] 138 136 137 136 137 ... # Visualize the distribution of mu values plot(height ~ weight, d2, type = &quot;n&quot;) # Hide raw data with type = &quot;n&quot; # Loop over samples and plot each mu value for (i in 1:100) { points(weight.seq, mu[i, ], pch = 16, col = col.alpha(rangi2, 0.1)) } The link function fixes the weight at the values in weight.seq and draws samples from the posterior distribution of the parameters. Above, the first \\(100\\) (of \\(1000\\)) rows are used. We can also draw a nice shade (using all 1000 rows of the \\(\\mu\\)-matrix) for the regression line: # Summarize the distribution of mu mu.mean &lt;- apply(mu, 2, mean) mu.PI &lt;- apply(mu, 2, PI, prob = 0.89) plot(height ~ weight, d2, col = col.alpha(rangi2, 0.5)) lines(weight.seq, mu.mean) shade(mu.PI, weight.seq) The function PI from the rethinking package calculates the 89% percentile interval for the mean of the height at a certain weight. The apply function apples this function to each columns (hence the 2) of the matrix mu. As we can see, we are pretty sure about the mean of height which we wanted to model in the first place. Mean modeling is one thing, individual prediction is another. Given a certain weight of a person, what is the height of the same person? The first line in the model definition (\\(height_i \\sim Normal(\\mu_i, \\sigma)\\)) tells us that a person’s height is distributed around the mean (which linearly depends on weight) and is not necessary the mean itself. To get to an individual prediction, we need to consider the uncertainty of the parameter estimation and the uncertainty from the Gaussian distribution around the mean (at a certain weight). We do this with sim. # Simulate heights from the posterior sim.height &lt;- sim(mod, data = list(weight = weight.seq)) str(sim.height) ## num [1:1000, 1:46] 138 130 130 147 136 ... # Compute the 89% prediction interval for simulated heights height.PI &lt;- apply(sim.height, 2, PI, prob = 0.89) # Plot the raw data plot(height ~ weight, d2, col = col.alpha(rangi2, 0.5)) # Draw MAP (mean a posteriori) line lines(weight.seq, mu.mean) # Draw HPDI (highest posterior density interval) region for mu shade(mu.PI, weight.seq) # Draw PI (prediction interval) region for simulated heights shade(height.PI, weight.seq) Here, the PI function is applied to the simulated heights and calculates the 89% percentile interval for each weight. The lighter and wider shaded region is where the model expects to find 89% of the heights of a person with a certain weight. This part is sometimes a bit desillusioning when seen for the first time: Draw a horizontal line at 150 cm and see how many weights (according to the individual prediction) are compatible with this height. Weights from 30 to 50 kg are compatible with this height according to the 89% prediction interval: The higher the credibility, the wider the interval, the wider the range of compatible weights. In our example, more than 60% of the weight-range are plausible to predict a height of 150 cm. (50 - 30) / (range(d2$weight)[2] - range(d2$weight)[1]) ## [1] 0.6265362 On the other hand: We did not model the relationship this way. We modeled height depending on weight and not the other way around. In the next chapter, we will regress weight on height (yes, this is the correct order) and see what changes. 3.1.6 Summary We have added a covariate (weight) to the simple mean model to predict height. We have centered the weight variable. We have defined and refined priors for the intercept and slope. We have estimated the posterior distribution of the parameters using quadratic approximation with quap. We have visualized the result. We have created credible bands for mean and individual predictions. 3.2 Simple Linear Regression in the Frequentist Framework We will now do the same analysis in the Frequentist framework while introducing some foundational theory along the way. I recommend reading the first couple of chapters from Westfall. 3.2.1 Model definition Our linear model is defined as: \\[h_i = \\beta_0 + \\beta_1 x_i + \\varepsilon_i\\] where \\(\\varepsilon_i\\) is the error term with \\(\\varepsilon_i \\sim N(0, \\sigma^2), \\forall i\\) \\(\\beta_0\\) is the unknown but fixed intercept \\(\\beta_1\\) is the unknown but fixed slope 3.2.1.1 Model Assumptions of the Classical Regression Model (Westfall, 1.7): The first and most important assumption is that the data are produced probabilistically, which is specifically stated as \\[Y|X = x \\sim p(y|x)\\] What does this mean? \\(Y|X = x\\) is the random variable Y conditional on X being equal to x, i.e. the distribution of \\(Y\\) if we know the value of \\(X\\) (in our example the weight in kg). This is a nice image of what is meant here. \\(p(y|x)\\) is the distribution of potentially observable \\(Y\\) given \\(X = x\\). In our case above this was the normal distribution with mean \\(\\mu_i\\) and variance \\(\\sigma\\). You can play with this shiny app to improve your understanding. It offers the option “Bedingte Verteilung anzeigen”. One always thinks about the so-called data generating process (Westfall, 1.2). How did the data come about? There is a process behind it and this process is attempted to be modeled. Further assumptions: Correct functional specification: The conditional mean function \\(f(x) = \\mathbb{E}(Y|X=x)\\). In the case of the linear model, the assumption is \\(\\mathbb{E}(Y|X=x) = \\alpha + \\beta x\\). The expectation of \\(Y\\) (height) depends linearly on \\(x\\) (weight). This assumption is violated when the true relationship is not linear or the data at least suggest that it is not linear, like here. The errors are homoscedastic (constant variance \\(\\sigma^2\\)). This means the variances of all conditional distributions \\(p(y|x)\\) are constant (\\(=\\sigma^2\\)). This assumption is (for instance) violated if points are spreading out more and more around the regression line, indicating that the errors are getting larger. Normality. For the classical linear regression model all the conditional distributions \\(p(y|x)\\) are normal distributions. It could well be, that the errors are not nicely normally distributed around the regression line, for instance if we have a lot of outliers upwards and the distribution is skewed, like here (Figure 5.20). The errors are independent of each other. The potentially observable \\(\\varepsilon_i = Y_i - f(\\mathbf{x_i}, \\mathbf{\\beta})\\) is uncorrelated with \\(\\varepsilon_j = Y_j - f(\\mathbf{x_j}, \\mathbf{\\beta})\\) for \\(i \\neq j\\). This assumption is violated if the errors are correlated, here is an example: The true data comes from a sine curve and we estimate a linear model (green), which does not fit the data well (left plot). The residuals plot shows clear patterns (right plot) and indicates that the errors are correlated. Specifically, the errors around \\(x=2\\) and \\(x=4\\) are negatively correlated (see exercise 6). ## ## Attaching package: &#39;patchwork&#39; ## The following object is masked from &#39;package:MASS&#39;: ## ## area In the case above, the errors are not conditionally independent. If we condition on \\(X=2\\) and \\(X=4.5\\), the errors are correlated (\\(r \\sim -0.3\\)), which they should not be. These assumptions become clearer as we go along and should be checked for every model we fit. They are not connected, they can all be true or false. The question is not “Are the assumptions met?” since they never are exactly met. The question is how “badly” the assumptions are violated? Remember, all models are wrong, but some are useful. In full, the classical linear regression model can be written as: \\[Y_i|X_i = x_i \\sim_{independent} N(\\beta_0 + \\beta_1 x_{i1} + \\dots \\beta_k x_{ik},\\sigma^2)\\] for \\(i = 1, \\dots, n\\). Interpretation of this formula: The outcome variables \\(Y_i\\) are independently (from each other, since the errors are indepentent from each other) conditionally normally distributed (conditioned on \\(X_i=x_i\\)) with a mean that is linearly depending on true but unknown parameters \\(\\beta_0, \\beta_1, \\dots, \\beta_k\\) and a constant variance \\(\\sigma^2\\). 3.2.2 Fit the model Again, we fit the model using the least squares method. For a neat animated explanation, visit this video. There are literally hundreds of videos on the topic. Choose wisely. Not all are good. If in doubt, use our recommended books as reading materials. This is the most reliable source. A hint along the way: Be very sceptical if you ask GPT about information, although for this special case one has a good chance of getting a decent answer due to the vast amount of training data. One has to minimize the sum of squared differences between the true heights and the model-predicted heights in order to find \\(\\beta_0\\) and \\(\\beta_1\\). \\[SSE(\\beta_0, \\beta_1) = \\sum_{i=1}^n (y_i - (\\beta_0 + \\beta_1 x_i))^2\\] We omit the technical details (set derivative to zero and solve the system) and give the results for \\(\\beta_0\\) and \\(\\beta_1\\): \\[ \\hat{\\beta_0} = \\bar{y} - \\hat{\\beta_1} \\bar{x}, \\] \\[ \\hat{\\beta_1} = \\frac{\\sum_{i=1}^n (x_i - \\bar{x})(y_i - \\bar{y})}{\\sum_{i=1}^n (x_i - \\bar{x})^2} = \\frac{s_{x,y}}{s_x^2} = r_{xy} \\frac{s_y}{s_x}. \\] where: \\(r_{xy}\\) is the sample correlation coefficient between \\(x\\) and \\(y\\) \\(s_x\\) and \\(s_y\\) are the uncorrected sample standard deviations of \\(x\\) and \\(y\\) \\(s_x^2\\) and \\(s_{xy}\\) are the sample variance and sample covariance, respectively Interpretation of \\(\\hat{\\beta}_0\\) and \\(\\hat{\\beta}_1\\): see exercise 3. Let’s use R again to solve the problem: library(rethinking) data(Howell1) d &lt;- Howell1 d2 &lt;- d[d$age &gt;= 18, ] mod &lt;- lm(height ~ weight, data = d2) summary(mod) ## ## Call: ## lm(formula = height ~ weight, data = d2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -19.7464 -2.8835 0.0222 3.1424 14.7744 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 113.87939 1.91107 59.59 &lt;2e-16 *** ## weight 0.90503 0.04205 21.52 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 5.086 on 350 degrees of freedom ## Multiple R-squared: 0.5696, Adjusted R-squared: 0.5684 ## F-statistic: 463.3 on 1 and 350 DF, p-value: &lt; 2.2e-16 Interpretation of R-output: Call: The model that was fitted. Residuals: \\(r_i = height_i - \\widehat{height}_i\\). Differences between true heights and model-predicted heights. Coefficients: Names for \\(\\beta_0\\) and \\(\\beta_1\\). We call them \\(\\hat{\\beta}_0\\) and \\(\\hat{\\beta}_1\\). Estimate: The (least squares) estimated value of the coefficient. Std. Error: The standard error of the estimate. This is a measure of how precise the estimator for the coefficient is. t value: The value of the \\(t\\)-statistic for the (Wald-) hypothesis test \\(H_0: \\beta_i = 0\\). Pr(&gt;|t|): The \\(p\\)-value of the hypothesis test. Residual standard error: The estimate of \\(\\sigma\\) which is also a model parameter (as in the Bayesian framework). Multiple R-squared: The proportion of the variance explained by the model (we will explain this below). Adjusted R-squared: A corrected version of the \\(R^2\\) which takes into account the number of predictors in the model. F-statistic: The value of the \\(F\\)-statistic for the hypothesis test: \\(H_0: \\beta_1 = \\beta_2 = \\dots = \\beta_k = 0\\). Note, the alternative hypotheses to this test is that any of the \\(\\beta_i\\) is not zero. If that is the case, the model explains more than the mean model with just \\(\\beta_0\\). We could also solve the least squares problem graphically: We want to find the values of \\(\\beta_0\\) and \\(\\beta_1\\) that minimize the sum of squared differences which can be plotted as 3D function. Since the function is a sum of squared terms, we should expected a paraboloid form. All we have to do is to ask R which of the coordinates (\\(\\beta_0\\), \\(\\beta_1\\)) minimizes the sum of squared errors. The result confirms the results from the lm function. The dot in red marks the spot (Code is in the git repository): ## Intercept beta_0: 113.8794 ## Slope beta_1: 0.9050291 3.2.3 Confidence Intervals of coefficients (Frequentist) You can get CI’s conveniently with the confint function: confint(mod, level = 0.96) ## 2 % 98 % ## (Intercept) 109.939864 117.8189232 ## x 0.818351 0.9917072 Remember, these are Frequentist confidence intervals. If one repeats the experiment (i.e. draws new data from the true model) many times, the true but unknown value of the parameter will be in the interval in 96% of the cases. We can also use the simple bootstrap. The advantage of this technique is that we can basically always use it, no matter how compliated the estimator is. We do not need formulae. We simply create 1000 bootstrap samples, fit the model, store the coefficients. The 2% and 98% quantiles of the coefficients constitute the 96% bootstrap confidence interval. set.seed(123) n &lt;- nrow(d2) B &lt;- 1000 boot_coefs &lt;- matrix(NA, nrow = B, ncol = 2) for (i in 1:B) { boot_idx &lt;- sample(1:n, replace = TRUE) boot_mod &lt;- lm(height ~ weight, data = d2[boot_idx, ]) boot_coefs[i, ] &lt;- coef(boot_mod) } #head(boot_coefs) t(apply(boot_coefs, 2, quantile, c(0.02, 0.98))) ## 2% 98% ## [1,] 110.1862455 117.4516455 ## [2,] 0.8229982 0.9859997 The CIs are quite similar to the ones from the confint function. In the Bayesian setting, we used the centered weight variable. Let’s to this here too for comparison and use 89% coverage probability. d2$weight_centered &lt;- d2$weight - mean(d2$weight) mod_centered &lt;- lm(height ~ weight_centered, data = d2) #summary(mod_centered) confint(mod_centered, level = 0.89) ## 5.5 % 94.5 % ## (Intercept) 154.162715 155.0314698 ## weight_centered 0.837658 0.9724002 Compare with precis from the Bayesian model: ## mean sd 5.5% 94.5% ## a 154.5972131 0.27033041 154.165173 155.0292533 ## b 0.9050133 0.04192753 0.838005 0.9720216 ## sigma 5.0718667 0.19115317 4.766367 5.3773663 We are glad to see that both analyses align really nicely. 3.2.4 ANOVA (Analysis of Variance) A non-obvious and very useful finding is that the total variability (SST) in the data (our heights) can be decomposed (or analysed) into two parts: The variability explained by the model (the regression line): SSR The variability not explained by the model (the residuals): SSE \\[\\text{Sum of Squares in Total} = \\text{Sum of Squares from Regression} + \\text{Sum of Squared Errors}\\] \\[SST = SSR + SSE\\] \\[\\sum_{i=1}^{n} (y_i - \\bar{y})^2 = \\sum_{i=1}^{n} (\\hat{y}_i - \\bar{y})^2 + \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2\\] If you are interested in the details, check out this. This video explains the concept nicely. Let’s visualize our regression result: ## `geom_smooth()` using formula = &#39;y ~ x&#39; The blue dotted line is the distance from the mean to the point (total variance), the red dotted line is the distance from the mean to the regression line (explained variance) and the green dotted line is the distance from the regression line to the point (unexplained variance). We see that it adds up. I find this fact quite fascinating. Thank you Ronald Fisher. See exercise 13. 3.2.5 \\(R^2\\) - Coefficient of Determination \\(R^2\\) is the amount of variance explained by the model. You can also read Westfall 8.1. As you can see above, the total variance (SST) of our outcome (height) can be decomposed into two parts: the variance explained by the model (SSR) and the variance not explained by the model (SSE). Maybe the most intuitive definition of \\(R^2\\) is: \\[R^2 = \\frac{SSR}{SST} = \\frac{SST - SSE}{SST} = 1 - \\frac{SSE}{SST}\\] The value is between 0 and 1. The higher the value, the more variance is explained. But be cautious. Depending on the context, a really high \\(R^2\\) is not necessarily a good thing. With the data we are working with, it could easily hint towards an error. If we are near 1, all points in the simple linear regression model are on the line. If we are near 0, the model does not explain much of the variance and we would see “noise with no slope” in the scatterplot (exercise 4). The normal \\(R^2\\) can be found in the R output under Multiple R-squared. If you add a lot of variables to your regression model, you can get an \\(R^2\\) of 1. The \\(R^2\\) will never decrease when adding more variables. We will verify this when we have more than 2 explanatory variables. As a non-formal explanation for this: In the Sum of Squares Errors (SSE), if you add more covariates (\\(\\beta_2, \\beta_3\\)), you have more freedom to choose values that minimize the number that will be squared. Simple regression is just a special case of multiple (more than one predictor) regression with \\(\\beta_2=\\beta_3=\\dots=0\\). Hence, you will definitely not be worse off with regards to SSE when using more covariates. A smaller SSE implies a larger SSR (sum constraint; SST remains constant) and hence a larger \\(R^2\\). If you have as many explanatory variables as data points, you can get an \\(R^2\\) of 1. This is overfitting at its “best” (which we want to avoid). You would just get a value for each data point by setting all other \\(\\beta_i\\) to zero and \\(\\beta_i = \\frac{y_i}{x_i}\\). Since we want to find the unterlying process, we want to avoid this. Although not perfect, one way to mitigate the influence of “too many” variables on \\(R^2\\) is to use the adjusted \\(R^2\\), which an also be found in the R output (Adjusted R-squared). 3.2.5.1 Seperating property of regression due to \\(R^2\\): Peter Westfall explains (in Figure 8.1 of the book) how \\(R^2\\) influences the separation of distributions in our simple regression model. In our regression of height on weight (the order is correct, that’s how you say it), the \\(R^2\\) is \\(0.5696\\). The following plot shows how “well” (i.e. precise) one can predict height if we use the 10% and 90% quantile of the weights (x_low and x_high). In both, you see the conditional distribution of height given the weight \\(X = x_{low}\\) or \\(X = x_{high}\\). Scenario 1 is the original model, scenario 2 is the same data with added noise (in Y-direction), which reduces \\(R^2\\) to \\(0.13\\), much lower. In the right plot, the distributions have a large overlap and it is hard to distinguish between weights when seeing the height. With a very low \\(R^2\\), the height prediction does not really change and we could just as well use the mean model. In the left plot, given \\(X = x_{low}\\) gives a a rather strongly shifted normal distribution of potentially observable heights for this weight compared to \\(X=x_{high}\\). We would have a lower missclassification error when trying to distinguish heights of very light and very heavy people in the sample just by seeing the height. You can think of an even more extreme separation of these distributions, which would happen, when \\(R^2\\) is very high or the true slope is much higher. See also exercise 5. An interesting way to look at \\(R^2\\) is the following: Given, that one person is in the 90% quantile of the weight, the other is in the 10% quantile. What is the probability that the height of the person in the 90% quantile is higher than the height of the other person? We could calculate this relatively easy using theorems about additivity of normal distributions. Since we are all about application, we simulate this: library(rethinking) data(Howell1) d &lt;- Howell1 d2 &lt;- d[d$age &gt;= 18, ] # Simulate heights for the two quantiles n_sims &lt;- 10000 set.seed(123) mod &lt;- lm(height ~ weight, data = d2) summary(mod)$r.squared ## [1] 0.5696444 x_low_high &lt;- quantile(d2$weight, probs = c(0.1, 0.9)) x_low_high ## 10% 90% ## 36.48581 54.01997 mean1 &lt;- 113.8793936 + 0.9050291 * x_low_high[1] mean2 &lt;- 113.8793936 + 0.9050291 * x_low_high[2] sd &lt;- 5.086 # Standard deviation for both distributions simulated_heights &lt;- tibble( # conditional normal distribution according to the model low_heights = rnorm(n_sims, mean = mean1, sd = sd), high_heights = rnorm(n_sims, mean = mean2, sd = sd) ) # Calculate the probability that the height of the person in the 90% quantile is higher # than the height of the person in the 10% quantile simulated_heights %&gt;% mutate(higher_height = high_heights &gt; low_heights) %&gt;% dplyr::summarise(mean(higher_height)) ## # A tibble: 1 × 1 ## `mean(higher_height)` ## &lt;dbl&gt; ## 1 0.987 In other words, we can be almost sure, that a person in the 90% quantile of the weight is taller than a person in the 10% quantile of the weight given this data set. See also exercise 11. 3.2.6 Check regression assumptions Everytime we fit a model, we should check the assumptions above. We do this for different reasons (which will become clearer over the course). The assumptions are independent of each other. They can all be true or false or some can be true and some false (Wesftall, p.21). Chapter 4 in the book is dedicated to this topic. It is important to know that the assumptions are usually not met exactly. The question is how badly they are violated, not if they are violated. Furthermore, the asssumptions refer to the data generating process, not the data itself. Thus, the evaluation of the assumptions should involve subject matter knowledge. \\(p\\)-values to evaluate model assumptions are not a good idea. To quote the American Statistical Association (ASA): “By itself, a \\(p\\)-value does not provide a good measure of evidence regarding a model or hypothesis.” Decision-tree thinking might not be the best idea for statistical modeling. We will not use hypothesis tests for assumptions, because They are never met exactly. You cannot “prove” them. With small sample sizes, the statistical power is often low. With large sample sizes, the smallest deviation will be “significant”. We will follow the book (chapter 4, pages 99ff) and use graphical and simulation methods to check the assumptions. As guidance, we could check them in the following order: Linearity Constant variance Independence Normality 3.2.6.1 Linearity First, we plot the data, as we did already above. We can add a a smoothing line to the raw data as well: ## `geom_smooth()` using formula = &#39;y ~ x&#39; It looks like this relationship is describable in a linear way. No apparent curvature or patches. A refined version of the scatterplot of the raw data is The residual scatter plot (\\(x_i, e_i\\)): ## `geom_smooth()` using formula = &#39;y ~ x&#39; Compared to the scatterplot above, the residuals plot magnifies possible curvature. The reason is that the range of residuals is smaller than the range of the heights. In multiple regression, we will use the (\\(\\hat{y_i}, e_i\\)) plot, which is identical to the plot above in simple linear regression, but very helpful in multiple regression. You get the (\\(\\hat{y_i}, e_i\\)) plot in R with plot(mod, which = 1). 3.2.6.2 Constant variance This assumption means that the variance of the residuals is constant. If it is violated, the spread around a hypothetical regression line is not constant. We look at the residual scatter plot again: Look for a changes in patterns of vertical variability. Note, that you often do not have as many data points near the end of the range of the predictor. Here are some examples of heteroskedasticity: 1, 2, 3. The above looks homoscedastic. If it was heteroskedastic, this is not a problem, we just have to model it differently (later). As always, it is a good idea to study the variability of these plots using simulation (exercise 7). Better for detecting heteroscedasticity is the (\\(\\hat{y_i}, |e_i|\\)) plot with a smoothing line: ## &#39;data.frame&#39;: 544 obs. of 4 variables: ## $ height: num 152 140 137 157 145 ... ## $ weight: num 47.8 36.5 31.9 53 41.3 ... ## $ age : num 63 63 65 41 51 35 32 27 19 54 ... ## $ male : int 1 0 0 1 0 1 0 1 0 1 ... ## `geom_smooth()` using formula = &#39;y ~ x&#39; This will probably not be a perfectly horizontal line, since there are less points at the end of the range of the predictor. For instance, There are less people with extreme weights in the data set. 3.2.6.3 Independence, uncorrelated errors We had an example above, where the errors were correlated. The sine curve could stem from time series data, where the \\(x\\)-variable is the time and the \\(y\\)-variable is a seasonally changing variable like temperature (purely hypothetical). In exercise 6, the values are autocorrelated: Correlated with previous values of the same variable. If we would track the body heights of persons over time, we would have an autocorrelated time series since the height of a person at time \\(t\\) is correlated with the height of the same person at time \\(t-1\\), but a little less with the height at time \\(t-2\\) and so on. If I am tall today, it is very likely that I was tall yesterday. In our case of the !Kung San data, we do not have autocorrelated data. Just because the first person we drew is tall, does not mean that the second person we draw is tall. We could draw a very young person for instance. But still, we could look at the correlations the residuals with lagged residuals. A \\(lag=1\\) means I compare the residuals with the ones right next to me and check if they are correlated. ## cor= 0.01858044 At least with a lag of \\(1\\), there so no large correlation between the residuals. 3.2.6.4 Normality This assumptions states that the conditional distribution \\(Y|X=x\\) is a normal distribution. We do not look at the normality of \\(Y\\) itself, since it is not a formal requirement, that \\(Y\\) is normally distributed. It might well occur that the conditional distributions are all normal, but the variance is not constant. Then we would have heteroskedasticity, but the assumption of normality would be fullfilled. We need to assess the normality of the residuals \\(e_i = y_i - \\hat{y}_i\\) I like doing this with a Q-Q plot from the R package car (command qqPlot): ## Loading required package: carData ## ## Attaching package: &#39;car&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## recode ## The following object is masked from &#39;package:purrr&#39;: ## ## some ## The following object is masked from &#39;package:rethinking&#39;: ## ## logit ## 479 94 ## 317 72 With the 97% confidence envelope, we can see if the residuals are consistent with coming from a normal distribution. We could again use simulation to see how the Q-Q Plot changes to get a better feeling (see exercise 9). Another convenient way to check model assumptions (for a wide class of models) is to use the check_model function from the performance package: In this case, everything looks fine. Let`s go through the plots and explain them one by one: 3.2.6.4.1 Posterior predictive check (upper left) Here, you create new data from the estimated model. We did that already in the Bayesian framework using sim from the rethinking package. You could also try the command extract.samples()from the rethinking package (Statistical Rethinking p. 196) to create new data from the Frequentist model. You can try this in our exercises sessions. Using least squares, the estimated model was: \\[height_i = 113.87939 + 0.90503 \\cdot weight_i + Normal(0, 5.086)\\] From this model, we can simulate new data (or the original weights, if we want to use fixed \\(X\\)) by plugging in different weights, and adding a random error from a normal distribution with mean 0 and standard deviation 5.086. Then, we can compare the distribution of the simulated data with the observed data. The blue lines in the graph (output from check_model) are density estimations of model predicted heights, the green line is the density estimate of the observed heights. Let`s try to replicate this plot. First, we want to simulate new data from the model. A scatter plot is another nice way to check if model predictions are in line with the observed data. One could repeat this process multiple times to get a feeling for the variability of the model predictions. ## `geom_smooth()` using formula = &#39;y ~ x&#39; The simulated and original data (green) fit nicely together. This lends some credibility to the model - at least in terms of prediction. And now the density plots of the model created data (blue) and the observed data (green): As you can see, the densities of the observed and simulated data are broadly similar. One could argue that heights in the range of 150-160 cm are a bit overestimated by the model. Depending on the context, this might be a problem or not. Let`s accept the model for now. 3.2.6.4.2 Linear fit (upper right) This is the same plot as above: \\((\\hat{y}_i, e_i)\\). 3.2.6.4.3 Homogeneity of variance (middle left) This is the same plot as above: \\((\\hat{y}_i, |e_i|)\\). 3.2.6.4.4 Influential observations (middle right) The standard method to check for influential observations is to compute the so-called Cook’s distance. This is a measure of how much leverage a single observation has on the model. We can extract the Cook’s distance from the model using cooks.distance(). An ugly rule of thumb would be to look at observations with a Cook’s distance greater than 1. In the plot, the leverage \\(h_{ii}\\) is on the x-axis, and the standardized residuals are on the y-axis. In short, a high leverage means that the estimated value \\(\\hat{y}_i\\) is potentially far away from the original value \\(y_i\\). The contours (dotted green lines) are the Cook’s distance, in this case at a Cook’s distance of 0.5. There is a formula that relates the leverage (\\(h_{ii}\\)), the Cook’s distance and the residuals. Holding Cook`s distant constant at 0.5, gives you the green dotted line in the plot. Let`s create a nasty outlier and see what happens: ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## Cook&#39;s distance = 7.025207 One single outlier changes the diagnostic plots. Observation 352 is clearly identified as influential. The one point changes all diagnostic plots notably. The estimates of the regression coefficients are also affected: ## [1] &quot;Original Model&quot; ## (Intercept) weight ## 113.8793936 0.9050291 ## [1] &quot;Model with outlier&quot; ## (Intercept) weight ## 127.172494 0.599054 Admitted, this is a somewhat artificial example. 3.2.6.4.5 Normality of residuals (lower left) This is basically the same plot as above, just detrended. Let’s try to replicate it: ## ## Attaching package: &#39;qqplotr&#39; ## The following objects are masked from &#39;package:ggplot2&#39;: ## ## stat_qq_line, StatQqLine The normality assumption seems to hold. Note that in the above QQ plot, we detrended the residuals and used a bootrap confidence band. Depending on the band type, the confidence band can be wider or narrower and include or exclude points. After having checked the assumptions for the classical regression model and we feel comfortable with the model, we get exact confidence intervals for the effect sizes (\\(\\beta\\)s) using confint() (p. 74 in Westfall). Heureka! We have a model that fits the data well. 3.2.7 Bootstrap fit In order to get a feeling for the variability of the model with regards to the predictors as well, we can bootstrap the whole data set, fit the model and draw regression lines. We create \\(100\\) bootrap replicates of our data set d2 by drawing with repetition. For every bootstrap replicate, we fit the model and draw the regression line. The result is very stable. Neither intercept nor slope change much. 3.2.8 Regression towards the mean There are great explanations for “regression towards the mean” in Gelman p.58 and Westfall p.36. This video might be interesting to watch. It describes the phenomenon that the predicted value (y) is closer to its mean than the predictor (x) to its mean. In our case this means, if the weight of a person is 1 standard deviation above the mean of body weights, the (model-)predicted height is less than 1 standard deviation above the mean of body heights, but still larger than the average height. Let’s verify: ## predicted height= 0.7547479 ## `geom_smooth()` using formula = &#39;y ~ x&#39; As Gelman points out in his book (Figure 4.2), there is a fine detail: The regression line is not the line most people would draw through the data. They would draw a line through the main directions of variability (directions are the eigenvectors of the covariance matrix). In dotted green, you can see these directions. The regression line is a solution to another problem (as we have seen): It minimizes the sum of squared residuals, which are defined via the vertical distances to the line. See exercise 8. 3.2.9 Random X vs. fixed X A detail that is not mentioned often in introductory statistics courses is the question of whether the predictor variable \\(X\\) is random or fixed. In our case, we did not specify the weights of the people in the !Kung San data set. Obervational data was collected and we have no control over the weights. In an experimental setting, we could have controlled the weights of the people. We could have for instance only included people with weights at certain steps (50 kg, 60 kg, 70 kg). In the latter case, we could consider X as fixed. In the former case, we consider X as random. If we would draw another sample from the population, we would get different weights again. Further reading: Westfall 1.5. There are many more details we could look into, but we wanted to give a first practical introduction to regression analysis with less emphasis on theory and proofs behind it. We want to make clear what the confidence intervals from confint of a model mean. For this see exercise 14. 3.3 Exercises [E] Easy, [M] Medium, [H] Hard (Some) solutions to exercises can be found in the git-repo here. 3.3.1 [E] Exercise 1 In the model from above: \\[\\begin{eqnarray*} h_i &amp;\\sim&amp; \\text{Normal}(\\mu_i, \\sigma)\\\\ \\mu_i &amp;\\sim&amp; \\alpha + \\beta (x_i - \\bar{x})\\\\ \\alpha &amp;\\sim&amp; \\text{Normal}(171.1, 20)\\\\ \\beta &amp;\\sim&amp; \\text{Normal}(0, 10)\\\\ \\sigma &amp;\\sim&amp; \\text{Uniform}(0, 50) \\end{eqnarray*}\\] What ist the expected height when \\(x_i = \\bar{x}\\)? What is the expected height when \\(x_i\\) changes by 1 unit? 3.3.2 [E] Exercise 2 Look at the marginal distrubutions of the parameters in the Bayesian model. Plot the posterior distribution of all 3 parameters. Include in the plot a 99% credible interval (HDI). 3.3.3 [H] Exercise 3 Go to the coefficient estimates in the simple linear regression setting above (Fit the model) in the classical framework. Simulate data from the simple linear regression model using the estimated coefficients (\\(\\hat{\\beta_0} = 113.87939\\), \\(\\hat{\\beta_1} = 0.90574\\), \\(\\hat{\\sigma} = 5.086\\)). Use the formulae from above to calculate \\(\\beta_0\\) and \\(\\beta_1\\) by “hand”. Change your true parameters (\\(\\beta_0, \\beta_1, \\sigma\\)) and see how the estimates for the standard deviation of simulated heights, weights and the correlation between simulated heights and weights change. Create a scatterplot to see the data as well. 3.3.4 [H] Exercise 4 Verify the statement above in the text for high and low values of \\(R^2\\). 3.3.5 [H] Exercise 5 Verify with simulation in R that the separation of the distributions in the simple linear regression model improves if the true (but usually unknown) slope increases. The code for the plots can be found here. Hint: Use GPT for coding. 3.3.6 [H] Exercise 6 Go to the model assumptions in the classical regression model (Model Assumptions). Use the code from github to recreate the regression model with the sine-curve. Use the autocorrelation function acf to check for autocorrelation in the residuals. 3.3.7 [M] Exercise 7 Simulate data from the regression of heights on weights in our !Kung San data set. Draw the \\(\\hat{y_i}, e_i\\) plot. Draw the \\(\\hat{y_i}, |e_i|\\) plot. Repeat the simulation and look at the variability of the plot. 3.3.8 [E] Exercise 8 Go to p.36 in Westfall’s book and read Appendix A. Pay close attention to the explanation about regression toward the mean. 3.3.9 [M] Exercise 9 Go to the residuals above where we tested the normality assumption. Calcuate mean and standard deviation from the residuals of the model that regresses height on weight. Simulate from a normal distribution using these parameters. Get a feeling how the QQ plot changes by drawing the QQ plot repeatedly. 3.3.10 [M] Exercise 10 Using our !Kung San data, show that the regression of height on weight (lm(height ~ weight)) is not the same as the regression of weight on height (lm(weight ~ height)). Draw both regression lines in one diagram. Can you simulate data where the two regressions deliver (almost) identical results? Explain why the results differ and what consequences this would have for a research question. Which question do I answer with each? 3.3.11 [E] Exercise 11 Go back to the section about \\(R^2\\) and the separation of the distributions. How would the probability that a person in the 90% quantile of the weight is taller than a person in the 10% quantile of the weight change if you change the true slope of the regression line the true \\(\\sigma\\), i.e. if you add more noise and have a lower \\(R^2\\)? 3.3.12 [M] Exercise 12 Go back to the Bayesian simple regression model for height above. Standardize weights and heights in the data set d2. Estimate the regression model as we did in the section using quap. Plot the posterior distribution using plot(model). Interpret the regression coefficient \\(\\beta\\). 3.3.13 [M] Exercise 13 Go back to the ANOVA section. Calculate SSE, SST and SSR for the regression of height on weight. How many degrees of freedom does each term have? 3.3.14 [M] Exercise 14 When we fit a simple linear regression model (Frequentist), we get confidence intervals for the coefficients using the command confint. As stated previously, these are Frequentist CIs. That means, if we draw data from the true (but usually unknown) data generating process, we would expect that the true value of the coefficient (intercept and slope) lies in the CI in X% of the cases. Simulate data from the true data generating process of the simple linear regression model. Fit the model and get the confidence intervals for the coefficients. Repeat this process 1000 times and see how many times the true value of the coefficients lies in the CI. Changing the distribution of the covariate \\(x\\) should not change the results, since we only get a different amount of data points agross the range of \\(x\\). Verify this statement by changing the distribution of \\(x\\). 3.4 eLearning 1 eLearning Assignments: Review all content from the script, up to and including section 3.1. Reading assignment on frequentist statistics (exam-relevant!): Chapter 1 (Introduction to Regression Models) from the book Understanding Regression Analysis - A Conditional Distribution Approach. Research task: Find at least two scientific articles in your field that apply regression (either simple regression with one predictor or multiple regression). We have already searched for journals relevant to your field in QM1. If you send me one of these studies in advance, we could also discuss the applied methods in more detail during the practice sessions. 3.5 Sample exam questions for this chapter (in German since exam is in German) 3.5.1 Question 1 Wir betrachten das Modell für die Einfachregression von Körpergrößen (\\(h_i\\)) auf Körpergewicht (\\(x_i\\)): \\[\\begin{eqnarray*} h_i &amp;\\sim&amp; \\text{Normal}(\\mu_i, \\sigma)\\\\ \\mu_i &amp;\\sim&amp; \\alpha + \\beta (x_i - \\bar{x})\\\\ \\alpha &amp;\\sim&amp; \\text{Normal}(171.1, 20)\\\\ \\beta &amp;\\sim&amp; \\text{Normal}(0, 10)\\\\ \\sigma &amp;\\sim&amp; \\text{Uniform}(0, 50) \\end{eqnarray*}\\] Welche der folgenden Aussage(n) ist/sind richtig? Der Intercept \\(\\alpha\\) ist die Körpergröße einer Person mit einem Gewicht von 0 kg. Erhöht sich das Gewicht um 1 kg, so erhöht/verringert sich die Körpergröße um (durchschnittlich) \\(\\beta\\) cm. Das Modell nimmt heteroskedastische Residuen an. Die A-Priori-Verteilung für \\(\\beta\\) drückt unsere Überzeugung aus, dass \\(\\beta\\) zwischen \\(0\\) und \\(10\\) liegt. 3.5.2 Question 2 Wir erinnern uns an die conditional distribution Definition der Regression (Frequentistische Sicht): \\[Y|X = x \\sim p(y|x)\\] Welche der folgenden Aussage(n) ist/sind richtig? \\(p\\) in obiger Formel entspricht dem \\(p\\)-Wert der Frequentistischen Statistik (wie groß die bedingte Wahrscheinlichkeit für \\(y|x\\) oder noch extremere Werte ist). Der realisierte Wert \\(x\\) hat eine Wahrscheinlichkeitsverteilung \\(p(y|x)\\). \\(p\\) steht immer für eine Normalverteilung. Im Falle der linearen Einfachregression sind folgende Aussagen äquivalent: \\(Y|X = x \\sim p(y|x)\\) \\(Y \\sim p(y)\\) 3.5.3 Question 3 Welche Voraussetzung(en) gilt/gelten im klassichen linearen Regressionsmodell? Die erklärenden Variablen (Prädiktoren) müssen normalverteilt sein. Die Fehler \\(\\varepsilon_i\\) sind unabhängig. Die abhängige Variable \\(y_i\\) muss normalverteilt sein. Zwischen allen Prädiktoren muss ein linearer Zusammenhang bestehen. "],["multiple-linear-regression.html", "Chapter 4 Multiple Linear Regression 4.1 Linear Regression with 2 predictors in the Bayesian Framework 4.2 Linear regression with 2 predictors in the Frequentist Framework 4.3 What happens when you just throw variables into multiple regression? 4.4 More than 2 predictors 4.5 Exercises 4.6 eLearning 2 4.7 Sample exam questions for this chapter (in German since exam is in German)", " Chapter 4 Multiple Linear Regression So far, we have dealt with the simple mean model and the model with one predictor in the Bayesian and Frequentist framework. We will now add another predictor and subsequently an interaction term to the model. Finally, we will add more than two predictors to the model. If you feel confused at any point: As Richard McElreath repeatedly says: This is normal, it means you are paying attention. I also refer to the great Richard Feynman. 4.1 Linear Regression with 2 predictors in the Bayesian Framework 4.1.1 Meaning of “linear” What is a linear model? The term “linear” refers to the relationship of the predictors with the dependent variable (or outcome). The following model is also linear: \\[height_i = \\beta_0 + \\beta_1 x_i + \\beta_2 x_i^2\\] The model is linear in the parameters \\(\\beta_0, \\beta_1, \\beta_2\\) but not in the predictors \\(x_i\\). The term \\(x_i^2\\) is ok, since the heights are just sums of multiples of the predictors (which can be nonlinear). This model is not a linear model anymore: \\[height_i = \\beta_0 + \\beta_1 x_i + e^{\\beta_2 x_i^2}\\] \\(\\beta_2\\) is now is the exponent of \\(e\\). It would also not be linear, if the coefficients are in a square root or in the denominator of a fraction, or in a sine or in a logarithm. You get the idea. Here is an easy way to check if the model is linear: If I change the predictor-value (i.e.,the value of \\(x_i\\), \\(x_i^2\\) or whatever your predictor is) by one unit, the change in the (expected value of the) dependent variable is the coefficient in front of the predictor (\\(\\beta_i\\)). 4.1.2 Adding a transformed predictor to the model Around 4.5. in the book Statistical Rethinking there is are lineare regression using a quadratic term for weight. It is a principle, called the “variable inclusion principle”, that we always include the lower order terms when fitting a model with higher order terms. See Westfall, p. 213. If we do not include the lower order terms, the coefficient does not measure what we want it to meausure (curvature in our case). For instance, if we want to model a quadratic relationship (parabola) between weight and height, we also have to include the linear term for weight (\\(x_i\\)). Since we do not assume the relationship between weight and height to be linear but quadratic (which is a polynomial of degree 2), we call this a polynomial regression. This video could be instructive. One has to be careful with fitting polynomials to data points since the regression coefficients can become quite large. Using a polynomial of high degree implies to have a lot of parameters to estimate. Increasing the degree of the polynomial increases \\(R^2\\) but also the risk of overfitting. (see Statistical Rethinking p. 200). So this is - of course - not the final solution to regression problems. This time, lets look at the whole age range of data from the !Kung San people including people with age \\(\\le 18\\) years. library(rethinking) library(tidyverse) data(Howell1) d &lt;- Howell1 d %&gt;% ggplot(aes(x = weight, y = height)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = FALSE, color = &quot;blue&quot;) + geom_smooth(method = &quot;loess&quot;, se = FALSE, color = &quot;red&quot;) ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## `geom_smooth()` using formula = &#39;y ~ x&#39; It would not be a good idea to fit a linear trend through this data, because we would not caupture the relationship adequately. The red line is a loess smothing line which is often used to capture non-linear relationships. The blue line is the usual line from classic linear regression (from the previous chapter). Which one describes the data more accurately? In this case it is obvious, a non-linear relationship is present and it might be a good idea to model it. Modeling the relationship with a linear trend leads to bad residuals with structure. We will demonstrate this in the Frequentist setting. Unfortunately, in more complex settings, with more predictors, it is not always so easy to see. This time, we use the mean for the prior from the book (\\(178 cm\\)). The model equations are (see exercise 2): \\[\\begin{eqnarray*} h_i &amp;\\sim&amp; \\text{Normal}(\\mu_i, \\sigma) \\\\ \\mu_i &amp;=&amp; \\alpha + \\beta_1 x_i + \\beta_2 x_i^2 \\\\ \\alpha &amp;\\sim&amp; \\text{Normal}(178, 20) \\\\ \\beta_1 &amp;\\sim&amp; \\text{Log-Normal}(0, 1) \\\\ \\beta_2 &amp;\\sim&amp; \\text{Normal}(0, 1) \\\\ \\sigma &amp;\\sim&amp; \\text{Uniform}(0, 50) \\end{eqnarray*}\\] The prior for \\(\\beta_1\\) is log-normal, because we can reasonably assume the the overall linear trend is positive. The prior for \\(\\beta_2\\) is normal, because we are not so sure about the sign yet. If we thought back to our school days to the topic of “curve discussion” or parabolas, we could probably also assume that \\(\\beta_2\\) is negative. But, data will show. How can we interpret the model equations? The model assumes that the expected height \\(\\mu_i\\) of a person \\(i\\) depends non-linearly (quadratically) on the (standardized) weight \\(x_i\\) of the person. We are in the business of mean-modeling. The prior for \\(\\sigma\\) is uniform as before. The prior for \\(\\alpha\\) is normal with mean \\(178\\) and standard deviation \\(20\\) because this is what we can expect from body heights in our experience. Let’s fit the model: We standardize the weight again and add the squared weights to the data set. Standardizing the predictors is a good idea, especially in polynomial regression since squares and cubes of large numbers can get huge and cause numerical problems. Let’s fit the model with the quadratic term for weight: # Standardize weight d$weight_s &lt;- (d$weight - mean(d$weight)) / sd(d$weight) # Square of standardized weight d$weight_s2 &lt;- d$weight_s^2 m4.1 &lt;- quap( alist( height ~ dnorm(mu, sigma), mu &lt;- a + b1*weight_s + b2*weight_s^2, a ~ dnorm(178, 20), b1 ~ dnorm(0, 10), b2 ~ dnorm(0, 10), sigma ~ dunif(0, 50) ), data = d) precis(m4.1) ## mean sd 5.5% 94.5% ## a 146.672739 0.3736465 146.075580 147.269898 ## b1 21.397637 0.2898827 20.934348 21.860925 ## b2 -8.419933 0.2813308 -8.869554 -7.970312 ## sigma 5.750550 0.1743749 5.471865 6.029235 plot(precis(m4.1, pars = c(&quot;b1&quot;, &quot;b2&quot;, &quot;sigma&quot;))) \\(\\beta_2\\) is indeed negative. In the estimate-plot above I have left out the intercept \\(\\alpha\\) to make the other coefficients more visible. As you can see, the credible intervals are very tight. Using prior knowledge and data, the model is very sure about the coefficients. We get our joint distribution of the four model parameters. Let’s look at the fit using the mean estimates of the posterior distribution: # Summarize the model parameters model_summary &lt;- precis(m4.1) params &lt;- as.data.frame(model_summary) # Extract parameter values a &lt;- params[&quot;a&quot;, &quot;mean&quot;] # Intercept b1 &lt;- params[&quot;b1&quot;, &quot;mean&quot;] # Coefficient for standardized weight b2 &lt;- params[&quot;b2&quot;, &quot;mean&quot;] # Coefficient for squared standardized weight # Generate a sequence of standardized weights for the fitted curve weight_seq &lt;- seq(min(d$weight_s), max(d$weight_s), length.out = 200) # Calculate the fitted values using the quadratic equation height_fitted &lt;- a + b1 * weight_seq + b2 * weight_seq^2 # Plot the scatterplot plot(d$weight_s, d$height, pch = 16, col = &quot;blue&quot;, xlab = &quot;Standardized Weight&quot;, ylab = &quot;Height (cm)&quot;, main = &quot;Scatterplot with Fitted Curve (Standardized Weight)&quot;) # Add the fitted curve lines(weight_seq, height_fitted, col = &quot;red&quot;, lwd = 2) # Add a legend legend(&quot;topright&quot;, legend = c(&quot;Observed data&quot;, &quot;Fitted curve&quot;), col = c(&quot;blue&quot;, &quot;red&quot;), pch = c(16, NA), lty = c(NA, 1), lwd = 2) # ======== Simulate Heights from Posterior ======== # Prepare new data with the same number of rows as the original data new_data &lt;- data.frame(weight_s = d$weight_s, weight_s2 = d$weight_s2) # Simulate height values from the posterior (same number as original data) sim_heights &lt;- sim(m4.1, data = new_data, n = nrow(d)) # Posterior samples # Extract random samples from simulated heights height_samples &lt;- apply(sim_heights, 2, function(x) sample(x, 1)) # ======== Plot Observed vs. Simulated Heights ======== # Plot observed data plot(d$weight_s, d$height, pch = 16, col = &quot;blue&quot;, xlab = &quot;Standardized Weight&quot;, ylab = &quot;Height (cm)&quot;, main = &quot;Observed vs. Simulated Heights&quot;) # Add simulated height points points(d$weight_s, height_samples, pch = 16, col = &quot;red&quot;) # Add legend legend(&quot;topright&quot;, legend = c(&quot;Observed Data&quot;, &quot;Simulated Data&quot;), col = c(&quot;blue&quot;, &quot;red&quot;), pch = c(16, 16)) The second plot shows the original heights and simulated heights from the posterior distribution in one plot. This fits quite well. The quadratic model fits much better than the linear model without the quadratic term. In the book, there is also a polynomial regression with a cubic term for weight. Maybe this fits even better (see exercise 1). The quadratic model has a very high \\(R^2\\) value. In this case, this is a good sign. The height values “wiggle” around the fitted curve very narrowly. We do not need other variables to explain the heights. In short: If you know a person’s weight, you can predict the height very well (in this population at least). One might hypothesize that the population behaves rather similarly with respect to nutritional and life style factors. If different groups within the !Kung San people would have high calorie intake and few physical activity, the model would probably not fit so well. 4.1.3 Adding another predictor to the model Since the !Kung San data set has already such a high \\(R^2\\) (\\(=0.95\\)!) with the quadratic term (and possibly higher with the cubic term), we will use the created data set from below in the frequentist setting to estimate the coefficients of the model with two predictors here as well. We have the true but (usually) unknown data generating mechnisms (for didactic reasons). We use rather uniformative priors and fit the model using quap: library(rethinking) set.seed(123) n &lt;- 100 X1 &lt;- rnorm(n, 0, 5) X2 &lt;- rnorm(n, 0, 5) Y &lt;- 10 + 0.5 * X1 + 1 * X2 + rnorm(n, 0, 2) # true model df &lt;- data.frame(X1 = X1, X2 = X2, Y = Y) # fit model m4.2 &lt;- quap( alist( Y ~ dnorm(mu, sigma), mu &lt;- a + b1*X1 + b2*X2, a ~ dnorm(10, 10), b1 ~ dnorm(0, 10), b2 ~ dnorm(0, 10), sigma ~ dunif(0, 50) ), data = df) precis(m4.2) ## mean sd 5.5% 94.5% ## a 10.2700227 0.18934442 9.9674137 10.5726316 ## b1 0.4467278 0.04131434 0.3806995 0.5127561 ## b2 1.0095082 0.03899992 0.9471788 1.0718377 ## sigma 1.8738833 0.13250803 1.6621099 2.0856567 4.1.3.1 Checking model assumptions Andrew Gelman mentions in some of his talks (see here for more details) that many Bayesians he met do not check their models, since they reflect subjective probability. As I said in the introduction, one should not be afraid to check model predictions against the observed and probably new data. If a model for predicting BMI performs much worse on a new data set, we should adapt. We do not ask the question if a model is true or false, but if it is useful or how badly the model assumptions are violated. For further, more detailed information on model checking, refer to chapter 6 of Gelman’s book. Anyhow, we plot two posterior predictive checks here. We test the model within the same data set. In order to do this, we create new observations by drawing from the posterior distribution and compare these with the acutally observed values. This is called posterior predictive checks. First, we plot the observed \\(Y\\) values against the predicted \\(Y\\) values (\\(=\\hat{Y}\\)) from the model (as in Statistical rethinking, Chapter 5). Although these practically never lie on the line \\(y=x\\), they should be sufficiently close to it. We could also compare these two plots with the mean-model (see exercise 6). # 1) Posterior predictive checks Y vs Y_hat # see Statstical Rethinking p 138. # call link without specifying new data # so it uses the original data mu &lt;- link(m4.2) # summarize samples accross cases mu_mean &lt;- apply(mu, 2, mean) mu_PI &lt;- apply(mu, 2, PI, prob = 0.89) # simulate observations # again, no new data, so uses original data D_sim &lt;- sim(m4.2, n = 1e4) D_PI &lt;- apply(D_sim, 2, PI, prob = 0.89) plot(mu_mean ~ df$Y, col = rangi2, ylim = range(mu_PI), xlab = &quot;Observed Y&quot;, ylab = &quot;Model-Predicted Y&quot;) abline(a = 0, b = 1, lty = 2) for(i in 1:nrow(df)) lines(rep(df$Y[i], 2), mu_PI[,i], col = rangi2) As we can see, the model fits the data quite well. The points are close to the dashed line (\\(y=x\\)). No under- or overestimation is visible. The model seems to capture the relationship between the predictors \\(X_1\\) and \\(X_2\\) and the dependent variable \\(Y\\) quite well - at least in a predictive sense. If there were patches of data points above or below the dashed line, we would probably have to reconsider the model definition and think about why these points are not captured by the model. Next, we plot the posterior predictive plots analog to the upper left in the check_model output. library(scales) # For the alpha function to adjust transparency ## ## Attaching package: &#39;scales&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## discard ## The following object is masked from &#39;package:readr&#39;: ## ## col_factor # 2) Posterior predictive densities # Simulate observations using the posterior predictive distribution D_sim &lt;- sim(m4.2, n = 1e4) # Generate 10,000 simulated datasets # Calculate densities for all samples densities &lt;- apply(D_sim, 1, density) # Find the maximum density value for setting the y-axis limits max_density &lt;- max(sapply(densities, function(d) max(d$y))) # Create the density plot with predefined ylim plot(NULL, xlim = range(df$Y), ylim = c(0, max_density), xlab = &quot;Y&quot;, ylab = &quot;Density&quot;, main = &quot;Comparison of Observed and Predicted Densities&quot;) # Add 100 posterior predictive density lines set.seed(42) # For reproducibility n_lines &lt;- 100 samples &lt;- sample(1:1e4, n_lines) # Randomly sample 100 posterior predictive datasets for (s in samples) { lines(density(D_sim[s, ]), col = alpha(&quot;lightblue&quot;, 0.3), lwd = 1) } # Add the density line for the observed Y values obs_density &lt;- density(df$Y) lines(obs_density$x, obs_density$y, col = &quot;green&quot;, lwd = 2) # Add legend legend(&quot;topright&quot;, legend = c(&quot;Posterior Predictive Densities&quot;, &quot;Observed Density&quot;), col = c(&quot;lightblue&quot;, &quot;green&quot;), lty = 1, lwd = c(1, 2)) The light blue lines show distributions of model predicted \\(Y\\) values. The green line shows the distribution of the observed \\(Y\\) values. As we can see, there seem to be no systematic differences between the observed and predicted values. The model seems to capture the relationship well. If we see systematic deviations here, we need to reconsider the model definition. Example: If you want to predict pain (\\(Y\\) variable) and you have a lot of zeros (pain-free participants) you will probably see a discrepancy between the observed and predicted values in this plot. What could you do? You could use a two step process (model the probability that a person is pain-free and then model the pain intensity for the people who have pain) or use a different model (like a zero-inflated model). Note that we did not explicitely assume normally distributed errors in the model definition above, so we won’t check this here but in the Frequentist framework below. 4.2 Linear regression with 2 predictors in the Frequentist Framework To reiterate from the last chapter: In full, the classical linear regression model can be written as (see p. 21-22 in Westfall): \\[ Y_i|X_i = x_i \\sim_{independent} N(\\beta_0 + \\beta_1 x_{i1} + \\dots \\beta_k x_{ik},\\sigma^2)\\] for \\(i = 1, \\dots, n\\). The \\(Y_i\\) are independently normally distributed conditioned on the predictors having the values \\(X_i = x_i\\). Each conditional distribution has an expected value (\\(\\mu\\)) that is a linear function of the predictors and a constant variance \\(\\sigma^2\\). If the assumptions of the classical linear regression model are met, the least squares estimators (OLS) are the best (smallest variance) linear unbiased (on average correct) estimators - so-called: BLUE - of the parameters. 4.2.1 Adding a transformed predictor to the model No, let’s fit the same model as above in the Bayesian framework. The model is: \\[height_i = \\alpha + \\beta_1 weight_i + \\beta_2 weight_i^2 + \\varepsilon_i\\] whereas \\[\\varepsilon_i \\sim N(0, \\sigma)\\] And if you build the expectation on both sides for fixed \\(weight_i\\), you get: \\[\\mathbb{E}(height_i|weight_i) = \\alpha + \\beta_1 weight_i + \\beta_2 weight_i^2\\] The last line means, the expected height of a person given a certain weight depends quadratically on the weight. The error term \\(\\varepsilon_i\\) is on average zero, hence it goes away here. Remember the law of large numbers: The sample mean \\(\\bar{\\varepsilon_i}\\) approaches the expected value \\(\\mathbb{E}(\\varepsilon_i)=0\\) as the sample size increases. If you drew many samples (from the true model) and average over the error terms, the average will approach zero. Think of this animated graph if you need a dynamic image of the regression model. The weights are considered fixed and therefore do not change when building the expectation. We are looking for fixed, but unknown, parameters \\(\\alpha\\), \\(\\beta_1\\), \\(\\beta_2\\) and \\(\\sigma\\). The fixed \\(\\sigma\\) indicates that the observations wiggle around the expected value equally strong not matter which weight we have. This is called homoscedasticity. Let’s fit the model using the lm function in R which uses least squares to estimate the parameters. At this point I could torture you with matrix algebra and show you the normal equations for linear regression, but I will spare you for now. Note that the least squares algorithm for fitting the curve works for all kinds of functional forms. For example, we could also fit an exponential curve using the same technique (see exercise 9). # scale weight d$weight_s &lt;- scale(d$weight) # Fit the model m4.2 &lt;- lm(height ~ weight_s + I(weight_s^2), data = d) summary(m4.2) ## ## Call: ## lm(formula = height ~ weight_s + I(weight_s^2), data = d) ## ## Residuals: ## Min 1Q Median 3Q Max ## -19.9689 -3.9794 0.2364 3.9262 19.5182 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 146.6604 0.3748 391.30 &lt;2e-16 *** ## weight_s 21.4149 0.2908 73.64 &lt;2e-16 *** ## I(weight_s^2) -8.4123 0.2822 -29.80 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 5.766 on 541 degrees of freedom ## Multiple R-squared: 0.9565, Adjusted R-squared: 0.9564 ## F-statistic: 5952 on 2 and 541 DF, p-value: &lt; 2.2e-16 mean(d$height) ## [1] 138.2636 confint(m4.2, level = 0.94) ## 3 % 97 % ## (Intercept) 145.954018 147.366836 ## weight_s 20.866788 21.962979 ## I(weight_s^2) -8.944251 -7.880337 See ?I in R. This command is used so that R knows that it should treat the “^2” as “square” and not as formula syntax. We could also create a new variable as before. Whatever you prefer. 4.2.1.1 Interpretation of output and coefficients The intercept \\(\\alpha\\) is the model-predicted height of a person of average weight (\\(weight_s=0\\) for a person of average weight). Note that this is not equal to the average height (\\(138.2636~cm\\)) of the people in the data set (see exercise 12). The residuals have range from \\(-19.97\\) to \\(19.51\\). So, the model maximally overestimates the heights by \\(19.97\\) cm and underestimates by \\(19.51\\) cm. These numbers are plausible when you look at the scatterplot with the fitted curve. The coefficients \\(\\beta_1\\) and \\(\\beta_2\\) agree with the Bayes estimates. Specifically, \\(\\beta_2\\) is non-zero indicating curvature. You cannot directly interpret the coefficients as in the non-quadratic case since, for instance, you cannot change \\(weight^2\\) by one unit and hold \\(weight\\) constant at the same time. Refer to Peter Westfall’s book section 9.1. for all the details. If you like \\(p\\)-values: All the hypotheses that the coefficients are zero are rejected. The \\(p\\)-values are very small. The values of the test statistics can not be explained by chance alone. On the other hand, for at least \\(\\beta_1\\) and and the global test this is not a surprise when you look at the scatterplot. After having fit many models, you would have guessed that all three parameters are solidly non-zero. The intercept is not zero since a person of average weight probably has non-zero height. \\(\\beta_1\\) is non-zero since you can easily imagine a linear trend line with positive slope going through the data, and \\(\\beta_2\\) is non-zero since there is clearly (non-trivial) curvature in the scatterplot. The \\(R^2\\) is a whopping \\(0.96\\) which could be a sign of overfitting, but in this case we conclude that the true relationship is caputured rather well. Overfitting would occur if our curve would rather fit the noise in the data than the underying trend. 4.2.1.2 Checking model assumptions library(performance) check_model(m4.2) ## Some of the variables were in matrix-format - probably you used ## `scale()` on your data? ## If so, and you get an error, please try `datawizard::standardize()` to ## standardize your data. ## Some of the variables were in matrix-format - probably you used ## `scale()` on your data? ## If so, and you get an error, please try `datawizard::standardize()` to ## standardize your data. If we want to be perfectionists, we could remark that (upper right plot) in the lower fitted values the residuals are more negative, meaning that the model overestimates the heights in this region. In the middle region the model underestimates a bit and we can see a positive tendency in the residuals. Apart from that, the diagnostic plots look excellent. 4.2.2 Adding another predictor to the model Now, we add another predictor to the model. We use \\(X_1\\) and \\(X_2\\) simultaneously to predict \\(Y\\). We are now in the lucky situation that we can still visualize the situation in 3D. The regression line from simple linear regression becomes a plane. The vertical distances between the data points and the plane are the residuals. See here or here at the end for examples. Minimizing the sum of the squared errors gives again the estimates for the coefficients. For demonstration purposes, we can create data ourselves with known coefficients. This is the same as above. This is the true model, which we usually do not know: \\[ Y_i = \\beta_0 + \\beta_1 X_{1i} + \\beta_2 X_{2i} + \\varepsilon_i\\] \\[ \\varepsilon_i \\sim N(0, \\sigma^2)\\] \\[ \\mathbb{E}(Y_i|X_1 = x_1; X_2 = x_2) = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2\\] \\[ i = 1 \\ldots n\\] for example: \\[ Y_i = 10 + 0.5 \\cdot X_{1i} + 1 \\cdot X_{2i} + \\varepsilon_i\\] \\[ \\varepsilon_i \\sim N(0, 5)\\] \\[ \\mathbb{E}(Y_i|X_1 = x_1; X_2 = x_2) = 10 + 0.5 x_1 + 1 x_2\\] \\[ i = 1 \\ldots n\\] According to the model, the conditional expected value of \\(Y_i\\) given \\(X_1 = x_1\\) and \\(X_2 = x_2\\) is a linear function of \\(x_1\\) and \\(x_2\\). Note, that small letters are realized values of random variables. Also note, that in the expectation the error term goes away, since \\(\\mathbb{E}(\\varepsilon_i) = 0\\). If \\(X_1\\) increases by one unit, \\(Y\\) increases by \\(0.5\\) units on average (in expectation). If \\(X_2\\) increases by one unit, \\(Y\\) increases by \\(1\\) unit on average (in expectation). If \\(X_1\\) and \\(X_2\\) are zero, \\(Y\\) is \\(10\\) on average (in expectation). Why in expectation? Because there is still the error term which makes the whole thing random! We can see that an increase in \\(X_1\\) does not influence the relationship between \\(X_2\\) and \\(Y\\). Hence, there is no interaction between \\(X_1\\) and \\(X_2\\) with respect to \\(Y\\). Now lets’s draw 100 points from this model, fit the model and add the plane: library(plotly) set.seed(123) n &lt;- 100 X1 &lt;- rnorm(n, 0, 5) X2 &lt;- rnorm(n, 0, 5) Y &lt;- 10 + 0.5 * X1 + 1 * X2 + rnorm(n, 0, 2) d &lt;- data.frame(X1 = X1, X2 = X2, Y = Y) # Fit the model m4.3 &lt;- lm(Y ~ X1 + X2, data = d) summary(m4.3) ## ## Call: ## lm(formula = Y ~ X1 + X2, data = d) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.7460 -1.3215 -0.2489 1.2427 4.1597 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 10.27013 0.19228 53.41 &lt;2e-16 *** ## X1 0.44673 0.04195 10.65 &lt;2e-16 *** ## X2 1.00952 0.03960 25.49 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.903 on 97 degrees of freedom ## Multiple R-squared: 0.8839, Adjusted R-squared: 0.8815 ## F-statistic: 369.1 on 2 and 97 DF, p-value: &lt; 2.2e-16 # Create a grid for the plane X1_grid &lt;- seq(min(d$X1), max(d$X1), length.out = 20) X2_grid &lt;- seq(min(d$X2), max(d$X2), length.out = 20) grid &lt;- expand.grid(X1 = X1_grid, X2 = X2_grid) # Predict the values for the grid grid$Y &lt;- predict(m4.3, newdata = grid) # Convert the grid into a matrix for the plane plane_matrix &lt;- matrix(grid$Y, nrow = length(X1_grid), ncol = length(X2_grid)) # Create the interactive 3D plot plot_ly() %&gt;% add_markers( x = d$X2, y = d$X1, z = d$Y, marker = list(color = &quot;blue&quot;, size = 5), name = &quot;Data Points&quot; ) %&gt;% add_surface( x = X1_grid, y = X2_grid, z = plane_matrix, colorscale = list(c(0, 1), c(&quot;red&quot;, &quot;pink&quot;)), showscale = FALSE, opacity = 0.7, name = &quot;Fitted Plane&quot; ) %&gt;% plotly::layout( scene = list( xaxis = list(title = &quot;X1&quot;), yaxis = list(title = &quot;X2&quot;), zaxis = list(title = &quot;Y&quot;) ), title = &quot;Interactive 3D Scatterplot with Fitted Plane&quot; ) This is, of course, a very idealized situation. There is no curvature in the plane, no interaction, no outliers, no heteroscadasticity. It’s the simplest case of multiple regression with 2 predictors. Reality is - usually - more complicated. Let’s look at the summary output and check model assumptions: summary(m4.3) ## ## Call: ## lm(formula = Y ~ X1 + X2, data = d) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.7460 -1.3215 -0.2489 1.2427 4.1597 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 10.27013 0.19228 53.41 &lt;2e-16 *** ## X1 0.44673 0.04195 10.65 &lt;2e-16 *** ## X2 1.00952 0.03960 25.49 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.903 on 97 degrees of freedom ## Multiple R-squared: 0.8839, Adjusted R-squared: 0.8815 ## F-statistic: 369.1 on 2 and 97 DF, p-value: &lt; 2.2e-16 check_model(m4.3) We could repeat this simulation to get a feeling for the variability. The posterior predictive checks look nice. In this case, we know that the model is true. 4.2.2.1 Adding variables to the model and why This is a very complex question. We will go into it in later chapters and the next course (Methodenvertiefung). At this point we can say this: We add variables to the model (and probably use other models apart from linear regression) depending on the goal at hand (prediction or explanation). Prediction (i.e. guessing the outcome as good as possible) seems to be easier than explanation. For instance, within linear models and just a handful of predictors, one can even brute force the problem by searching through all subsets of predictors. If that is not possible, one could use clever algortithms, like best subest selection. Explanation (looking for causal relationships between variables) is more difficult. What is not a good idea if you want to find causal relationships, is to throw all variables into the model and hope for the best. What is also not a good idea is to select variables depending on the \\(p\\)-values of the coefficients (Westfall Chapter 11). Leaving variables out, that are important, can lead to biased estimates of the coefficients (omitted variable bias). Importantly, also adding variables can hurt conclusions from the model (see Statistical Rethinking 6.2). 4.2.3 Interaction Term \\(X_1 \\times X_2\\) I recommend reading the excellent explanations about interactions in John Kruschke’s book Doing Bayesian Data Analysis, 15.2.2 und 15.2.3. Peter Westfall also has a nice explanation in his book in section 9.3. Our statistical model is now: \\[ Y_i = \\beta_0 + \\beta_1 X_{1i} + \\beta_2 X_{2i} + \\mathbf{\\beta_3 X_{1i} \\times X_{2i}} + \\varepsilon_i\\] \\[ \\varepsilon_i \\sim N(0, \\sigma^2)\\] \\[ \\mathbb{E}(Y_i|X_1 = x_1; X_2 = x_2) = \\beta_0 + \\beta_1 x_{1} + \\beta_2 x_{2} + \\beta_3 x_{1} \\times x_{2}\\] \\[ i = 1 \\ldots n\\] for example: \\[ Y_i = 10 + 0.5 \\cdot X_{1i} + 1 \\cdot X_{2i} + 0.89 \\cdot X_{1i} \\times X_{2i} + \\varepsilon_i\\] \\[ \\varepsilon_i \\sim N(0, 5)\\] \\[ \\mathbb{E}(Y_i|X_1 = x_1; X_2 = x_2) = 10 + 0.5 x_1 + 1 x_2 + 0.89 x_1 \\times x_2\\] \\[ i = 1 \\ldots n\\] The second equation states that the conditional expectation of \\(Y_i\\) given \\(X_1=x_1\\) and \\(X_2=x_2\\) is a function of \\(x_1\\) and \\(x_2\\) and their interaction \\(x_1 \\times x_2\\) (i.e., the product). We are in a different situation now. Set for instance \\(x_2\\) to a certain value, say \\(x_2 = 7\\). Then the relationship (in expectation) between \\(Y\\) and \\(X_1\\) is: \\[ \\mathbb{E}(Y_i|X_1 = x_1; X_2 = 7) = 10 + 0.5 x_1 + 1 \\cdot 7 + 0.89 x_1 \\cdot 7\\] \\[ \\mathbb{E}(Y_i|X_1 = x_1; X_2 = 7) = 10 + (0.5 + 0.89 \\cdot \\mathbf{7}) \\cdot x_1 + 1 \\cdot 7\\] Depending on the value of \\(x_2\\), the effect of \\(X_1\\) on \\(Y\\) changes. Hence, \\(X_2\\) modifies the relationship between \\(X_1\\) and \\(Y\\), or stated otherwise, \\(X_1\\) and \\(X_2\\) interact with respect to \\(Y\\). Remember, the word effect is used in a strictly technical/statistical sense and not in a causal sense. It does not mean that if we do change \\(X_1\\) by one unit, \\(Y\\) will also change in an experiment. We are purely describing the relationship in an associative way. We will probably touch causality later. Bayesian statistics and causal inference are gaining popularity. Hence, we should try to keep up. Let’s draw 100 points from this model, fit the model and add the plane (see also exercise 4): set.seed(123) n &lt;- 100 X1 &lt;- rnorm(n, 0, 5) X2 &lt;- rnorm(n, 0, 5) Y &lt;- 10 + 0.5 * X1 + 1 * X2 + 0.89 * X1 * X2 + rnorm(n, 0, 5) d &lt;- data.frame(X1 = X1, X2 = X2, Y = Y) # Fit the model m4.4 &lt;- lm(Y ~ X1 * X2, data = d) summary(m4.4) ## ## Call: ## lm(formula = Y ~ X1 * X2, data = d) ## ## Residuals: ## Min 1Q Median 3Q Max ## -9.360 -3.389 -0.543 2.949 11.583 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 10.70491 0.47888 22.354 &lt; 2e-16 *** ## X1 0.40719 0.10834 3.759 0.000293 *** ## X2 1.03434 0.09881 10.468 &lt; 2e-16 *** ## X1:X2 0.92182 0.02290 40.257 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 4.734 on 96 degrees of freedom ## Multiple R-squared: 0.9476, Adjusted R-squared: 0.9459 ## F-statistic: 578.1 on 3 and 96 DF, p-value: &lt; 2.2e-16 # Create a grid for the plane X1_grid &lt;- seq(min(d$X1), max(d$X1), length.out = 20) X2_grid &lt;- seq(min(d$X2), max(d$X2), length.out = 20) grid &lt;- expand.grid(X1 = X1_grid, X2 = X2_grid) # Predict the values for the grid grid$Y &lt;- predict(m4.4, newdata = grid) # Convert the grid into a matrix for the plane plane_matrix &lt;- matrix(grid$Y, nrow = length(X1_grid), ncol = length(X2_grid)) # Create the interactive 3D plot plot_ly() %&gt;% add_markers( x = d$X2, y = d$X1, z = d$Y, marker = list(color = &quot;blue&quot;, size = 5), name = &quot;Data Points&quot; ) %&gt;% add_surface( x = X1_grid, y = X2_grid, z = plane_matrix, colorscale = list(c(0, 1), c(&quot;red&quot;, &quot;pink&quot;)), showscale = FALSE, opacity = 0.7, name = &quot;Fitted Plane&quot; ) %&gt;% plotly::layout( scene = list( xaxis = list(title = &quot;X1&quot;), yaxis = list(title = &quot;X2&quot;), zaxis = list(title = &quot;Y&quot;) ), title = &quot;Interactive 3D Scatterplot with Fitted Plane&quot; ) The term X1 * X2 is a shortcut for X1 + X2 + X1:X2 where X1:X2 is the interaction term. R automatically includes the main effects of the predictors when an interaction term is included (variable inclusion principle). The true but usually unknown \\(\\beta\\)s are estimated quite precisely. 4.2.3.1 Formal test for interaction We could apply a formal test for the interaction term by model comparison. The command anova(., .) would compare the two models and test if the change in the residual sum of squares is statistically interesting. m4.5 &lt;- lm(Y ~ X1 + X2, data = d) # without interaction anova(m4.5, m4.4) ## Analysis of Variance Table ## ## Model 1: Y ~ X1 + X2 ## Model 2: Y ~ X1 * X2 ## Res.Df RSS Df Sum of Sq F Pr(&gt;F) ## 1 97 38468 ## 2 96 2151 1 36316 1620.6 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 One can show that the following test statistic is \\(F\\) distributed under the null hypothesis (that \\(\\beta_3=0\\)): \\[ F = \\frac{\\left(RSS_{\\text{Model 1}} - RSS_{\\text{Model 2}}\\right) / \\left(df_{\\text{Model 1}} - df_{\\text{Model 2}}\\right)}{RSS_{\\text{Model 2}} / df_{\\text{Model 2}}}\\] where \\(RSS\\) is the residual sum of squares, \\(df\\) are the degrees of freedom of the residual sum of squares for both models. The output of the anova command shows us the residual degress of freedom (Res.Df) of both models, the residual sum of squares errors of both models (RSS), the sum of squared errors between model 1 and model 2 (Sum of Sq), the value of the F-statistic and the \\(p\\)-value for the hypothesis, that the coefficient for the interaction term is zero (\\(\\beta_3=0\\)). Model 1 RSS has 97 degrees of freedom, since we have 100 data points and 3 parameters to estimate (\\(\\beta_0, \\beta_1, \\beta_2\\)). Model 2 has 96 degrees of freedom, since we have 100 data points and 4 parameters to estimate (\\(\\beta_0, \\beta_1, \\beta_2, \\beta_3\\)). Let’s verify the value of the \\(F\\) statistic: RSS_model1 &lt;- sum(residuals(m4.5)^2) RSS_model2 &lt;- sum(residuals(m4.4)^2) df_model1 &lt;- n - length(coef(m4.5)) df_model2 &lt;- n - length(coef(m4.4)) F &lt;- ((RSS_model1 - RSS_model2) / (df_model1 - df_model2)) / (RSS_model2 / df_model2) F ## [1] 1620.606 # Sum of Sq RSS_model1 - RSS_model2 ## [1] 36316.28 In the numerator of the \\(F\\) statistic, we have the change in the residual sum of squares (from the small (model 1) model to the larger one (model 2), Sum of Sq) per additional parameter in the model (one additional parameter \\(\\beta_3\\)). In the denominator, we have the residual sum of squares per residual degree of freedom of the larger model (model 2). Hence, in the numerator we have the information on how much better we get with respect to the number of variables added, and in the denominator we have information on how good the full model is with respect to its degrees of freedom. The \\(p\\)-value is the probability of observing a value of the F statistic as extreme or more extreme than the one we observed, given that the null hypothesis is true. Here, the \\(p\\)-value is extremely small. So, statistically we would see an improvement in RSS which is not explainable by chance alone. But let’s be careful with \\(p\\)-values and especially with fixed cutoff values for \\(p\\), which we will never use in this script. Even for a rather small effect \\(\\beta_3\\), we would reject the null hypothesis, if only the sample size is large enough. Since a very small effect relative to \\(\\beta_1\\) and \\(\\beta_2\\) would probably not be of practical interest, one should be careful with looking at \\(p\\)-values alone. For instance, in Richard McElreath’s book Statistical Rethinking, there are no \\(p\\)-values at all. I like that. If you again look at the comparison of the RSS between the two models, you would immediately see that the model with the interaction term is better (at least with respect to this metric). The difference is huge. We have already mentioned in the context of \\(R^2\\) not to overinterpret such metric, because RSS is monotonically descreasing with number of variables added and reaches zero when the number of variables equals the number of data points (see exercise 3). 4.2.4 Using an interaction plot to suspect a potential interaction Chronologically before we include an interaction term in the model, we can use an interaction plot to see if there is a potential interaction between the predictors. We can just create a categorical predictor out of the continuous predictors. Just categorize the predictors into quartiles and plot the means of the dependent variable (\\(Y\\)). If the lines are parallel, there is probably no interaction. If the lines are not parallel, there might be an interaction. n &lt;- 100 X1 &lt;- rnorm(n, 0, 5) X2 &lt;- rnorm(n, 0, 5) Y &lt;- 10 + 0.5 * X1 + 1 * X2 + 0.89 * X1 * X2 + rnorm(n, 0, 5) d &lt;- data.frame(X1 = X1, X2 = X2, Y = Y) # Create categorical variables based on quartiles d$X2_cat &lt;- cut(d$X2, breaks = quantile(d$X2, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE), include.lowest = TRUE, labels = c(&quot;Q1&quot;, &quot;Q2&quot;, &quot;Q3&quot;, &quot;Q4&quot;)) d$X1_cat &lt;- cut(d$X1, breaks = quantile(d$X1, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE), include.lowest = TRUE, labels = c(&quot;Q1&quot;, &quot;Q2&quot;, &quot;Q3&quot;, &quot;Q4&quot;)) # Create the interaction plot interaction.plot(d$X2_cat, d$X1_cat, d$Y) There seems to be an interaction of the predictors with respect to \\(Y\\). The lines are not parallel. If there was no interaction, the change in \\(Y\\) with respect to \\(X_2\\) would be the same for all levels of \\(X_1\\). This seems not to be the case here. See exercise 5. If we had one or both predictors already categorical, we would not have to discretize them before. 4.2.5 Simpsons Paradox The Simpsons paradox is a phenomenon, in which a trend appears in several different groups of data but disappears or reverses when these groups are combined. I agree with the criticism that this is not really a paradox but a failure to consider confounding variables adequately. Let’s quickly invent an example. We are interested in the relationship hours of muscle training and strength (not based on evidence) in children vs. adults. Within both groups there will be an increasing relationship. The more training, the more muscle strength. But if we combine the groups, we will see a decreasing relationship. library(tidyverse) n &lt;- 100 age &lt;- c(rep(&quot;child&quot;, n/2), rep(&quot;adult&quot;, n/2)) training &lt;- c(rnorm(n/2, 0, 5) + 30, rnorm(n/2, 0, 5)+ 10) strength &lt;- c( 10 + 0.5 * training[1:(n/2)] + rnorm(n/2, 0, 2), # For children 25 + 0.5 * training[(n/2 + 1):n] + rnorm(n/2, 0, 2) # For adults ) d &lt;- data.frame(age = age, training = training, strength = strength) ggplot(d, aes(x = training, y = strength, color = age)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = FALSE) + # Group-specific regression lines geom_smooth(data = d, aes(x = training, y = strength), method = &quot;lm&quot;, se = FALSE, color = &quot;black&quot;, linetype = &quot;dashed&quot;, linewidth = 1.2) + # Overall regression line labs(title = &quot;Regression Lines for Training and Strength&quot;, x = &quot;Training&quot;, y = &quot;Strength&quot;) + theme_minimal() + theme(plot.title = element_text(hjust = 0.5)) ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## `geom_smooth()` using formula = &#39;y ~ x&#39; Group-Specific Trends: In the group of children (blue line), strength increases with training, as indicated by the positive slope of the regression line. Similarly, in the group of adults (red line), strength also increases with training. Overall Trend: When both groups are combined and the categorical variable age is neglected, the overall regression line (black, dashed) shows a negative slope, suggesting that strength decreases with training. This overall trend is opposite to the trends observed within the individual groups. Why Does This Happen? This paradox occurs because the relationship between the grouping variable (age) and the independent variable (training) creates a confounding effect. In this case: Children tend to have higher training values overall, while adults tend to have lower training values. Age is associated with both strength and training and is therefore a confounder in the relationship between training and strength. Not adjusting (=including it in the regression model as predictor) for age leads to a misleading association. 4.3 What happens when you just throw variables into multiple regression? This sub-chapter is important. I can guarantee you that not too many applied scientists using regression models know about this. A first taste of causality. Richard McElreath has 3 cool examples on github that show what happens in the context of explanation if you include variables the wrong way and explains this in a video. We will look at these below - the pipe, the fork and the collider. These are causal graphs showing the relationships between the variables. One is interested in the effect of X on Y. In this case, it is truly an effect, since we create the models in such a way that changing one variable (\\(X\\)), changes the other (\\(Y\\)) - which is indicated by an arrow in the graph. These graphs are called DAGs - directed acyclic graphs. Directed because of the arrows, acyclic because there are no cycles in the graph. One nice tool for drawing them is dagitty, which is also implemented in R. The online drawing tool is handy. Remember: Not only can it hurt to add variables to the model in an explanatory (causal) context, but also in a predictive context. The model can become unstable and the predictions can become worse. This is called overfitting. 4.3.1 Pipe In this setting \\(X\\) is associated with \\(Z\\) and \\(Z\\) is associated with \\(Y\\). \\(X\\) and \\(Y\\) are not directly associated, but through \\(Z\\) (see graph below). If we condition on \\(Z\\), the association between \\(X\\) and \\(Y\\) disappears. This means, if we know the value of \\(Z\\), \\(X\\) does not give us any additional information about \\(Y\\). This can be seen in the scatterplot: Once we are within \\(Z=0\\) (black dots) or \\(Z=1\\) (red dots), \\(X\\) does not give us any information about \\(Y\\), i.e., the point cloud is horizontal and there is no correlation. The inv_logit function is the inverse of the logit function. It assigns higher probability of \\(Z\\) being \\(1\\) if X has a higher value. Let’s plot this for understanding: x &lt;- seq(-3, 3, 0.1) plot(x, inv_logit(x), type = &quot;l&quot;, col = &quot;blue&quot;, lwd = 2, xlab = &quot;X&quot;, ylab = &quot;P(Z=1|X)&quot;) Higher \\(X\\) values lead to higher probabilities of \\(Z=1\\). As you can see, more red dots are on the right side of the scatterplot below. Now to the pipe and a mini simulation for it: # pipe library(dagitty) library(tidyverse) library(ggdag) ## ## Attaching package: &#39;ggdag&#39; ## The following object is masked from &#39;package:stats&#39;: ## ## filter dag &lt;- dagitty( &#39;dag { X -&gt; Z -&gt; Y }&#39; ) dagitty::coordinates( dag ) &lt;- list( x=c(X=0, Y=2, Z=1), y=c(X=0, Y=0, Z=0) ) ggdag(dag) + theme_dag() a &lt;- 0.7 cols &lt;- c( col.alpha(1,a) , col.alpha(2,a) ) # pipe # X -&gt; Z -&gt; Y N &lt;- 1000 X &lt;- rnorm(N) Z &lt;- rbern(N,inv_logit(X)) Y &lt;- rnorm(N,(2*Z-1)) plot( X , Y , col=cols[Z+1] , pch=16 ) abline(lm(Y[Z==1]~X[Z==1]),col=2,lwd=3) abline(lm(Y[Z==0]~X[Z==0]),col=1,lwd=3) abline(lm(Y~X),lwd=3,lty=3) cor(X[Z==1],Y[Z==1]) ## [1] 0.007540748 cor(X[Z==0],Y[Z==0]) ## [1] 0.02629344 Or in the framework of Simpsons paradox: library(rethinking) N &lt;- 1000 X &lt;- rnorm(N) Z &lt;- rbern(N,inv_logit(X)) Y &lt;- rnorm(N,(2*Z-1)) mod1 &lt;- lm(Y ~ X) # without conditioning on Z summary(mod1) ## ## Call: ## lm(formula = Y ~ X) ## ## Residuals: ## Min 1Q Median 3Q Max ## -4.7717 -0.8634 -0.0037 0.9204 3.5437 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.00123 0.04210 -0.029 0.977 ## X 0.46041 0.04296 10.718 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.331 on 998 degrees of freedom ## Multiple R-squared: 0.1032, Adjusted R-squared: 0.1023 ## F-statistic: 114.9 on 1 and 998 DF, p-value: &lt; 2.2e-16 mod2 &lt;- lm(Y ~ X + Z) # with conditioning on Z summary(mod2) ## ## Call: ## lm(formula = Y ~ X + Z) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.2979 -0.6399 0.0011 0.7047 2.8701 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.98781 0.04662 -21.190 &lt;2e-16 *** ## X 0.02121 0.03542 0.599 0.549 ## Z 1.97980 0.06941 28.523 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.9883 on 997 degrees of freedom ## Multiple R-squared: 0.5062, Adjusted R-squared: 0.5052 ## F-statistic: 511 on 2 and 997 DF, p-value: &lt; 2.2e-16 Adding \\(Z\\) to the model (i.e., conditioning on \\(Z\\)) makes the coefficient for \\(X\\) disappear. Knowing \\(Z\\) means that \\(X\\) does not give us any additional information about \\(Y\\). See exercise 7. \\(Z\\) is also called a mediator. We could easily verify that \\(Z\\) constitutes a mediator by using Baron and Kenny’s 1986 approach (see Wiki): summary(lm(Y ~ X))# Step 1 ## ## Call: ## lm(formula = Y ~ X) ## ## Residuals: ## Min 1Q Median 3Q Max ## -4.7717 -0.8634 -0.0037 0.9204 3.5437 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.00123 0.04210 -0.029 0.977 ## X 0.46041 0.04296 10.718 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.331 on 998 degrees of freedom ## Multiple R-squared: 0.1032, Adjusted R-squared: 0.1023 ## F-statistic: 114.9 on 1 and 998 DF, p-value: &lt; 2.2e-16 summary(lm(Z ~ X))# Step 2 ## ## Call: ## lm(formula = Z ~ X) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.97876 -0.40728 -0.00555 0.41502 1.09581 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.49832 0.01425 34.96 &lt;2e-16 *** ## X 0.22184 0.01454 15.25 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4507 on 998 degrees of freedom ## Multiple R-squared: 0.189, Adjusted R-squared: 0.1882 ## F-statistic: 232.6 on 1 and 998 DF, p-value: &lt; 2.2e-16 summary(lm(Y ~ X + Z))# Step 3 ## ## Call: ## lm(formula = Y ~ X + Z) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.2979 -0.6399 0.0011 0.7047 2.8701 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.98781 0.04662 -21.190 &lt;2e-16 *** ## X 0.02121 0.03542 0.599 0.549 ## Z 1.97980 0.06941 28.523 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.9883 on 997 degrees of freedom ## Multiple R-squared: 0.5062, Adjusted R-squared: 0.5052 ## F-statistic: 511 on 2 and 997 DF, p-value: &lt; 2.2e-16 Both coefficients for \\(X\\) are “significant” in steps 1 and 2. The coefficients for \\(Z\\) in step 3 is “significant” and the coefficient for \\(X\\) is smaller compared to step 1. And not to forget: the very small \\(p\\)-values are strongly related to the very large smaple size and a strict cutoff (\\(\\alpha = 0.05\\)) makes no sense. Example: Hours of studying is associated with exam performance. This observation makes sense. A mediator in this context: understanding/knowledge. One could study for hours inefficiently with low levels of concentration and achieve low exam performance or one could study for a comparatively low number of hours and achieve good results. If we know that a person has gained the understanding/knowledge, the hours of studying do not give us any additional information with respect to exam performance. So, in order to see the effect of \\(X\\) on \\(Y\\), we do not condition on \\(Z\\). 4.3.2 Fork In health science, this is the classical confounder. \\(Z\\) is associated with \\(X\\) and \\(Y\\). \\(X\\) and \\(Y\\) are actually not associated (no arrow) but an association is still shown: cor(X,Y) = 0.5097437. But if we condition on \\(Z\\), the association between \\(X\\) and \\(Y\\) disappears. The assocation is spurious in this case and adjusting for the confounder yields the correct result. # fork # X &lt;- Z -&gt; Y dag &lt;- dagitty( &#39;dag { X &lt;- Z -&gt; Y }&#39; ) dagitty::coordinates( dag ) &lt;- list( x=c(X=0, Y=2, Z=1), y=c(X=0.5, Y=0.5, Z=0) ) ggdag(dag) + theme_dag() N &lt;- 1000 Z &lt;- rbern(N) X &lt;- rnorm(N,2*Z-1) Y &lt;- rnorm(N,(2*Z-1)) plot( X , Y , col=cols[Z+1] , pch=16 ) abline(lm(Y[Z==1]~X[Z==1]),col=2,lwd=3) abline(lm(Y[Z==0]~X[Z==0]),col=1,lwd=3) abline(lm(Y~X),lwd=3,lty=3) cor(X[Z==1],Y[Z==1]) ## [1] 0.05903899 cor(X[Z==0],Y[Z==0]) ## [1] -0.03401368 cor(X,Y) ## [1] 0.5097437 In the example, we know that \\(Z\\) is associated with both \\(X\\) and \\(Y\\) (per construction). As you can see in the definitions of \\(X\\), \\(Y\\) and \\(Z\\), \\(X\\) and \\(Y\\) would not be associated weren’t it for \\(Z\\). Example: Carrying lighters is (spuriously) associated with lung cancer. Obviously, carrying a lighter does not cause lung cancer. Carrying a lighter is associated with smoking, since smokers need to light their cigarrettes and how often do non-smokers carry a lighter just for fun? Smoking is (causally) associated with lung cancer. If you just look at the association between carrying a ligher and lung cancer, you would find an association. But if you condition on smoking, the association disappears. See exercise 13. 4.3.3 Collider This is rather interesting. \\(X\\) and \\(Y\\) are independently associated with \\(Z\\). This can be seen in the toy example below, where \\(X\\) and \\(Y\\) are used for the definition of \\(Z\\). \\(Z\\) is defined as a sum score of \\(X\\) and \\(Y\\). Sum scores are very often used in health sciences (and others). The higher the sum score, the higher the probability that \\(Z=1\\). Now, if we know the value of \\(Z\\), \\(X\\) and \\(Y\\) are negatively associated (see graph). The reason for this association is that there is a compensatory effect. In order to get a high score, you can either have a high value of \\(X\\) or \\(Y\\) or both. This induces the negative correlation. # collider # X -&gt; Z &lt;- Y #dag dag &lt;- dagitty( &#39;dag { X -&gt; Z &lt;- Y }&#39; ) dagitty::coordinates( dag ) &lt;- list( x=c(X=0, Y=2, Z=1), y=c(X=0, Y=0, Z=1) ) ggdag(dag) + theme_dag() N &lt;- 1000 X &lt;- rnorm(N) Y &lt;- rnorm(N) Z &lt;- rbern(N,inv_logit(2*X+2*Y-2)) plot( X , Y , col=cols[Z+1] , pch=16 ) abline(lm(Y[Z==1]~X[Z==1]),col=2,lwd=3) abline(lm(Y[Z==0]~X[Z==0]),col=1,lwd=3) abline(lm(Y~X),lwd=3,lty=3) cor(Y[Z==1], X[Z==1]) ## [1] -0.326671 cor(Y[Z==0], X[Z==0]) ## [1] -0.1768203 summary(lm(Y ~ X)) # mod1 ## ## Call: ## lm(formula = Y ~ X) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.3892 -0.6079 -0.0269 0.6462 3.1038 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.01882 0.03055 -0.616 0.538 ## X 0.04061 0.02948 1.378 0.169 ## ## Residual standard error: 0.9662 on 998 degrees of freedom ## Multiple R-squared: 0.001898, Adjusted R-squared: 0.0008978 ## F-statistic: 1.898 on 1 and 998 DF, p-value: 0.1686 summary(lm(Y ~ X + Z)) # mod2 ## ## Call: ## lm(formula = Y ~ X + Z) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.03484 -0.55761 0.02022 0.55813 2.41336 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.33787 0.03215 -10.51 &lt; 2e-16 *** ## X -0.19963 0.02906 -6.87 1.13e-11 *** ## Z 1.21398 0.06840 17.75 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.8427 on 997 degrees of freedom ## Multiple R-squared: 0.2415, Adjusted R-squared: 0.24 ## F-statistic: 158.7 on 2 and 997 DF, p-value: &lt; 2.2e-16 If you think of Simpsons paradox again, conditioning on \\(Z\\) creates an association between \\(X\\) and \\(Y\\), which would otherwise be independent (by definition). So by learning the value of \\(Z\\), we can learn something from \\(X\\) about \\(Y\\). On the one hand, adding \\(Z\\) to the model creates an association where there is none, on the other hand, prediction of \\(Y\\) is better with \\(Z\\) in the model! In prediction, we largely do not care about the causal structure. We just want to predict \\(Y\\) as accurately as possible. The sum score example is also called Berkson’s paradox. Let’s check if this also works for three variables in a sum score in exercise 10. 4.3.4 Multicollinearity Westfall section 8.4 and McElreath section 6.1 cover this topic. Multicollinearity means that there is a strong correlation between two or more predictors. It is perfect multicollinearity when the correlation is 1. For example, if you accidentally include the same variable twice in the model, or when you include the elements of a sum score and the sum score itself as predictors in the model. R just gives you an NA if you do this in lm. 4.3.4.1 Example from McElreath 6.1 The code creates body heights and leg lengths (left and right) for 100 people. runif draws a uniform random number between 40 and 50% of height as leg length, hence on average 45%. The slope in the linear regression should therefore be around the average height divided by the average leg length: \\(\\frac{10}{0.45 \\cdot 10} \\sim 2.2\\). library(rethinking) N &lt;- 100 set.seed(909) height &lt;- rnorm(N, 10, 2) leg_prop &lt;- runif(N, 0.4, 0.5) leg_left &lt;- leg_prop * height + rnorm(N, 0, 0.02) leg_right &lt;- leg_prop * height + rnorm(N, 0, 0.02) d &lt;- data.frame(height = height, leg_left = leg_left, leg_right = leg_right) cor(d$leg_left, d$leg_right) ## [1] 0.9997458 m4.6 &lt;- quap( alist( height ~ dnorm(mu, sigma), mu &lt;- a + bl * leg_left + br * leg_right, a ~ dnorm(10, 100), bl ~ dnorm(2, 10), br ~ dnorm(2, 10), sigma ~ dexp(1) ), data = d ) precis(m4.6) ## mean sd 5.5% 94.5% ## a 0.9811938 0.28396068 0.5273698 1.4350178 ## bl 0.2138475 2.52707954 -3.8249137 4.2526087 ## br 1.7817046 2.53129314 -2.2637907 5.8271999 ## sigma 0.6171141 0.04343629 0.5476945 0.6865337 plot(precis(m4.6)) With the given regression model, one asks the question: “What is the value of knowing each leg’s length, after already knowing the other leg’s length, with respect to height?” The answer is: “Not much.”, since they are highly correlated. Both coefficients are not around the expected \\(\\beta\\) and the credible intervals are wide and include the credible value \\(0\\). post &lt;- extract.samples(m4.6) plot( bl ~ br, post, col=col.alpha(rangi2,0.1), pch = 16 ) Since the two coefficients are almost perfectly multicollinear (cor(d$leg_left, d$leg_right)=0.9997458), already knowing the left leg’s length, knowing the right leg’s length does not give us any additional information about height. Leaving out the right leg length would give the correct result (exercise 11). 4.3.4.2 Example from Westfall 8.4 In the example below, the second prector \\(X_2\\) is a perfect linear function of the first predictor \\(X_1\\). # Westfall 8.4. set.seed(12345) X1 = rnorm(100) X2 = 2*X1 -1 # Perfect collinearity Y = 1 + 2*X1 + 3*X2 + rnorm(100,0,1) summary(lm(Y~X1+X2)) ## ## Call: ## lm(formula = Y ~ X1 + X2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.20347 -0.60278 -0.01114 0.61898 2.60970 ## ## Coefficients: (1 not defined because of singularities) ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -1.97795 0.10353 -19.11 &lt;2e-16 *** ## X1 8.09454 0.09114 88.82 &lt;2e-16 *** ## X2 NA NA NA NA ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.011 on 98 degrees of freedom ## Multiple R-squared: 0.9877, Adjusted R-squared: 0.9876 ## F-statistic: 7888 on 1 and 98 DF, p-value: &lt; 2.2e-16 Let’s look at a 3D plot: library(plotly) # Generate data set.seed(42) X1 &lt;- rnorm(100) X2 &lt;- 2 * X1 - 1 # Perfect collinearity Y &lt;- 1 + 2 * X1 + 3 * X2 + rnorm(100, 0, 1) # Create the 3D scatter plot with vertical lines plot_ly() %&gt;% add_markers(x = X1, y = X2, z = Y, marker = list(color = Y, colorscale = &quot;Viridis&quot;, size = 5), name = &quot;Data Points&quot;) %&gt;% layout(title = &quot;3D Scatter Plot&quot;, scene = list(xaxis = list(title = &quot;X1&quot;), yaxis = list(title = &quot;X2&quot;), zaxis = list(title = &quot;Y&quot;))) #VIF(lm(Y ~ X1 + X2)) # error #check_model(lm(Y ~ X1 + X2)) # error There is no unique solution for a plane in this case. Infinitely many planes can be defined using the “line” in space. The problem collapses into the simple linear regression problem. One can just plug in the formula for \\(X2\\) into the model, which yields the identical result: set.seed(12345) X1 = rnorm(100) # Y = 1 + 2*X1 + 3*(2*X1 -1) + rnorm(100,0,1) = Y = -2 + 8*X1 + rnorm(100,0,1) summary(lm(Y ~ X1)) ## ## Call: ## lm(formula = Y ~ X1) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.20347 -0.60278 -0.01114 0.61898 2.60970 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -1.97795 0.10353 -19.11 &lt;2e-16 *** ## X1 8.09454 0.09114 88.82 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.011 on 98 degrees of freedom ## Multiple R-squared: 0.9877, Adjusted R-squared: 0.9876 ## F-statistic: 7888 on 1 and 98 DF, p-value: &lt; 2.2e-16 In reality, you only have one parameter (\\(X1\\) or \\(X2\\)) in the case of perfect multicollinearity. 4.4 More than 2 predictors In practice, you often want more than two predictors in the model. If you listen closely to the research question raised by yourself or your colleagues, often it won’t be clearly stated what goal you want to achieve with the regression model: prediction or explanation. If we want to be rigorous about the true relationships between variables, we need to think about the causal structure of the variables, as Richard McElreath argues. In order not to just throw in variables into our regression model and hope for the best, in order to have a fighting chance, we use the information provided in Chapter 5 in the Statistical Rethinking book. Overall strategy for modeling: Have a research question and decide how this question can be answered: Quantitatively (experiment or observational study) or qualitatively. Remember: Statistical modeling is not a catch-all approach to turn data into truth. And: We never want to play find-the-right-statistical-test-Bingo. Statistical tests should make sense and not just thrown at data. What does the current literature say about the topic? Define goal: Prediction or explanation? Prediction: Use everything and every model type you can get your hands on to “best” predict the outcome (neural nets, random forests, etc.). Explanation: How do the variables relate to each other, how do they influence each other? Temporal relationships are important. And we want interpretable models. Do exploratory data analysis (EDA) to get a feeling for the data: This includes (among others) scatterplots, histograms, boxplots, correlation matrices, etc. How are the raw correlations/associations between the variables? How are the variables distributed? Are there outliers? Are there missing values and why are the values missing? Think about the data generating process. How did the data come about? There is no shame in fitting exploratory models too. Draw a DAG (directed acyclic graph) of the hypthesized relationships between the variables, even though we will not do formal causal inference in this lecture yet (hopefully in the next). The drawn DAG has testable implications (more below). See 5.1.2 in Rethinking. Nicely enough, dagittyspits out: The adjustment sets for the regression model based on a DAG. Which variables should I include as covariates in my model, if the DAG is correct? The implied conditional dependencies coming from the DAG. These can be checked with the data. It is not a proof that we have the true relationships depicted by the DAG, but it is a good start. Decide on a statistical model (more on that later). Define priors for the parameters of the model: If we do not know much, we choose vague priors (i.e., wide range of plausible parameter values). In the best case, priors should be well argued for, especially in a low-data setting (if we do not have many observations). Prior predictive checks: Does the model produce outcomes (\\(Y\\)) that are at all plausible? If not, we might have to rethink the model and/or priors. Fit and check the model: If the models makes certain assumptions, check if these are met. For the classical regression model, see Chapter 4 in Westfall. Posterior predictive check: Check if the model produces new data that looks like the observed data. Interpret and report the results. 4.4.1 Example in NHANES data We will now try to invent a not too exotic example with NHANES data. The National Health and Nutrition Examination Survey (NHANES) is a large, ongoing study conducted by the CDC to assess the health and nutritional status of the U.S. population. It combines interviews, physical examinations, and laboratory tests to collect data on demographics, diet, chronic diseases, and physical activity. NHANES uses a complex, nationally representative sampling design, making it a valuable resource for public health research and policy development. Open data is great and NHANES provides all the data to download for free without any restrictions or even a registration. For convenience, Randall Pruim created an R package called NHANES that contains a cleaned-up version of the NHANES data from 2009-2012. We will use this and ignore the complex sampling design for now. #install.packages(&quot;NHANES&quot;) library(pacman) p_load(NHANES, tidyverse) data(NHANES) head(NHANES) ## # A tibble: 6 × 76 ## ID SurveyYr Gender Age AgeDecade AgeMonths Race1 Race3 Education ## &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; ## 1 51624 2009_10 male 34 &quot; 30-39&quot; 409 White &lt;NA&gt; High School ## 2 51624 2009_10 male 34 &quot; 30-39&quot; 409 White &lt;NA&gt; High School ## 3 51624 2009_10 male 34 &quot; 30-39&quot; 409 White &lt;NA&gt; High School ## 4 51625 2009_10 male 4 &quot; 0-9&quot; 49 Other &lt;NA&gt; &lt;NA&gt; ## 5 51630 2009_10 female 49 &quot; 40-49&quot; 596 White &lt;NA&gt; Some College ## 6 51638 2009_10 male 9 &quot; 0-9&quot; 115 White &lt;NA&gt; &lt;NA&gt; ## # ℹ 67 more variables: MaritalStatus &lt;fct&gt;, HHIncome &lt;fct&gt;, HHIncomeMid &lt;int&gt;, ## # Poverty &lt;dbl&gt;, HomeRooms &lt;int&gt;, HomeOwn &lt;fct&gt;, Work &lt;fct&gt;, Weight &lt;dbl&gt;, ## # Length &lt;dbl&gt;, HeadCirc &lt;dbl&gt;, Height &lt;dbl&gt;, BMI &lt;dbl&gt;, ## # BMICatUnder20yrs &lt;fct&gt;, BMI_WHO &lt;fct&gt;, Pulse &lt;int&gt;, BPSysAve &lt;int&gt;, ## # BPDiaAve &lt;int&gt;, BPSys1 &lt;int&gt;, BPDia1 &lt;int&gt;, BPSys2 &lt;int&gt;, BPDia2 &lt;int&gt;, ## # BPSys3 &lt;int&gt;, BPDia3 &lt;int&gt;, Testosterone &lt;dbl&gt;, DirectChol &lt;dbl&gt;, ## # TotChol &lt;dbl&gt;, UrineVol1 &lt;int&gt;, UrineFlow1 &lt;dbl&gt;, UrineVol2 &lt;int&gt;, … unique(NHANES$SurveyYr) ## [1] 2009_10 2011_12 ## Levels: 2009_10 2011_12 colnames(NHANES) ## [1] &quot;ID&quot; &quot;SurveyYr&quot; &quot;Gender&quot; &quot;Age&quot; ## [5] &quot;AgeDecade&quot; &quot;AgeMonths&quot; &quot;Race1&quot; &quot;Race3&quot; ## [9] &quot;Education&quot; &quot;MaritalStatus&quot; &quot;HHIncome&quot; &quot;HHIncomeMid&quot; ## [13] &quot;Poverty&quot; &quot;HomeRooms&quot; &quot;HomeOwn&quot; &quot;Work&quot; ## [17] &quot;Weight&quot; &quot;Length&quot; &quot;HeadCirc&quot; &quot;Height&quot; ## [21] &quot;BMI&quot; &quot;BMICatUnder20yrs&quot; &quot;BMI_WHO&quot; &quot;Pulse&quot; ## [25] &quot;BPSysAve&quot; &quot;BPDiaAve&quot; &quot;BPSys1&quot; &quot;BPDia1&quot; ## [29] &quot;BPSys2&quot; &quot;BPDia2&quot; &quot;BPSys3&quot; &quot;BPDia3&quot; ## [33] &quot;Testosterone&quot; &quot;DirectChol&quot; &quot;TotChol&quot; &quot;UrineVol1&quot; ## [37] &quot;UrineFlow1&quot; &quot;UrineVol2&quot; &quot;UrineFlow2&quot; &quot;Diabetes&quot; ## [41] &quot;DiabetesAge&quot; &quot;HealthGen&quot; &quot;DaysPhysHlthBad&quot; &quot;DaysMentHlthBad&quot; ## [45] &quot;LittleInterest&quot; &quot;Depressed&quot; &quot;nPregnancies&quot; &quot;nBabies&quot; ## [49] &quot;Age1stBaby&quot; &quot;SleepHrsNight&quot; &quot;SleepTrouble&quot; &quot;PhysActive&quot; ## [53] &quot;PhysActiveDays&quot; &quot;TVHrsDay&quot; &quot;CompHrsDay&quot; &quot;TVHrsDayChild&quot; ## [57] &quot;CompHrsDayChild&quot; &quot;Alcohol12PlusYr&quot; &quot;AlcoholDay&quot; &quot;AlcoholYear&quot; ## [61] &quot;SmokeNow&quot; &quot;Smoke100&quot; &quot;Smoke100n&quot; &quot;SmokeAge&quot; ## [65] &quot;Marijuana&quot; &quot;AgeFirstMarij&quot; &quot;RegularMarij&quot; &quot;AgeRegMarij&quot; ## [69] &quot;HardDrugs&quot; &quot;SexEver&quot; &quot;SexAge&quot; &quot;SexNumPartnLife&quot; ## [73] &quot;SexNumPartYear&quot; &quot;SameSex&quot; &quot;SexOrientation&quot; &quot;PregnantNow&quot; The variable descriptions can be found here. As an exercise, please do exploratory data analysis; see exercise 14. 4.4.1.1 Research question Does Physical activity (PhysActive) influence the average systolic blood pressure (BPSysAve) in adults (\\(\\ge 20\\) years)? We propose the following relationships among the variables (and limit ourselves to 4 covariates): df &lt;- NHANES # shorter # Define the DAG dag &lt;- dagitty(&#39;dag { PhysActive -&gt; BPSysAve Age -&gt; PhysActive Age -&gt; BPSysAve PhysActive -&gt; BMI BMI -&gt; BPSysAve Gender -&gt; PhysActive Gender -&gt; BMI Gender -&gt; BPSysAve }&#39;) # Set node coordinates for a nice layout dagitty::coordinates(dag) &lt;- list( x = c(PhysActive = 0, BPSysAve = 2, Age = 1, BMI = 1, Gender = 0.5), y = c(PhysActive = 1, BPSysAve = 1, Age = 2, BMI = 1.5, Gender = 2) ) # Plot the DAG with larger node labels and bubbles ggdag(dag) + theme_minimal() + geom_dag_point(size = 20, color = &quot;black&quot;) + # Increase node size geom_dag_text(size = 2.5, color = &quot;white&quot;) + # Increase label size ggtitle(&quot;Hypothesized Relationships&quot;) + theme(plot.title = element_text(hjust = 0.5)) This DAG illustrates the hypothesized relationships between physical activity, age, BMI, gender, and blood pressure (BPSysAve). Physical activity potentially directly influences blood pressure, as regular exercise is hypothesized to improve cardiovascular health and lower blood pressure. Age has a direct effect on blood pressure, as arterial stiffness and other age-related physiological changes contribute to higher blood pressure over time. BMI also plays a role, with higher BMI being associated with increased blood pressure due to greater vascular resistance and metabolic factors. Additionally, gender affects blood pressure, as men and women often have different baseline levels due to hormonal and physiological differences. There are also indirect pathways that contribute to these relationships. Age influences both physical activity and BMI, as older individuals tend to be less active and may experience weight gain due to metabolic changes (confounder). BMI and physical activity are also interconnected, physical activity influences BMI, further influencing blood pressure (mediation). Gender plays a role in both BMI and physical activity, as men and women tend to have different average BMI distributions and physical activity levels due to both biological and societal factors (confounder). Note, that we have a very large sample size (6,919 people). As exercise for later, we randomly select 50 to 100 participants and repeat the analysis. This would also give us the opportunity to study how well we can infer the relationships in the larger sample from the smaller one, which could be an eye-opener. Which variables should be included in the model? adjustmentSets(dag, exposure = &quot;PhysActive&quot;, outcome = &quot;BPSysAve&quot;) ## { Age, Gender } impliedConditionalIndependencies(dag) ## Age _||_ BMI | Gndr, PhyA ## Age _||_ Gndr The one adjustment set (using the command adjustmentSets) proposed by dagitty tells us that we should include age and gender as covariates in the model (in addition to PhysActive), if the DAG is correct. Note that we do not include all three covariables in the model here, just two of them. If the DAG is correct, this would imply some conditional independencies (using the command impliedConditionalIndependencies) . We should probably check them to see how this is done: First, we need to test, if age and BMI are independent, if we condition on gender and physical activity; i.e., just add them to the regression model. This is the case: # Age _||_ BMI | Gnder, PhyA summary(lm(Age ~ BMI + Gender + PhysActive, data = df %&gt;% dplyr::filter(Age &gt;= 20))) ## ## Call: ## lm(formula = Age ~ BMI + Gender + PhysActive, data = df %&gt;% dplyr::filter(Age &gt;= ## 20)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -31.53 -13.92 -0.97 12.23 36.67 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 49.31700 0.94791 52.027 &lt; 2e-16 *** ## BMI 0.04997 0.02982 1.676 0.09380 . ## Gendermale -1.18815 0.39311 -3.022 0.00252 ** ## PhysActiveYes -5.83325 0.39761 -14.671 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 16.62 on 7168 degrees of freedom ## (63 observations deleted due to missingness) ## Multiple R-squared: 0.03282, Adjusted R-squared: 0.03242 ## F-statistic: 81.09 on 3 and 7168 DF, p-value: &lt; 2.2e-16 The implication can be confirmed. Interpretation: If we know gender and physical activity (yes/no) of a person, BMI does not offer any additional information about age. Second, I would go out on a limb and say that there is no relationship between age and gender, at least not in a statistically relevant sense. 4.4.1.2 Goal The goal is to better understand (explain) the relationship between physical activity and blood pressure while considering age, BMI and gender. I would suggest that in most cases relevant for us, one wants to understand relationships rather to predict an outcome. 4.4.1.3 EDA Exercise 14 4.4.1.4 Statistical model The outcome is a continuous variable (blood pressure), the exposure is a binary variable (physical activity yes/no). Surprise, surprise, we could try a multiple linear regression model here. As a first approximation, let’s assume BPSysAve is (sufficiently) normally distributed, which can be critized. Let’s quickly visualize the distribution of BPSysAve and overlay a normal density with paramaters estimated from the data (\\(\\mu\\) sample mean of BPSysAve, \\(\\sigma\\) sample standard deviation of BPSysAve): df_age &lt;- df %&gt;% dplyr::filter(Age &gt;= 20) df_age %&gt;% ggplot(aes(x = BPSysAve)) + geom_histogram(aes(y = after_stat(density)), bins = 30, fill = &quot;lightblue&quot;, alpha = 0.6) + geom_density(color = &quot;blue&quot;, linewidth = 1) + stat_function( fun = dnorm, args = list(mean = mean(df_age$BPSysAve, na.rm = TRUE), sd = sd(df_age$BPSysAve, na.rm = TRUE)), color = &quot;red&quot;, linewidth = 1, linetype = &quot;dashed&quot; ) + # Theoretical normal curve labs( x = &quot;Systolic Blood Pressure (BPSysAve)&quot;, y = &quot;Density&quot;, title = &quot;Distribution of Systolic Blood Pressure with Normal Curve&quot; ) + theme_minimal() + theme(plot.title = element_text(hjust = 0.5)) Not quite normal, but we will assume it for now. 4.4.1.5 Priors Now, let’s write down the statistical model. We choose vague priors since we have a vast data set. The advantage of the Bayesian approach remains (that we have a fully probabilistic model). Admitted, using Bayes is much more technical, at least at first glance. We center age again, which makes the interpretation of the intercept easier. The intercept (\\(\\beta_0\\)) is the expected value of BPSysAve for a person of average age, not physically active (reference level of the factor) and female gender (reference level of the factor). The coefficient for PhysActive (\\(\\beta_1\\)) is the expected difference in BPSysAve between a physically active person and a non-physically active person, holding all other predictors constant. BPSysAve ranges from 78 to 226 mmHg. If we do not know enough, we can just take a very vague prior for now: \\(\\beta_1 \\sim \\text{Normal}(0, 50)\\). With 95% probability, the effect of physical activity on BPSysAve is between -100 and 100. \\(\\beta_2\\): The expected change in BPSysAve for a one-year increase in age (above the mean age), holding all other predictors constant. \\(\\beta_2 \\sim \\text{Normal}(0, 10)\\). This effect should be comparatively small, since we are dealing with a one-year increase in age. We could further standardize age, then the effect would be in relation to one standard deviations increase in age. \\(\\sigma\\): The standard deviation of the residuals. \\(\\sigma \\sim \\text{Uniform}(0, 50)\\). We use a vague prior. 95% of the residuals are between -100 and 100. This seems plausible enough. We use a constant standard deviation along the expectation. This could be false (systolic blood pressure could scatter much more around the mean for higher age for instance), but one can start with that. \\[\\begin{eqnarray*} BPSysAve_i &amp;\\sim&amp; \\text{Normal}(\\mu_i, \\sigma)\\\\ \\mu_i &amp;=&amp; \\beta_0 + \\beta_1 \\cdot PhysActive + \\beta_2 \\cdot Age_{centered} + \\beta_3 \\cdot Gender\\\\ \\beta_0 &amp;\\sim&amp; \\text{Normal}(140, 20)\\\\ \\beta_1 &amp;\\sim&amp; \\text{Normal}(0, 50)\\\\ \\beta_2 &amp;\\sim&amp; \\text{Normal}(0, 10)\\\\ \\beta_3 &amp;\\sim&amp; \\text{Normal}(0, 10)\\\\ \\sigma &amp;\\sim&amp; \\text{Uniform}(0, 50) \\end{eqnarray*}\\] Note that age and gender are not influenced by each other. 4.4.1.6 Prior Predictive Checks Now we simply draw from the priors and thereby generate systolic blood pressure values. Note that we implicitely assumed below that \\(PhysActive=1\\) (person is physically active); $Age_{centered}=1 (1 years above average) and \\(Gender = 1\\) (could mean female). # Prior predictive checks set.seed(123) n_sims &lt;- dim(df_age)[1] # 7235 participants beta_0_vec &lt;- rnorm(n_sims, 140, 20) beta_1_vec &lt;- rnorm(n_sims, 0, 50) beta_2_vec &lt;- rnorm(n_sims, 0, 10) beta_3_vec &lt;- rnorm(n_sims, 0, 10) sigma_vec &lt;- runif(n_sims, 0, 50) BPSysAve_sim &lt;- rnorm(n_sims, beta_0_vec + beta_1_vec + beta_2_vec + beta_3_vec, sigma_vec) This yields also negative values (please verify) for BPSysAve, which is biologically not plausible. In exercise 15 we will play around with the priors until the prior predictive check producues plausible values. Admitted, one should probably not look at the distribution of data while doing this. On the other hand, we could have just Googled the distribution of blood pressure values. This is the result: # Prior predictive checks set.seed(123) n_sims &lt;- dim(df_age)[1] # 7235 participants beta_0_vec &lt;- rnorm(n_sims, 120, 2) beta_1_vec &lt;- rnorm(n_sims, 0, 5) beta_2_vec &lt;- rnorm(n_sims, 0.5, 1) beta_3_vec &lt;- rnorm(n_sims, 0, 5) sigma_vec &lt;- runif(n_sims, 0, 20) age_vec &lt;- sample(df_age$Age-mean(df_age$Age), n_sims, replace = TRUE) phys_act &lt;- as.numeric(sample(df_age$PhysActive, n_sims, replace = TRUE))-1 gender_vec &lt;- as.numeric(sample(df_age$Gender, n_sims, replace = TRUE))-1 BPSysAve_sim &lt;- rnorm(n_sims, beta_0_vec + beta_1_vec*phys_act + beta_2_vec*age_vec + beta_3_vec*gender_vec, sigma_vec) hist(BPSysAve_sim, breaks = 50, main = &quot;Prior predictive checks for BPSysAve&quot;) df_sim_vs_obs &lt;- data.frame( BPSysAve_sim = BPSysAve_sim, BPSysAve_obs = df_age$BPSysAve ) # Combine observed and simulated values into one long-format data frame df_long &lt;- df_sim_vs_obs %&gt;% tidyr::pivot_longer(cols = everything(), names_to = &quot;Type&quot;, values_to = &quot;BPSysAve&quot;) %&gt;% mutate(Type = factor(Type, levels = c(&quot;BPSysAve_obs&quot;, &quot;BPSysAve_sim&quot;), labels = c(&quot;Observed&quot;, &quot;Simulated&quot;))) # Plot densities of both observed and simulated values ggplot(df_long, aes(x = BPSysAve, fill = Type)) + geom_density(alpha = 0.5) + # Semi-transparent density curves labs( x = &quot;Systolic Blood Pressure&quot;, y = &quot;Density&quot;, title = &quot;Observed vs. Simulated Systolic Blood Pressure&quot; ) + scale_fill_manual(values = c(&quot;Observed&quot; = &quot;blue&quot;, &quot;Simulated&quot; = &quot;red&quot;)) + theme_minimal() + theme(plot.title = element_text(hjust = 0.5)) ## Warning: Removed 264 rows containing non-finite outside the scale range ## (`stat_density()`). Looks decent. Not quite there yet. The blood pressure values have smaller variances and are skewed. Let’s nevertheless fit the model. 4.4.1.7 Fit and check model We use quap for the model fitting. library(data.table) ## ## Attaching package: &#39;data.table&#39; ## The following objects are masked from &#39;package:lubridate&#39;: ## ## hour, isoweek, mday, minute, month, quarter, second, wday, week, ## yday, year ## The following objects are masked from &#39;package:dplyr&#39;: ## ## between, first, last ## The following object is masked from &#39;package:purrr&#39;: ## ## transpose df &lt;- NHANES df &lt;- as.data.table(df) # Compute age mean for centering Age_mean &lt;- mean(df[Age &gt;= 20,]$Age, na.rm = TRUE) # adults # Filter age df &lt;- df %&gt;% dplyr::filter(Age &gt;= 20) %&gt;% dplyr::select(BPSysAve, PhysActive, Age, Gender, BMI) %&gt;% drop_na() dim(df) # 6919 7 ## [1] 6919 5 sum(is.na(df)) # 0 ## [1] 0 # Fit model m_NHANES &lt;- quap( alist( BPSysAve ~ dnorm(mu, sigma), mu &lt;- beta_0 + beta_1[PhysActive] + beta_2 * (Age - Age_mean) + beta_3[Gender], beta_0 ~ dnorm(120, 7), beta_1[PhysActive] ~ dnorm(0, 10), beta_2 ~ dnorm(5, 10), beta_3[Gender] ~ dnorm(0, 10), sigma ~ dunif(0, 20) ), data = df ) precis(m_NHANES, depth = 2) ## mean sd 5.5% 94.5% ## beta_0 120.43793869 5.73478814 111.2726396 129.6032378 ## beta_1[1] 0.70843889 5.76713679 -8.5085596 9.9254373 ## beta_1[2] -0.02474682 5.76689763 -9.2413630 9.1918694 ## beta_2 0.41947162 0.01115087 0.4016504 0.4372929 ## beta_3[1] -1.99172751 5.76708506 -11.2086433 7.2251883 ## beta_3[2] 2.49240046 5.76713820 -6.7246003 11.7094012 ## sigma 15.41591708 0.13105825 15.2064607 15.6253735 # We want to know the expected difference for the levels of PhysActive and Gender: # (which is not directly visible in the summary) post &lt;- extract.samples(m_NHANES) post$diff_PhysActive &lt;- post$beta_1[,2] - post$beta_1[,1] post$diff_G &lt;- post$beta_3[,2] - post$beta_3[,1] library(conflicted) conflicts_prefer(posterior::sd) ## [conflicted] Will prefer posterior::sd over any other package. #as.data.frame(precis(post, depth = 2, digits = 3)) post_summary &lt;- as.data.frame(precis(post, depth = 2, digits = 3)) # Convert to dataframe post_summary[, -which(names(post_summary) == &quot;histogram&quot;)] # Remove histogram column ## mean sd 5.5% 94.5% ## beta_0 120.49716319 5.70543593 111.2569749 129.4573022 ## beta_2 0.41950081 0.01110319 0.4015932 0.4373823 ## sigma 15.41532795 0.13000712 15.2089733 15.6258846 ## beta_1[1] 0.68258953 5.79611441 -8.7401511 9.8309985 ## beta_1[2] -0.05657717 5.79562528 -9.4739577 9.1230549 ## beta_3[1] -2.02523683 5.78298104 -11.2319307 7.1071791 ## beta_3[2] 2.45988056 5.78159392 -6.7442153 11.5933426 ## diff_PhysActive -0.73916670 0.37861323 -1.3443648 -0.1358472 ## diff_G 4.48511740 0.37136457 3.8851081 5.0768269 The summary tells us that diff_PhysActive is \\(-0.74\\) with a large proportion of the posterior \\(&lt;0\\). Please research if this is a clinically relevant difference. My guess is: no. 4.4.1.8 Fit model using lm (Frequentist approach) We can also fit the model using the Frequentist approach. No priors. The results should be very similar due to the large sample size. library(car) dim(df) ## [1] 6919 5 df &lt;- df %&gt;% mutate(Age_center = Age - mean(Age)) mod &lt;- lm(BPSysAve ~ PhysActive + Age_center + Gender, data = df) summary(mod) ## ## Call: ## lm(formula = BPSysAve ~ PhysActive + Age_center + Gender, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -55.736 -9.245 -1.160 8.254 103.561 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 119.14860 0.32495 366.665 &lt;2e-16 *** ## PhysActiveYes -0.73693 0.37750 -1.952 0.051 . ## Age_center 0.41949 0.01115 37.610 &lt;2e-16 *** ## Gendermale 4.48810 0.37134 12.086 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 15.42 on 6915 degrees of freedom ## Multiple R-squared: 0.1875, Adjusted R-squared: 0.1872 ## F-statistic: 532 on 3 and 6915 DF, p-value: &lt; 2.2e-16 check_model(mod) qqPlot(mod) # bad ## [1] 1232 5501 The results are similar to the Bayesian approach. In the summary output we see that the effect of physical activity is \\(-0.73693\\) with a small \\(p\\)-value (\\(0.051\\)). This is one example for the absurdity of strict cutoffs for \\(p\\)-values. The other coefficients including the estimate for \\(\\sigma\\) are also similar. It’s always a good idea to double-check. Model fit could be better, the model thinks the blood pressure is normally distributed. There also seems to be some heteroscadasticity and the residuals are not normally distributed. By the way, usually, one would fit this model by throwing in all variables into the model, including BMI. Let’s see if this approach changes the results: mod &lt;- lm(BPSysAve ~ PhysActive + Age + Gender + BMI, data = df) # add BMI summary(mod) ## ## Call: ## lm(formula = BPSysAve ~ PhysActive + Age + Gender + BMI, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -56.295 -9.414 -1.043 8.004 102.952 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 91.38776 1.04337 87.589 &lt;2e-16 *** ## PhysActiveYes -0.22870 0.37854 -0.604 0.546 ## Age 0.41728 0.01108 37.658 &lt;2e-16 *** ## Gendermale 4.43779 0.36887 12.031 &lt;2e-16 *** ## BMI 0.27237 0.02790 9.764 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 15.32 on 6914 degrees of freedom ## Multiple R-squared: 0.1986, Adjusted R-squared: 0.1981 ## F-statistic: 428.3 on 4 and 6914 DF, p-value: &lt; 2.2e-16 check_model(mod) qqPlot(mod) ## [1] 1232 5501 This changed the results notably. Before, the effect of physical activity was \\(-0.73693\\) with a rather small \\(p\\)-value, now it is \\(-0.22870\\) with a \\(p\\)-value ten times as large. Remember this: The interpretation of a whole paper could change by falsely including an additional variable (in this case BMI). 4.4.1.9 Improve model Now, that we have seen that the model fit is probably not sufficient, we could try to improve it. First order of business is the non-normality of the blood pressure values (outcome). The model predicts normally distributed values, which is not the case. It seems that the blood pressure values are right-skewed. Let’s try a log-normal distribution for the outcome variable, which only takes positive values and is skewed. We would further try to model \\(\\sigma\\) as a linear function of \\(\\mu\\). For higher expected values of BPSysAve, we would expect higher variability. Hence, we try to explicitely model heteroscadasticity. Note, that we have no problem with adding parameters to the model because of the large sample size. See exercise 16. \\[\\begin{eqnarray*} BPSysAve_i &amp;\\sim&amp; \\text{Log-Normal}(\\mu_i, \\sigma_i)\\\\ \\sigma_i &amp;=&amp; \\text{exp}(\\beta_4 + \\beta_5 \\cdot \\mu_i)\\\\ \\mu_i &amp;=&amp; \\beta_0 + \\beta_1 \\cdot PhysActive + \\beta_2 \\cdot Age_{centered} + \\beta_3 \\cdot Gender\\\\ \\beta_0 &amp;\\sim&amp; \\text{Normal}(140, 20)\\\\ \\beta_1 &amp;\\sim&amp; \\text{Normal}(0, 50)\\\\ \\beta_2 &amp;\\sim&amp; \\text{Normal}(0, 10)\\\\ \\beta_3 &amp;\\sim&amp; \\text{Normal}(0, 10)\\\\ \\beta_4 &amp;\\sim&amp; \\text{Normal}(0, 10)\\\\ \\beta_5 &amp;\\sim&amp; \\text{Uniform}(0, 50) \\end{eqnarray*}\\] We now allow the standard deviation \\(\\sigma_i\\) to be different for different values of the mean. With exp() we ensure that \\(\\sigma_i\\) is positive. This time, we assume: \\(log(BPSysAve_i) \\sim \\text{Normal}(\\mu_i, \\sigma_i)\\). That’s what it means to be log-normally distributed. Fit improved model sum(is.na(df)) # 0 ## [1] 0 set.seed(122) m_NHANES_lnorm &lt;- quap( alist( BPSysAve ~ dlnorm(lmu, lsd), lsd &lt;- exp(beta_4 + beta_5 * lmu), lmu &lt;- beta_0 + beta_1[PhysActive] + beta_2 * (Age - Age_mean) + beta_3[Gender], beta_0 ~ dnorm(140, 10), # beta_1[PhysActive] ~ dnorm(0, 10), # beta_2 ~ dnorm(0, 10), beta_3[Gender] ~ dnorm(0, 10), # beta_4 ~ dnorm(0, 10), # beta_5 ~ dnorm(0, 10) # ), data = df, start = list(beta_0 = 140, beta_1 = c(0.5, 0), beta_2 = 0, beta_3 = c(0.5, 0), beta_4 = 1, beta_5 = 0) ) #precis(m_NHANES_lnorm, depth = 2) nhanes_summary &lt;- as.data.frame(precis(m_NHANES_lnorm, depth = 2)) # Convert to dataframe nhanes_summary[, -which(names(nhanes_summary) == &quot;histogram&quot;)] # Remove histogram column ## data frame with 0 columns and 8 rows # difference in levels of PhysActive and Gender (catorical variables): post_lnorm &lt;- extract.samples(m_NHANES_lnorm) post_lnorm$diff_PhysActive &lt;- post_lnorm$beta_1[,2] - post_lnorm$beta_1[,1] post_lnorm$diff_G &lt;- post_lnorm$beta_3[,2] - post_lnorm$beta_3[,1] #precis(post_lnorm, depth = 2) post_lnorm_summary &lt;- as.data.frame(precis(post_lnorm, depth = 2)) # Convert to dataframe post_lnorm_summary[, -which(names(post_lnorm_summary) == &quot;histogram&quot;)] # Remove histogram column ## mean sd 5.5% 94.5% ## beta_0 69.802740693 7.085286e+00 58.450093685 8.100613e+01 ## beta_2 0.003333900 8.420378e-05 0.003198976 3.469766e-03 ## beta_4 -14.557397328 7.340126e-01 -15.730856478 -1.339366e+01 ## beta_5 2.597170489 1.534331e-01 2.353734581 2.842822e+00 ## beta_1[1] -33.013184105 6.159037e+00 -42.880222934 -2.329850e+01 ## beta_1[2] -33.016534396 6.159079e+00 -42.884893477 -2.330076e+01 ## beta_3[1] -32.022042725 6.166508e+00 -41.656953623 -2.200235e+01 ## beta_3[2] -31.980336296 6.166495e+00 -41.611161302 -2.196006e+01 ## diff_PhysActive -0.003350291 2.668752e-03 -0.007636024 9.712922e-04 ## diff_G 0.041706430 2.640623e-03 0.037460961 4.588615e-02 diff_PhysActive is now \\(-0.003350291\\) with a very tight credible interval containing \\(0\\) as a credible effect. The model is pretty sure, that the effect is practically zero. Let’s visualize the posterior predictive distributions of 100 samples: # posterior predictive checks sample_BP &lt;- sim(m_NHANES_lnorm, n = 1000) # Convert the first 100 rows of the posterior samples into a long format for ggplot df_posterior &lt;- as.data.frame(t(sample_BP[1:100,])) %&gt;% pivot_longer(cols = everything(), names_to = &quot;Simulation&quot;, values_to = &quot;BPSysAve_sim&quot;) # Create the plot ggplot() + geom_density(data = df_posterior, aes(x = BPSysAve_sim, group = Simulation), color = &quot;lightblue&quot;, alpha = 0.05) + geom_density(data = df, aes(x = BPSysAve), color = &quot;green&quot;, linewidth = 1.2) + labs(title = &quot;Density Estimation: Original vs. Posterior Samples&quot;, x = &quot;Systolic Blood Pressure&quot;, y = &quot;Density&quot;) + theme_minimal() + theme(plot.title = element_text(hjust = 0.5)) With respect to the distribution of blood pressure, the model looks much better now. Note, that we did not assume that the residuals are normally distributed, neither did we assume homoscedasticity (on the contrary). See exercise 17. 4.4.1.10 Interpret and report results Summarizing the results, we find the expected direction of association in our first model. The effect of physical activity on blood pressure was negative. After improving the model fit, we concluded that the small but clinically irrelevant effect from the first model dissapeared. It would be interesting to see how other variables containing more information influence blood pressure, like PhysActiveDays (Number of days in a typical week that participant does moderate or vigorous intensity activity). 4.4.2 Concluding remarks The NHANES example was a somewhat realistic instance of a multiple regression model which could easily be encountered in practice. In a Master thesis, we are often in a low-data setting with 20-150 observations. Here, the priors are much more important. Exercise 18 asks you to repeat the analysis with a smaller sample size. We saw that we can readily adapt the model, if assumptions of the classical linear regression model are violated. In our case, we had to model the outcome as log-normal in order to allow for the model to predict skewed blood pressure values. In addition, we explicitly modeled heteroscedasticity by allowing the standard deviation to grow with the mean. Theoretically, one could build arbitrarily complex models this way. Of course, syntax problems and convergence issues could arise. Even in this example some starting values were not fit for purpose, which is why I had to add the set.seed() command in the improved model. 4.5 Exercises [E] Easy, [M] Medium, [H] Hard (Some) solutions to exercises can be found in the git-repo here. 4.5.1 [M] Exercise 1 Fit a model with a cubic term for weight and height of the !Kung San people. Add the prediction bands as seen in the book. Come up with an explanation for the functional form of this relationship. Could there be reasons to for taking a less complicated model (1, 2)? 4.5.2 [E] Exercise 2 Consider the model equations from above where we used polynomial regression to model the relationship between weight and height: Draw the model hierarchy for the model. 4.5.3 [H] Exercise 3 Invent a data set (or use the first 4 lines of a previous data set) with 4 observations of \\(Y\\) and \\(X_1, X_2\\) and \\(X_3\\). You have a data frame with 4 rows and 4 columns. Fit a model with \\(Y\\) as the dependent variable and \\(X_1, X_2, X_3\\) as predictors. How big is \\(R^2\\)? Could you have calulated this without lmand R? 4.5.4 [E] Exercise 4 Go back to the section about the interaction term in the linear model. Use the code provided. Standardise the predictors. How are the \\(\\beta\\)s changing and what is their interpretation now? Change the relative sizes of the true but usually unknown \\(\\beta\\)s. What happens to the estimates and the graph? What happens if you change the error term and increase or decrease its variance? 4.5.5 [E] Exercise 5 Draw the interaction plot from the section about the interaction plot for the case when there is no interaction, i.e. \\(\\beta_3 = 0\\). 4.5.6 [M] Exercise 6 Go back to the model assumptions checks above. Create the same two plots for the simple mean model without predictors, just with the intercept. Which model fits the data better according to these posterior predictive checks? 4.5.7 [E] Exercise 7 Go back to the Simpson’s paradox section. Invent your own example for the pipe, fork and collider. 4.5.8 [M] Exercise 8 Take a data set of your choosing with many columns, say 10 or so, either from the internet or from R (if available) Fit a model for an arbitrary outcome, add more and more variables to predict the outcome and verify that the \\(R^2\\) increases. 4.5.9 [M] Exercise 9 Exponential curve fitting. Go back to the section about adding a transformed predictor in the Frequentist setting. Hint: You can use the optim function in R. Assume the relationship between weight and height looks like this: \\(height_i = \\alpha + \\beta_1 e^{\\beta_2 weight_i}\\). Use R and the least squares method to estimate the parameters \\(\\alpha, \\beta_1, \\beta_2\\). Note that the sum of squared errors is this: \\(\\sum_{i=1}^n (height_i - \\alpha - \\beta_1 e^{\\beta_2 weight_i})^2\\). What happens if you do not constrain the parameters \\(\\beta_1\\) and \\(\\beta_2\\) to be negative? Calculate the \\(R^2\\) for this model. 4.5.10 [E] Exercise 10 Let’s try to verify if Berkson’s paradox (which we have mentioned in the collider-section) also works for three variables in a sum score. Now, we assume some college admits only applicants in the top 20% of a score consisting of the sum of three variables: \\(W, X, Z\\) (grade point average, math score, verbal score). All three scores are individually normally distributed with mean 100 and standard deviation 15. Calculate the correlation matrix cor() of all students and the admitted students. Are any of the three variables correlated? Plot a scatterplot of the math score and the verbal score und color the points according to being admitted or not. You can add trendlines for the two groups. 4.5.11 [E] Exercise 11 Go back to the multicollinearity section and the example from McElreath 6.1. Verify that the coefficient is correct when leaving out the right leg length from the model. 4.5.12 [M] Exercise 12 Go back to the interpretation of the intercept in the quadratic height model above. Why is the intercept not equal to the sample mean of the heights? 4.5.13 [H] Exercise 13 Go back to the section about the fork and the example about smoking at the end. Draw a DAG for this example. Create data in R, where you assume that the probability of carrying a lighter is higher in smokers, the probability of lung cancer is higher in smokers. Show that the association between carrying a lighter and lung cancer disappears when conditioning on smoking. You may also invent an example relevant to the field of physiotherapy. 4.5.14 [H] Exercise 14 Perform extensive EDA on the NHANES data set implemented in R. See above. 4.5.15 [H] Exercise 15 Go back to the NHANES model above. Play around with the priors until the prior predictive check produces plausible values. 4.5.16 [M] Exercise 16 Go to the improved model fit of our NHANES example above. Draw the model hierarchy for the model. 4.5.17 [H] Exercise 17 Go back to the improved model fit of our NHANES example above. Draw observed vs. model-predicted blood pressure values. add the \\(y=x\\) line to the plot. Is the fit better compared to the first model? 4.5.18 [H] Exercise 18 Go back to the NHANES example above. Repeat the NHANES analysis with a smaller sample size. Draw 50-100 rows randomly from the adult NHANES data set we have used for the full analysis. What do you observe? 4.6 eLearning 2 4.6.1 Part 1 Repeat the entire content we have covered in this lecture so far. Try to grasp the big-picture view of what we want to achieve. We have started out with the simplest statistical model possible (mean model), then added one predictor (simple linear regression), and we are now in the process of adding more predictors (multiple regression). Read chapters in the books from Westfall and McElreath to deepen your understanding. Try to understand chapter 4 (above) as well. We will go through all the details on our last lecture day of course. Read this paper from the Journal of Physiotherapy. Did they apply \\(p\\)-value correction for multiple testing? Did they work with a strict \\(p\\)-value cutoff? In the methods section they state “Variables with non-normally distributed residuals were logarithmically transformed prior to performing linear regression analyses,…”. Is it irrelevant if the residuals/variables are left- or right-skewed? Simulate data from a strongly left- and right-skewed distribution, draw the histogram and also draw the histogram of the log-transformed data. What do you see? They use linear regression analysis (see “Data analysis”). Write down the model they use in Frequentist terms (since they worked with that). Would you expect the main statement of the paper to change if they had used a larger sample size? 4.6.2 Part 2 Read this paper about misconceptions about \\(p\\)-values. Consider the article about respiratory strength in ALS which was sent during eLearning 1: Which (if any) mistakes according to the paper about misconceptions about \\(p\\)-values did the authors make? Which statements about finding a “(non-)significant” effect would (probably) change if we doubled the sample size? Is the data of the trial available? Is the code for the analysis available? Write down the linear regression model(s) mentioned in the text: “Linear regression models were used to assess group diﬀerences in pre-to-post change for the primary outcomes of interest (MEP, MIP). These models included post-test scores as the outcome with group status and pre-test scores as predictors.” Read and study sections 9.2 to 9.3 (pages 205 to 213) in Westfalls book. 4.7 Sample exam questions for this chapter (in German since exam is in German) 4.7.1 Question 1 Welche(s) Regressionsmodell(e) ist/sind linear? \\(Y_i = \\beta_0 + \\beta_1 X_i^4 + \\beta_2 X_i^6\\) \\(Y_i = \\beta_0 + \\beta_1 \\log(X_i)\\) \\(Y_i = \\beta_0 + \\beta_1^{X_i}\\) \\(Y_i = \\beta_0 + \\sin(\\beta_1 X_i) \\cdot cos(\\beta_2)\\) 4.7.2 Question 2 Welche Aussage(n) ist/sind hinsichtlich des Interaktionseffekts (Formel unten) korrekt? \\[Y_i = \\beta_0 + \\beta_1 X_{1i} + \\beta_2 X_{2i} + \\beta_3 X_{1i} \\cdot X_{2i}\\] Interaktionsterme können nur zwischen kategorialen Variablen verwendet werden. Der Effekt von \\(X_1\\) auf \\(Y\\) hängt davon ab, welchen Wert \\(X_2\\) hat. Das Modell ist nicht mehr linear, weil der Interaktionsterm \\(X_1 \\cdot X_2\\) enthalten ist. Der Effekt von \\(X_2\\) auf \\(Y\\) hängt davon ab, welchen Wert \\(X_1\\) hat. 4.7.3 Question 3 Es sei der folgende R-Code gegeben: set.seed(42) N &lt;- 1000 sim_cor &lt;- numeric(1000) for (i in 1:1000) { # Simulate data # X: Income (in 1000s), right-skewed X &lt;- rgamma(N, shape = 2, rate = 0.1) # Z: Stress events per day ~ Poisson, depends on income lambda_Z &lt;- exp(3 - 0.05 * X) Z &lt;- rpois(N, lambda = lambda_Z) # Y: Sleep quality (1 = poor sleep), depends on stress level p_Y &lt;- plogis(-2 + 0.5 * Z) Y &lt;- rbinom(N, size = 1, prob = p_Y) # Calculate cond correlation between X and Y sim_cor[i] &lt;- cor(X[Z == 3], Y[Z == 3]) # Correlation when Z = 3 } mean(sim_cor) ## [1] 0.003271311 Welche Aussage(n) ist/sind korrekt? Wenn man den Wert von Z kennt, trägt X nichts zur Erklärung von Y bei. Der Code simuliert einen sog. Pipe. Der zugehörige DAG ist \\(X \\rightarrow Z \\rightarrow Y\\). \\(cor(X, Y) \\ne 0\\). "],["reliability-and-validity.html", "Chapter 5 Reliability and Validity 5.1 Reliability 5.2 Validity 5.3 TODOS", " Chapter 5 Reliability and Validity For this chapter we refer to the book Measurement in Medicine. I invite you to read the introductory chapters 1 and 2 about concepts, theories and models, and types of measurement. In general, when conducting a measurement of any sort (laboratory measurements, scores from questionnaires, etc.), we want to be reasonably sure that we actually measure what we intend to measure; (validity; chapter 6 in the book); that the measurement does not change too much if the underlying conditions are the same (reliability; chapter 5 in the book); and that we are able to detect a change if the underlying conditions change (responsiveness; chapter 7 in the book); and that we understand the meaning of a change in the measurement (interpretability; chapter 8 in the book). In this video, Kai jump starts you on reliability and validity. 5.1 Reliability You can watch this video to get started. Imagine, you measure a patient (pick your favorite measurement), for example, the range of motion (ROM) of the shoulder. If you are interested in how similar your measurements are in comparison to your colleagues, you are trying to determine the so-called inter-rater reliability. If you are interested in how similar your measurements are when you measure the same patient twice, you are trying to determine the so-called intra-rater reliability. Assuming there is a true (but unknown) underlying value (of Range of Motion, ROM), it is clear that measurements will not be exactly the same. Possible influences (potentially) causing different results are: the measurement instrument itself (e.g., the goniometer), the patient (e.g., mood/motivation), the examiner (e.g., mood, influence on patient), the environment (e.g., the room temperature). Note that the true score is defined in our context as the average of all measurements if we would measure repeatedly an infinite number of times. 5.1.1 Peter and Mary’s ROM measurements The data can be found here. We randomly select 50 measurements from Peter and Mary in 50 different patients, plot their measurements and annotate the absolutely largest one(s). At first the not affected shoulder (nas) and then the affected shoulder (as). library(pacman) p_load(tidyverse, readxl) # Read file url &lt;- &quot;https://raw.githubusercontent.com/jdegenfellner/Script_QM2_ZHAW/main/data/chapter%205_assignment%201_2_wide.xls&quot; temp_file &lt;- tempfile(fileext = &quot;.xls&quot;) download.file(url, temp_file, mode = &quot;wb&quot;) # mode=&quot;wb&quot; is important for binary files df &lt;- read_excel(temp_file) head(df) ## # A tibble: 6 × 5 ## patcode ROMnas.Mary ROMnas.Peter ROMas.Mary ROMas.Peter ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 90 92 88 95 ## 2 2 82 88 82 90 ## 3 3 82 88 57 59 ## 4 4 89 89 82 81 ## 5 5 80 82 48 40 ## 6 6 90 96 99 85 dim(df) ## [1] 155 5 # As in the book, let&#39;s randomly select 50 patients. set.seed(123) df &lt;- df %&gt;% sample_n(50) dim(df) ## [1] 50 5 # &quot;as&quot; = affected shoulder # &quot;nas&quot; = not affected shoulder df &lt;- df %&gt;% mutate(diff = abs(ROMnas.Peter - ROMnas.Mary)) # Compute absolute difference max_diff_point &lt;- df %&gt;% dplyr::filter(diff == max(diff, na.rm = TRUE)) # Find the row with the max difference df %&gt;% ggplot(aes(x = ROMnas.Peter, y = ROMnas.Mary)) + geom_point() + geom_point(data = max_diff_point, aes(x = ROMnas.Peter, y = ROMnas.Mary), color = &quot;blue&quot;, size = 4) + # Highlight max difference point geom_abline(intercept = 0, slope = 1, color = &quot;red&quot;) + theme_minimal() + ggtitle(&quot;ROMnas.Peter vs. ROMnas.Mary&quot;) + theme(plot.title = element_text(hjust = 0.5)) + annotate(&quot;text&quot;, x = max_diff_point$ROMnas.Peter, y = max_diff_point$ROMnas.Mary, label = paste0(&quot;Max Diff: &quot;, round(max_diff_point$diff, 2)), vjust = -1, color = &quot;blue&quot;, size = 4) # average abs. difference: mean(df$diff, na.rm = TRUE) # 7.2 ## [1] 7.2 cor(df$ROMnas.Peter, df$ROMnas.Mary, use = &quot;complete.obs&quot;) ## [1] 0.2403213 The red line represents the line of equality (\\(y=x\\)). If the measurements are exactly the same, all points would lie on this line. The blue point represents the largest absolute difference in measured Range of Motion (ROM) values between Peter and Mary from the randomly chosen 50 people. Note that the maximum difference in all 155 patients is 35 degrees. The first simple measure of agreement we could use is the (Pearson) correlation, which measures the strength and direction of a linear relationship between two variables. But correlation does not exactly measure what we want. If there was a bias (e.g., Mary systematically measures 5 degrees more than Peter), correlation would not notice this. (-&gt; exercise later…). It actually is too optimistic about the agreement since it only cares about the linearity and not about a potential bias. \\(r=0.2403213\\) which indicates a weak positive correlation. Higher values of Peter’s are associated with higher values of Mary’s measurements. But: Knowing Peter’s measurement does not help us to predict Mary’s measurement at such a low correlation (-&gt; exercise later). So, on the not affected shoulder (nas), agreement is really bad. What about the affected shoulder (as)? library(ggExtra) df &lt;- df %&gt;% mutate(diff = abs(ROMas.Peter - ROMas.Mary)) # Compute absolute difference max_diff_point &lt;- df %&gt;% dplyr::filter(diff == max(diff, na.rm = TRUE)) # Find the row with the max difference p &lt;- df %&gt;% ggplot(aes(x = ROMas.Peter, y = ROMas.Mary)) + geom_point() + geom_point(data = max_diff_point, aes(x = ROMas.Peter, y = ROMas.Mary), color = &quot;blue&quot;, size = 4) + # Highlight max difference point geom_abline(intercept = 0, slope = 1, color = &quot;red&quot;) + theme_minimal() + ggtitle(&quot;ROMas.Peter vs. ROMas.Mary&quot;) + theme(plot.title = element_text(hjust = 0.5)) + annotate(&quot;text&quot;, x = max_diff_point$ROMas.Peter, y = max_diff_point$ROMas.Mary, label = paste0(&quot;Max Diff: &quot;, round(max_diff_point$diff, 2)), vjust = -1, color = &quot;blue&quot;, size = 4) # Add marginal histograms ggMarginal(p, type = &quot;density&quot;, fill = &quot;gray&quot;, color = &quot;black&quot;) # average abs. difference: mean(df$diff, na.rm = TRUE) # 7.2 ## [1] 7.78 cor(df$ROMas.Peter, df$ROMas.Mary, use = &quot;complete.obs&quot;) ## [1] 0.8516653 # mean difference mean(df$ROMas.Peter - df$ROMas.Mary, na.rm = TRUE) ## [1] 1.22 In the affected side, the average absolute difference is even larger (\\(7.78\\)) with a maximum absolute difference of 37 degrees, but the correlation is much higher (\\(r=0.8516653\\)). See Figure 5.2 in the book. Btw, this is an an example for using the correlation coefficient even though the marginal distributions are not normal: There are much more measurements in the higher values around 80 than below, say, 60. But the correlation coefficient makes sense for descriptive purposes. In this case, knowing Peter’s measurement does help us to predict Mary’s measurement (-&gt; exercise later). 5.1.2 Intraclass Correlation Coefficient (ICC) One way to measure reliability is to use the intraclass correlation coefficient (ICC). This measure is based on the idea that the observed score \\(Y_i\\) consists of the true score (ROM) (\\(\\eta_i\\)) and a measurement error (for each person). The proportion of the true score variability to the total variability is the ICC. In the background one thinks of a statistical model from the Classical Test Theory (CTT). There is a true underlying score \\(\\eta_i\\) (for each patient i) and an error term \\(\\varepsilon_i \\sim N(0, \\sigma_i)\\) which is the difference between the true score and the observed score \\(Y_i\\). \\[Y_i = \\eta_i + \\varepsilon_i\\] It is assumed that \\(\\eta_i\\) and \\(\\varepsilon_i\\) are independent: (\\(\\mathbb{C}ov(\\eta_i, \\varepsilon_i)=0\\)). This is a nice assumption because now we know (see here) that the variance of the observed score \\(Y_i\\) is just the sum of the variance of the true score \\(\\eta_i\\) and the variance of the error term \\(\\varepsilon_i\\): \\[\\mathbb{V}ar(Y_i) = \\mathbb{V}ar(\\eta_i) + \\mathbb{V}ar(\\varepsilon_i)\\] \\[\\sigma_{Y_i}^2 = \\sigma_{\\eta_i}^2 + \\sigma_{\\varepsilon_i}^2\\] We want most of the variability in our observed scores \\(Y_i\\) to be explained by the true but unobservable scores \\(\\eta_i\\). The measurement error \\(\\varepsilon_i\\) should be be comparatively small. If it is large, we are mostly measuring noise or at least not what we want to measure. How do we get to the theoretical definition of the ICC? If you either pull two people with the same true but unobservable score \\(\\eta\\) out of the population or measure the same person twice and the score (\\(\\eta\\)) does not change in between, we can define reliability as correlation between these two measurements: \\[Y_1 = \\eta + \\varepsilon_1\\] \\[Y_2 = \\eta + \\varepsilon_2\\] \\[cor(Y_1, Y_2) = cor(\\eta + \\varepsilon_1, \\eta + \\varepsilon_2) = \\frac{Cov(\\eta + \\varepsilon_1, \\eta + \\varepsilon_2)}{\\sigma_{Y_1}\\sigma_{Y_2}} =\\] If we use the properties of the covariance, the fact that the true score \\(\\eta\\) and the errors \\(\\varepsilon_i\\) are independent, and the fact that the errors \\(\\varepsilon_1\\) and \\(\\varepsilon_2\\) are independent, we get: \\[\\frac{Cov(\\eta, \\eta) + Cov(\\eta, \\varepsilon_2) + Cov(\\varepsilon_1, \\eta) + Cov(\\varepsilon_1, \\varepsilon_2)}{\\sigma_{Y_1} \\sigma_{Y_2}} =\\] \\[\\frac{\\sigma_{\\eta}^2 + 0 + 0 + 0}{\\sigma_{Y_1} \\sigma_{Y_2}}\\] Since \\(\\eta\\) is a random variable (we draw a person randomly from the population), it is well defined to talk about the variance of \\(\\eta\\) (i.e., \\(\\sigma_{\\eta}^2\\)). I think this aspect may not come across in the book quite so clearly. Furthermore, it does not matter if I call the measurement \\(Y_1\\), \\(Y_2\\) or more general \\(Y\\), since they have the same variance and true score: \\[\\sigma_{Y} = \\sigma_{Y_1} = \\sigma_{Y_2}\\] Hence, it follows that: \\[cor(Y_1, Y_2) = \\frac{\\sigma_{\\eta}^2}{\\sigma_{Y_1}^2} = \\frac{\\sigma_{\\eta}^2}{\\sigma_{Y}^2} = \\frac{\\sigma_{\\eta}^2}{\\sigma_{Y}^2} = \\frac{\\sigma_{\\eta}^2}{\\sigma_{\\eta}^2 + \\sigma_{\\varepsilon}^2}\\] This is the intraclass correlation coefficient (ICC). It is (as seen in the formula above) the proportion of the true score variability to the total variability. It ranges from 0 and 1 (think about why!). A little manipulation to improve understanding: Let’s look again at the term for the ICC above and divide the numerator and the denominator by \\(\\sigma_{\\eta}^2\\), which we can do, since it is a positive number: \\[\\frac{\\sigma_{\\eta}^2}{\\sigma_{\\eta}^2 + \\sigma_{\\varepsilon}^2} = \\frac{1}{1 + \\frac{\\sigma_{\\varepsilon}^2}{\\sigma_{\\eta}^2}}\\] We could call the term \\(\\frac{\\sigma_{\\varepsilon}^2}{\\sigma_{\\eta}^2}\\) the noise-to-signal ratio. The higher this ratio, the lower the ICC. The lower the ratio, the higher the ICC. If you increase the noise (measurement error \\(\\sigma_{\\varepsilon}^2\\)) for fixed true score variability \\(\\sigma_{\\eta}^2\\), the ICC decreases, because the denominator increases. If you increase the true score variability \\(\\sigma_{\\eta}^2\\) for fixed noise \\(\\sigma_{\\varepsilon}^2\\), the ICC increases, since the denominator decreases. Btw, we could also divide by \\(\\sigma_{\\varepsilon}^2\\) and get the signal-to-noise ratio. At first glance, the following statement seems wrong: In a very homogeneous population (patients have very similar scores/measurements), the ICC might be very low. The reason is that the patient variability \\(\\sigma_{\\eta}^2\\) is low and you probably have some measurement error \\(\\sigma_{\\varepsilon}^2\\). Hence, if you look at the formula, ICC must be low (for a given measurement error). On the other hand, if you have a very heterogeneous population (patients have rather different scores/measurements), the ICC might be very high. The reason is that the patient variability \\(\\sigma_{\\eta}^2\\) is high and you probably have some measurement error \\(\\sigma_{\\varepsilon}^2\\). What matters is the ratio of the two, as can be seen from the formula above. Let’s try to calculate the ICC for our data using a statistical model. There are a couple of different R packages to do this. We will use the irr package. library(irr) ## Loading required package: lpSolve irr::icc(as.matrix(df[, c(&quot;ROMas.Peter&quot;, &quot;ROMas.Mary&quot;)]), model = &quot;oneway&quot;, type = &quot;consistency&quot;) ## Single Score Intraclass Correlation ## ## Model: oneway ## Type : consistency ## ## Subjects = 50 ## Raters = 2 ## ICC(1) = 0.851 ## ## F-Test, H0: r0 = 0 ; H1: r0 &gt; 0 ## F(49,50) = 12.4 , p = 7.31e-16 ## ## 95%-Confidence Interval for ICC Population Values: ## 0.753 &lt; ICC &lt; 0.913 We get the result: \\(ICC(1) = 0.851\\), which is identical to the correlation coefficient because there is no systematic difference between Peter and Mary. Since we are forward looking and modern regression model experts, we would like to see if we can get the result using the Bayesian framework. Below is the model structure. \\[ \\begin{array}{rcl} ROM_i &amp;\\sim&amp; N(\\mu_i, \\sigma_{\\varepsilon}) \\\\ \\mu_i &amp;=&amp; \\alpha[ID] \\\\ \\alpha[ID] &amp;\\sim&amp; \\text{Normal}(\\mu_{\\alpha}, \\sigma_{\\alpha}) \\\\ \\mu_{\\alpha} &amp;\\sim&amp; \\text{Normal}(66, 20) \\\\ \\sigma_{\\alpha} &amp;\\sim&amp; \\text{Uniform}(0,20) \\\\ \\sigma_{\\varepsilon} &amp;\\sim&amp; \\text{Uniform}(0,20) \\end{array} \\] Model details: \\(ROM_i\\) is the observed ROM-score for patient \\(i\\). Every patient has two observations (one each from Mary and Peter). So, for instance \\(i=1,2\\) could be patient \\(ID=1\\). \\(\\mu_i\\) is the expected value of the observed score for patient \\(ID\\). \\(\\sigma_{\\varepsilon}\\) is the standard deviation of the measurement error. \\(\\alpha[ID]\\) is the patient-specific intercept (\\(=\\eta_i\\)). Since every patient has a different intercept and they come from a normal distribution, we have a random intercepts model. \\(\\mu_{\\alpha}\\) is the mean of the prior for the patient-specific intercepts. This is the overall mean of the scores. \\(\\sigma_{\\alpha}\\) is the standard deviation of the patient-specific intercepts. This is the patient variability! The nice thing about presenting a model in this way is that it’s easier to interpret. \\(\\sigma_{\\alpha}\\) says how much the scores of the patients vary in relation to their respective level \\(\\alpha[ID]\\). The prior distributions express (as always) our prior beliefs about the parameters. The ICC is then calculated as the ratio of the between-patient variance and the total variance: \\[\\frac{\\sigma_{\\alpha}^2}{\\sigma_{\\alpha}^2 + \\sigma_{\\varepsilon}^2}\\] We did not even notice it, but this was our first multilevel regression model. It is multilevel due to the extra layer of patient-specific intercepts. The observations are obviously clustered within patients, since observations from the same patient are more similar than observations from different patients. If one would run a normal linear regression model, one would ignore this clustering and the assumption of independent error terms would be violated. Draw model structure … exercise.. This time we fire up the rethinking package and use the ulam function to fit the model. This uses Markov Chain Monte Carlo (MCMC) to sample from the posterior distribution of the parameters. The chains argument specifies how many chains we want to run. A chain is a sequence of points in a space with as many dimensions as there are parameters in the model. It jumps from one point to the next in this parameter space and in doing so, visits the points of the posterior approximately in the correct frequency. Here is an excellent visualization. The cores argument specifies how many CPU cores we want to use. For larger jobs, one can try to parallelize the chains, which saves some time. library(rethinking) library(tictoc) df_long &lt;- df %&gt;% mutate(ID = row_number()) %&gt;% dplyr::select(ID,ROMas.Peter, ROMas.Mary) %&gt;% pivot_longer(cols = c(ROMas.Peter, ROMas.Mary), names_to = &quot;Rater&quot;, values_to = &quot;ROM&quot;) %&gt;% mutate(Rater = factor(Rater)) tic() m5.1 &lt;- ulam( alist( # Likelihood ROM ~ dnorm(mu, sigma), # Patient-specific intercepts (random effects) mu &lt;- a[ID], a[ID] ~ dnorm(mu_a, sigma_ID), # Hierarchical structure for patients # Priors for hyperparameters mu_a ~ dnorm(66, 20), # Population-level mean sigma_ID ~ dunif(0,20), # Between-patient standard deviation sigma ~ dunif(0,20) # Residual standard deviation ), data = df_long, chains = 8, cores = 4 ) ## Running MCMC with 8 chains, at most 4 in parallel, with 1 thread(s) per chain... ## ## Chain 1 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 1 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 1 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 1 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 1 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 1 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 1 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 1 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 1 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 1 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 1 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 1 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: ## Chain 1 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in &#39;/var/folders/pm/jd6n6gj10371_bml1gh8sc5w0000gn/T/Rtmp5oukcb/model-14f557db8d028.stan&#39;, line 17, column 4 to column 34) ## Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, ## Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. ## Chain 1 ## Chain 2 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 2 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 2 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 2 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 2 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 2 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 2 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 2 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 2 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 2 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 2 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 2 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: ## Chain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in &#39;/var/folders/pm/jd6n6gj10371_bml1gh8sc5w0000gn/T/Rtmp5oukcb/model-14f557db8d028.stan&#39;, line 17, column 4 to column 34) ## Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, ## Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. ## Chain 2 ## Chain 3 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 3 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 3 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 3 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 3 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 3 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 3 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 3 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 3 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 3 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 3 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 3 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 4 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 4 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 4 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 4 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 4 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 4 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 4 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 4 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 4 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 4 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 4 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 4 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: ## Chain 4 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in &#39;/var/folders/pm/jd6n6gj10371_bml1gh8sc5w0000gn/T/Rtmp5oukcb/model-14f557db8d028.stan&#39;, line 17, column 4 to column 34) ## Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, ## Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. ## Chain 4 ## Chain 1 finished in 0.1 seconds. ## Chain 2 finished in 0.2 seconds. ## Chain 3 finished in 0.1 seconds. ## Chain 4 finished in 0.1 seconds. ## Chain 5 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 5 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 5 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 5 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 5 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 5 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 5 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 5 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 5 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 5 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 5 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 5 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 5 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: ## Chain 5 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in &#39;/var/folders/pm/jd6n6gj10371_bml1gh8sc5w0000gn/T/Rtmp5oukcb/model-14f557db8d028.stan&#39;, line 17, column 4 to column 34) ## Chain 5 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, ## Chain 5 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. ## Chain 5 ## Chain 6 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 6 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 6 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 6 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 6 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 6 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 6 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 6 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 6 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 6 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 6 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 6 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 6 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: ## Chain 6 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in &#39;/var/folders/pm/jd6n6gj10371_bml1gh8sc5w0000gn/T/Rtmp5oukcb/model-14f557db8d028.stan&#39;, line 17, column 4 to column 34) ## Chain 6 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, ## Chain 6 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. ## Chain 6 ## Chain 7 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 7 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 7 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 7 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 7 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 7 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 7 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 7 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 7 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 7 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 7 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 7 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 8 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 8 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 8 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 8 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 8 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 8 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 8 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 8 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 8 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 5 finished in 0.1 seconds. ## Chain 6 finished in 0.1 seconds. ## Chain 7 finished in 0.1 seconds. ## Chain 8 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 8 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 8 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 8 finished in 0.1 seconds. ## ## All 8 chains finished successfully. ## Mean chain execution time: 0.1 seconds. ## Total execution time: 0.7 seconds. toc() # 7s ## 8.351 sec elapsed precis(m5.1, depth = 2) ## mean sd 5.5% 94.5% rhat ess_bulk ## a[1] 67.722244 4.9090800 59.884240 75.424230 1.0011883 6619.262 ## a[2] 64.111654 4.7840605 56.528447 71.776798 1.0034783 6191.276 ## a[3] 86.987105 4.8248501 79.310842 94.721499 1.0021836 6533.691 ## a[4] 76.488312 4.8772869 68.688592 84.377506 1.0004241 6088.506 ## a[5] 58.652587 4.9146668 50.800481 66.376233 1.0057245 6894.371 ## a[6] 69.286318 4.9001887 61.446915 77.135439 1.0023860 6440.228 ## a[7] 69.630175 4.7214488 62.093989 77.274188 1.0042853 6102.224 ## a[8] 67.364715 4.8073624 59.760551 74.940179 1.0004233 6926.255 ## a[9] 70.982913 4.8029119 63.473921 78.838160 1.0021779 6096.437 ## a[10] 81.123297 4.6829024 73.463408 88.601603 1.0000833 5882.855 ## a[11] 70.525946 4.7789205 62.916758 78.015190 1.0027020 6057.395 ## a[12] 42.158971 4.9255574 34.330380 50.142874 1.0052952 5608.430 ## a[13] 86.981146 4.8049263 79.173926 94.829309 1.0006401 5697.280 ## a[14] 74.665706 4.6060512 67.261235 81.970150 1.0042568 6217.659 ## a[15] 76.383198 4.8629608 68.375808 84.099854 1.0019507 5393.146 ## a[16] 34.941636 4.9924846 27.056167 43.018477 1.0015714 6091.685 ## a[17] 84.803446 4.7374711 77.144124 92.406944 0.9993908 4742.513 ## a[18] 64.997487 4.9643186 56.943773 72.939016 1.0035173 6046.231 ## a[19] 63.285164 4.9025730 55.533948 71.178041 1.0013061 5093.825 ## a[20] 79.685208 5.0087033 71.658232 87.571054 1.0025818 5732.622 ## a[21] 30.284397 4.9534314 22.471539 38.175759 1.0029669 4993.642 ## a[22] 62.717165 4.8429270 55.056809 70.508550 1.0042888 5186.047 ## a[23] 67.369138 4.7935870 59.691637 75.021504 1.0015468 5712.044 ## a[24] 81.364895 4.6500222 73.951702 88.744605 1.0010820 5840.154 ## a[25] 54.960936 4.6723859 47.304353 62.472893 1.0031483 6486.986 ## a[26] 67.484558 4.8629666 59.694329 75.237344 1.0024718 5631.800 ## a[27] 75.662864 4.6822039 68.289372 83.149005 1.0015293 5142.724 ## a[28] 81.458669 4.7261292 73.931357 89.044628 1.0007963 6429.453 ## a[29] 46.319123 4.9454046 38.515295 54.285881 1.0011816 5884.281 ## a[30] 61.257367 4.7772157 53.562560 68.978274 1.0023302 5689.914 ## a[31] 23.509215 4.9033830 15.777376 31.510781 1.0033955 4020.937 ## a[32] 74.135907 4.9851734 66.120570 81.958539 1.0022234 6227.534 ## a[33] 70.503386 4.7654367 62.891725 78.072130 1.0023102 5314.875 ## a[34] 76.514259 4.7673813 69.060676 84.004384 1.0056486 6295.756 ## a[35] 75.552330 4.7650873 68.063417 83.238239 1.0059815 6458.817 ## a[36] 69.318470 4.8028313 61.733604 76.842796 1.0019923 5624.692 ## a[37] 49.567778 4.8517137 42.000534 57.348616 1.0001428 5345.948 ## a[38] 73.807516 4.8704217 66.012632 81.610347 1.0014698 5593.351 ## a[39] 72.757513 4.8058223 65.331446 80.543411 0.9996477 6046.893 ## a[40] 45.817525 4.8801249 38.090789 53.659197 1.0017618 5810.945 ## a[41] 73.683223 4.8798317 65.754844 81.586076 0.9997154 5788.226 ## a[42] 26.096569 5.0020037 18.151000 34.085055 1.0035820 5645.769 ## a[43] 32.929828 4.9839276 25.060965 40.934064 1.0009925 4969.622 ## a[44] 74.142579 4.8767249 66.482373 81.844996 1.0027673 5518.837 ## a[45] 76.914062 4.8315152 69.190795 84.479135 1.0021492 5799.564 ## a[46] 73.639372 4.7714194 66.006190 81.297628 1.0014867 5772.895 ## a[47] 55.859204 4.8616217 48.241338 63.875677 1.0018038 5633.257 ## a[48] 69.603460 4.7802544 61.990560 77.160122 1.0024286 5065.542 ## a[49] 72.402414 4.6825454 65.012180 79.784921 1.0015697 5911.021 ## a[50] 72.770000 4.8603442 65.014248 80.455220 1.0029222 7919.236 ## mu_a 65.555333 2.4626739 61.598423 69.494927 1.0017301 4186.431 ## sigma_ID 16.613184 1.6346644 14.010696 19.244560 1.0024463 1915.575 ## sigma 7.081393 0.7331837 6.011486 8.331337 1.0004015 2066.538 post &lt;- extract.samples(m5.1) var_patients &lt;- mean(post$sigma_ID^2) # Between-patient variance var_residual &lt;- mean(post$sigma^2) # Residual variance var_patients / (var_patients + var_residual) # ICC ## [1] 0.8461117 # 0.846 # not too bad; very close to the result from the irr package In the output from precis(m5.1, depth = 2) above we see all 50 intercept estimates for each patient: a[ID] mu_ais the overall intercept. sigma_ID is the patient variability. sigma is the residual variability. We just square the sigmas to get the variances. Remember: In the background, there is just a statistical model to predict the outcome. Depending on the predictors, we get different models and probably different ICCs. We can also estimate a random intercept model with the lme4 package using the command lmerin the Frequentist framework. No priors. library(lme4) ## Loading required package: Matrix ## ## Attaching package: &#39;Matrix&#39; ## The following objects are masked from &#39;package:tidyr&#39;: ## ## expand, pack, unpack m5.2 &lt;- lmer(ROM ~ (1|ID), data = df_long) summary(m5.2) ## Linear mixed model fit by REML [&#39;lmerMod&#39;] ## Formula: ROM ~ (1 | ID) ## Data: df_long ## ## REML criterion at convergence: 791 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -1.91875 -0.44821 0.00964 0.51325 1.47941 ## ## Random effects: ## Groups Name Variance Std.Dev. ## ID (Intercept) 270.99 16.462 ## Residual 47.35 6.881 ## Number of obs: 100, groups: ID, 50 ## ## Fixed effects: ## Estimate Std. Error t value ## (Intercept) 65.590 2.428 27.02 print(VarCorr(m5.2), comp = &quot;Variance&quot;) ## Groups Name Variance ## ID (Intercept) 270.99 ## Residual 47.35 # ICC = 270.99 / (270.99 + 47.35) # ## [1] 0.8512597 # 0.8512597 # -&gt; exactly the same result as the irr package The expression Formula: ROM ~ (1 | ID) specifies that we want to fit a model with a random intercept. This means that every patient (ID) gets its own intercept which is drawn from a normal distribution. We will probably talk about this in the next lecture (Methodenvertiefung) in greater detail. So far, we have only looked at the general \\(ICC\\) (ICC1 in the psychoutput) (see also page 106 in the book). There, we have not yet explicitely considered a bias (=systematic difference between the raters) that the raters could have. In the book, they introduce a bias of 5 degrees (Mary measures 5 degrees more than Peter on average). The model für ICC 2 and 3 in the psych output explicitely considers this (systematic) difference that could occur between the raters. This results in an extra term in the denominator of the ICC, an additional variance component. From the same statistical model (!) we take the variance components to calculate: \\[ICC_{agreement} = \\frac{\\sigma_{\\alpha}^2}{\\sigma_{\\alpha}^2 + \\mathbf{\\sigma_{rater}^2} + \\sigma_{\\varepsilon}^2}\\] where \\(\\sigma_{rater}^2\\) is the variance due to systematic rater differences. \\[ICC_{consistency} = \\frac{\\sigma_{\\alpha}^2}{\\sigma_{\\alpha}^2 + \\sigma_{\\varepsilon}^2}\\] We will now introduce the 5 degree bias and use our Bayesian framework to estimate the ICC. By introducing a bias, we should see a lower ICC. Note, that the prediction quality of Mary’s scores given Peter’s scores should not change, since we would only shift Mary’s scores down by 5 degrees, which would not disturb the linear regression model. We can always shift the points to where we want them to be. We do that for instance when we scale or standardize the data. Admitted, the Bayesian version in this case takes longer and is more complex. The advantage is still that it’s fully probabilistic and one could work with detailed prior information, especially for smaller smaple sizes. Anyhow, let’s try to give the model equations considering the introduced bias. This is the model for both \\(ICC_{agreement}\\) and \\(ICC_{consistency}\\)! \\[ \\begin{array}{rcl} ROM_i &amp;\\sim&amp; N(\\mu_i, \\sigma_{\\varepsilon}) \\\\ \\mu_i &amp;=&amp; \\alpha[ID] + \\beta[Rater] \\\\ \\alpha[ID] &amp;\\sim&amp; \\text{Normal}(\\mu_{\\alpha}, \\sigma_{\\alpha}) \\\\ \\beta[Rater] &amp;\\sim&amp; \\text{Normal}(0, \\sigma_{\\beta}) \\\\ \\mu_{\\alpha} &amp;\\sim&amp; \\text{Normal}(66, 20) \\\\ \\sigma_{\\alpha} &amp;\\sim&amp; \\text{Exp}(0.5) \\\\ \\sigma_{\\beta} &amp;\\sim&amp; \\text{Exp}(1) \\\\ \\sigma_{\\varepsilon} &amp;\\sim&amp; \\text{Exp}(1) \\end{array} \\] As you can see, \\(\\mu_i\\) now consists of the patient-specific intercept \\(\\alpha[ID]\\) (everyone of the 50 patients gets one) and the rater-specific effect \\(\\beta[Rater]\\) (Mary and Peter get one). So, in total, we have three sources of variability: the patient variability \\(\\sigma_{\\alpha}\\), the rater variability \\(\\sigma_{\\beta}\\), and the residual variability \\(\\sigma_{\\varepsilon}\\). Note, that if Peter measures each of the 50 patients twice, the systematic difference between Peter’s measurements would be zero. Of course, one could be creative and think of a learning effect or something. Draw model structure … exercise.. library(rethinking) library(conflicted) conflicts_prefer(posterior::sd) ## [conflicted] Removing existing preference. ## [conflicted] Will prefer posterior::sd over any other package. df_long_bias &lt;- df_long %&gt;% mutate(ROM = ROM + ifelse(Rater == &quot;ROMas.Mary&quot;, 5, 0)) head(df_long_bias) ## # A tibble: 6 × 3 ## ID Rater ROM ## &lt;int&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 1 ROMas.Peter 66 ## 2 1 ROMas.Mary 75 ## 3 2 ROMas.Peter 65 ## 4 2 ROMas.Mary 68 ## 5 3 ROMas.Peter 96 ## 6 3 ROMas.Mary 87 set.seed(123) m5.2 &lt;- ulam( alist( # Likelihood ROM ~ dnorm(mu, sigma_eps), # Model for mean ROM with patient and rater effects mu &lt;- alpha[ID] + beta[Rater], # Patient-specific random effects alpha[ID] ~ dnorm(mu_alpha, sigma_alpha), # Rater effect (Peter/Mary) beta[Rater] ~ dnorm(0, sigma_beta), # Priors for hyperparameters mu_alpha ~ dnorm(66, 10), # Population mean ROM sigma_alpha ~ dexp(0.5), # Between-patient SD (less aggressive shrinkage) sigma_beta ~ dexp(1), # Rater SD (better regularization) sigma_eps ~ dexp(1) # Residual SD (prevents over-shrinkage) ), data = df_long_bias, chains = 8, cores = 4 ) ## Running MCMC with 8 chains, at most 4 in parallel, with 1 thread(s) per chain... ## ## Chain 1 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 1 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 1 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 1 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 1 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 1 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 1 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 1 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: ## Chain 1 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in &#39;/var/folders/pm/jd6n6gj10371_bml1gh8sc5w0000gn/T/Rtmp5oukcb/model-14f557a961556.stan&#39;, line 21, column 4 to column 45) ## Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, ## Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. ## Chain 1 ## Chain 2 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 2 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 2 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: ## Chain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in &#39;/var/folders/pm/jd6n6gj10371_bml1gh8sc5w0000gn/T/Rtmp5oukcb/model-14f557a961556.stan&#39;, line 21, column 4 to column 45) ## Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, ## Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. ## Chain 2 ## Chain 3 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 3 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 3 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 4 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 4 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 4 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 4 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: ## Chain 4 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in &#39;/var/folders/pm/jd6n6gj10371_bml1gh8sc5w0000gn/T/Rtmp5oukcb/model-14f557a961556.stan&#39;, line 21, column 4 to column 45) ## Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, ## Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. ## Chain 4 ## Chain 1 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 1 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 1 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 1 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 2 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 2 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 2 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 2 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 2 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 2 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 2 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 2 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 2 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 3 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 3 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 3 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 3 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 3 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 3 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 3 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 3 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 3 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 4 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 4 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 4 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 4 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 4 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 4 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 4 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 4 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 1 finished in 0.2 seconds. ## Chain 2 finished in 0.3 seconds. ## Chain 3 finished in 0.2 seconds. ## Chain 4 finished in 0.2 seconds. ## Chain 5 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 5 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 5 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 5 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 5 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 5 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 5 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 5 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 5 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 5 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 5 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 5 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: ## Chain 5 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in &#39;/var/folders/pm/jd6n6gj10371_bml1gh8sc5w0000gn/T/Rtmp5oukcb/model-14f557a961556.stan&#39;, line 21, column 4 to column 45) ## Chain 5 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, ## Chain 5 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. ## Chain 5 ## Chain 6 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 6 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 6 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 6 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 6 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 6 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 6 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 6 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 6 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 6 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 7 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 7 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 7 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 7 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 7 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 7 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 7 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 7 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: ## Chain 7 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in &#39;/var/folders/pm/jd6n6gj10371_bml1gh8sc5w0000gn/T/Rtmp5oukcb/model-14f557a961556.stan&#39;, line 21, column 4 to column 45) ## Chain 7 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, ## Chain 7 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. ## Chain 7 ## Chain 8 Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 8 Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 5 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 5 finished in 0.2 seconds. ## Chain 6 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 6 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 7 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 7 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 7 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 7 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 7 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 8 Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 8 Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 8 Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 8 Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 8 Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 8 Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 8 Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 8 Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 8 Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 6 finished in 0.2 seconds. ## Chain 7 finished in 0.2 seconds. ## Chain 8 Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 8 finished in 0.2 seconds. ## ## All 8 chains finished successfully. ## Mean chain execution time: 0.2 seconds. ## Total execution time: 0.8 seconds. ## Warning: 27 of 4000 (1.0%) transitions ended with a divergence. ## See https://mc-stan.org/misc/warnings for details. precis(m5.2, depth = 2) ## mean sd 5.5% 94.5% rhat ess_bulk ## alpha[1] 70.221230 4.6957078 62.9122250 77.6751330 1.003921 3956.8010 ## alpha[2] 66.637192 4.7935979 59.2921655 74.3219425 1.000703 4048.1323 ## alpha[3] 89.391211 4.8460529 81.8305935 96.9301420 1.001484 3581.3337 ## alpha[4] 79.068129 4.7090695 71.7267400 86.7491720 1.002625 4088.4617 ## alpha[5] 61.248545 4.6824417 53.8962900 68.7503010 1.002206 3886.9310 ## alpha[6] 71.711300 4.5314894 64.4525160 79.0005630 1.001403 3806.2065 ## alpha[7] 72.121798 4.7349544 64.6055805 79.6941110 1.001856 3482.5502 ## alpha[8] 69.834714 4.7037178 62.3043635 77.3545565 1.000583 4054.8858 ## alpha[9] 73.526363 4.7369985 66.0854635 81.0876520 1.001352 3708.7551 ## alpha[10] 83.497318 4.7172575 76.0272720 91.0849000 1.001394 3871.4522 ## alpha[11] 73.114282 4.6041905 65.8139360 80.4195110 1.002261 3330.7789 ## alpha[12] 44.827995 4.8132889 37.2627160 52.4649335 1.003939 3774.3717 ## alpha[13] 89.401919 4.7509654 81.8033940 96.8927025 1.001166 3733.9925 ## alpha[14] 77.155674 4.7663782 69.3451470 84.8327385 1.002594 3611.6344 ## alpha[15] 78.928227 4.8283770 71.2416295 86.6386025 1.005149 3462.8282 ## alpha[16] 37.537016 4.8929538 29.6438890 45.4816100 1.000967 3802.3178 ## alpha[17] 87.205983 4.6947001 79.8024680 94.7725850 1.004141 3205.6678 ## alpha[18] 67.618180 4.6490608 60.4495525 74.8906485 1.000691 3565.7257 ## alpha[19] 65.734938 4.7038246 58.2243970 73.1307710 1.003272 3021.3632 ## alpha[20] 82.148125 4.6634709 74.8132215 89.4844660 1.001809 3525.2622 ## alpha[21] 32.959556 4.7365812 25.6872720 40.6902550 1.000230 3896.3144 ## alpha[22] 65.312545 4.7691775 57.6339360 72.9769385 1.001701 3888.3018 ## alpha[23] 69.922455 4.6557324 62.4829305 77.3353785 1.004454 3949.3830 ## alpha[24] 84.028041 4.8666565 76.4453060 91.8557125 1.002520 4582.8271 ## alpha[25] 57.576782 4.6027933 50.1384940 65.0507070 1.003696 3883.0937 ## alpha[26] 69.844403 4.5423390 62.4724325 77.0730070 1.002214 3588.0981 ## alpha[27] 78.181829 4.6438020 70.9217780 85.6579100 1.000977 3573.7990 ## alpha[28] 83.976099 4.7519956 76.3497625 91.4832750 1.000891 3836.6036 ## alpha[29] 48.888864 4.6981990 41.3078680 56.4819905 1.001334 4153.8714 ## alpha[30] 63.812328 4.7111640 56.4071725 71.2587825 1.003047 3935.6824 ## alpha[31] 26.098770 4.8818137 18.3637725 33.9304330 1.003445 4068.8549 ## alpha[32] 76.676408 4.7365322 69.0211035 83.9915570 1.002364 3823.5694 ## alpha[33] 73.055353 4.6273537 65.9705020 80.5753430 1.002063 4039.5757 ## alpha[34] 78.963166 4.7676436 71.3900570 86.3736705 1.001748 3403.3517 ## alpha[35] 78.075230 4.7744829 70.5443095 85.7926805 1.001281 4222.4407 ## alpha[36] 71.652651 4.7601329 64.0808175 79.2662110 1.000708 4471.9540 ## alpha[37] 52.084764 4.7084537 44.8942315 59.7080135 1.002348 3439.9837 ## alpha[38] 76.121385 4.8822293 68.3599335 83.7502705 1.002290 4006.6888 ## alpha[39] 75.451394 4.7905587 67.7880930 82.8390550 1.000887 3454.6782 ## alpha[40] 48.408307 4.7026185 40.9218930 56.1687365 1.003060 3999.9664 ## alpha[41] 76.176540 4.6262898 68.7745580 83.5991630 1.004537 3963.8804 ## alpha[42] 28.812970 4.7775508 21.1928615 36.4243750 1.003746 3855.7962 ## alpha[43] 35.646945 4.6876761 28.1427865 43.0427785 1.000564 4114.5370 ## alpha[44] 76.736915 4.6819911 69.0549725 83.9337520 1.003016 3594.7244 ## alpha[45] 79.377066 4.6099939 71.8918425 86.7122600 1.001080 4016.1217 ## alpha[46] 76.266121 4.6936374 68.9066090 83.8324250 1.000442 4007.8677 ## alpha[47] 58.467633 4.5906174 51.1480830 65.6998370 1.002588 3396.4658 ## alpha[48] 72.114214 4.7995591 64.4240875 79.7356615 1.005283 3715.8719 ## alpha[49] 74.771082 4.6137731 67.3251525 82.0455495 1.001963 3457.0385 ## alpha[50] 75.414102 4.7692631 67.7589025 83.1030340 1.001202 4211.2151 ## beta[1] 1.196482 1.4699703 -0.7591575 3.6725132 1.005792 932.0193 ## beta[2] -1.260339 1.5058841 -3.8538230 0.6600649 1.007244 857.8581 ## mu_alpha 67.979401 2.5706977 63.9069175 72.0885400 1.003032 1842.7425 ## sigma_alpha 15.457249 1.6142987 13.1380645 18.2104485 1.000383 4277.2078 ## sigma_beta 1.685571 1.0527940 0.3547305 3.5587972 1.001191 1581.1771 ## sigma_eps 6.713486 0.6434269 5.7619659 7.7933864 1.004713 2175.7641 precis(m5.2) ## 52 vector or matrix parameters hidden. Use depth=2 to show them. ## mean sd 5.5% 94.5% rhat ess_bulk ## mu_alpha 67.979401 2.5706977 63.9069175 72.088540 1.003032 1842.742 ## sigma_alpha 15.457249 1.6142987 13.1380645 18.210449 1.000383 4277.208 ## sigma_beta 1.685571 1.0527940 0.3547305 3.558797 1.001191 1581.177 ## sigma_eps 6.713486 0.6434269 5.7619659 7.793386 1.004713 2175.764 # check systematic difference for rater in posterior post &lt;- extract.samples(m5.2) mean(post$beta[,1] - post$beta[,2]) ## [1] 2.456821 # ICC agreement: post &lt;- extract.samples(m5.2) (var_patients &lt;- mean(post$sigma_alpha^2)) # Between-patient variance ## [1] 241.5319 (var_raters &lt;- mean(post$sigma_beta^2)) # Rater variance ## [1] 3.949248 (var_residual &lt;- mean(post$sigma_eps^2)) # Residual variance ## [1] 45.48479 # ICC_agreement = var_patients / (var_patients + var_raters + var_residual) ## [1] 0.8301037 # 0.8033613 (sigma_alpha ~ dexp(1)) # 0.83 (sigma_alpha ~ dexp(0.5)) # ICC (Single_fixed_raters) = ICC3 in psych output = var_patients / (var_patients + var_residual) ## [1] 0.8415256 # 0.8415256 It should be noted that this ICC is very sensitive to the choice of the prior. If you choose too agressive priors for the standard deviations \\(\\sigma_{\\alpha}, \\sigma_{\\beta}, \\sigma_{\\varepsilon}\\), you will get a too low ICC. We will probably talk about this in the next lecture (Methodenvertiefung) in greater detail. I have played around a little with the parameters in the exponential priors to get the desired result which compares nicely to the two alternative methods below: using the psych package and with the lmer package. Both use a Frequentist random intercept model in the background. Using a package like psych just gives a more convenient interface to elicit the ICC. psych package: library(psych) library(conflicted) # needs wide format #conflicts_prefer(dplyr::select) df_wide &lt;- df_long_bias %&gt;% pivot_wider(names_from = Rater, values_from = ROM) df_wide_values &lt;- df_wide %&gt;% dplyr::select(-ID) psych::ICC(df_wide_values) # ICC1 = 0.83 ## Call: psych::ICC(x = df_wide_values) ## ## Intraclass correlation coefficients ## type ICC F df1 df2 p lower bound upper bound ## Single_raters_absolute ICC1 0.83 11 49 50 1.1e-14 0.72 0.90 ## Single_random_raters ICC2 0.83 12 49 49 1.4e-15 0.71 0.91 ## Single_fixed_raters ICC3 0.85 12 49 49 1.4e-15 0.75 0.91 ## Average_raters_absolute ICC1k 0.91 11 49 50 1.1e-14 0.84 0.95 ## Average_random_raters ICC2k 0.91 12 49 49 1.4e-15 0.83 0.95 ## Average_fixed_raters ICC3k 0.92 12 49 49 1.4e-15 0.86 0.95 ## ## Number of subjects = 50 Number of Judges = 2 ## See the help file for a discussion of the other 4 McGraw and Wong estimates, lmer package: # _lmer------ m5.3 &lt;- lmer(ROM ~ (1 | ID) + (1 | Rater), data = df_long_bias) summary(m5.3) ## Linear mixed model fit by REML [&#39;lmerMod&#39;] ## Formula: ROM ~ (1 | ID) + (1 | Rater) ## Data: df_long_bias ## ## REML criterion at convergence: 793.2 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -1.87448 -0.46270 0.00272 0.57820 1.45008 ## ## Random effects: ## Groups Name Variance Std.Dev. ## ID (Intercept) 270.882 16.458 ## Rater (Intercept) 6.193 2.489 ## Residual 47.557 6.896 ## Number of obs: 100, groups: ID, 50; Rater, 2 ## ## Fixed effects: ## Estimate Std. Error t value ## (Intercept) 68.090 2.998 22.71 print(VarCorr(m5.3), comp = &quot;Variance&quot;) ## Groups Name Variance ## ID (Intercept) 270.882 ## Rater (Intercept) 6.193 ## Residual 47.557 # Groups Name Variance # ID (Intercept) 270.882 # Rater (Intercept) 6.193 # Residual 47.557 # ICC (Single_random_raters) = ICC2 in psych output 270.882 / (270.882 + 6.193 + 47.557) # ## [1] 0.8344279 # 0.8344279 # ICC (Single_fixed_raters) = ICC3 in psych output 270.882 / (270.882 + 47.557) # ## [1] 0.8506559 # 0.85 5.1.3 Explanation of ICCs in the psych output If you want to know all the details, refer to Shrout and Fleiss (1979). The help-function ?psych::ICC contains a relatively good and much shorter explanation. The variance formulae given in the help-file are probably somewhat confusing. We try to stick to the notation of the book. Let’s talk about the first three ICCs in the psych output:. Single_raters_absolute ICC1: According to the help file: “Each target [i.e. patient] is rated by a different judge [i.e. rater] and the judges are selected at random.” So, variability due to raters is implied and cannot be disentangled. This is formally not our situation, since we have only two raters and 50 patients. But for this case, we do not care who measures, since we do not model it, hence, we cannot know if there are systematic differences between the raters. There might as well be 50 raters doing their thing, or just 2 as in our case. This is the ICC we calculated above; the overall ICC. in the book and based on the following model: \\[Y_{ij} = \\eta_i + \\varepsilon_i\\] where \\(i \\in {1,...,50}\\) is the patient and \\(j \\in {1,2}\\) is the measurement (\\(=50*2=100\\) rows in long format). Note that we do not mention a rater here, since we do not care who took the measurement. It is not part of the model. The ICC is then calculated as: \\[ICC = \\frac{\\sigma_{\\eta}^2}{\\sigma_{\\eta}^2 + \\sigma_{\\varepsilon}^2}\\] whereas we could get the variance components from either the posterior in the Bayesian setting or from the lmer output in the Frequentist setting. Single_random_raters ICC2: ICC2 (\\(=ICC_{agreement}\\) in the book) and ICC3 (\\(=ICC_{consistency}\\) in the book) are based on the same statistical model. The only difference is that ICC2 assumes that the (in our case) 2 raters are randomly selected from a larger pool of raters, hence, the rater variability must be explicitely considered and yields a potentially smaller value for the ICC. Compared to ICC1, we have repeated measurements from the same raters in 50 patients. That’s why we can model their bias. One observation would not be enough. The help file says: “A random sample of k judges rate each target. The measure is one of absolute agreement in the ratings.” A random sample of k (2 in our case) judges means that we cannot rule out the variability due to raters (you get a variety of them and their biases are different). \\[Y_{ij} = \\eta_i + \\beta_j + \\varepsilon_i\\] where \\(i \\in {1,...,50}\\) is the patient, \\(j \\in {1,2}\\) is the rater (doing one measurement in each patient). The ICC is then calculated as: \\[ICC_{agreement} = \\frac{\\sigma_{\\eta}^2}{\\sigma_{\\eta}^2 +\\mathbf{\\sigma_{rater}^2} + \\sigma_{\\varepsilon}^2}\\] Single_fixed_raters ICC3: ICC3 (\\(=ICC_{consistency}\\) in the book) is based on the same model as ICC2, but assumes that the raters are fixed. This means that the raters are the same for all patients in the future study. So, we have considered the rater variability in the model (which was possible due to the repeated measurements from the same raters in 50 patients), but do not care since Mary and Peter will be the people doing the future measurements, not other therapists. If you fix a random variable (raters in this case), variance is zero. The help file says: “A fixed set of k judges rate each target. There is no generalization to a larger population of judges.” The ICC is then calculated as: \\[ICC_{consistency} = \\frac{\\sigma_{\\eta}^2}{\\sigma_{\\eta}^2 + \\sigma_{\\varepsilon}^2}\\] ICC1 and ICC3 are not identical, since ICC1 does not consider the rater variability in the model. They are based on different statistiacal models. ICC2 and ICC3 are based on the same model. If there is no systematic difference between raters, all 3 ICCs and the Pearson correlation (r) are the same (see Figure 5.3 in the book). \\(ICC_{consistency}\\) vs. \\(ICC_{agreement}\\): The latter is used, when we need Peter and Mary to concur in their measurements. Patients coming to Peters practice will get the same (or very similar) “diagnosis” (ROM-value) from Mary. When there is systematic difference (line is shifted downwards in Figure 5.3), this cannot be guaranteed. If we only need Peter and Mary to rank the patients in the same order, we can use \\(ICC_{consistency}\\). 5.1.4 Summary Peter and Mary, with and without bias Below, we summarize the results for the ICCs (calculated with psych) for the unbiased and biased case (Mary measures on average 5 degrees more than peter). library(pacman) p_load(conflicted, tidyverse, flextable) # Ensure select() from dplyr is used #conflicted::conflicts_prefer(&quot;select&quot;, &quot;dplyr&quot;) # Unbiased ICC Calculation df_wide_unbiased &lt;- df_long %&gt;% pivot_wider(names_from = Rater, values_from = ROM) df_wide_values_unbiased &lt;- df_wide_unbiased %&gt;% dplyr::select(-ID) icc_results_unbiased &lt;- psych::ICC(df_wide_values_unbiased) ## boundary (singular) fit: see help(&#39;isSingular&#39;) # Extract relevant ICC values icc_unbiased_df &lt;- icc_results_unbiased$results %&gt;% dplyr::select(type, ICC) %&gt;% rename(`Unbiased ICC` = ICC) # Biased ICC Calculation df_wide_biased &lt;- df_long_bias %&gt;% pivot_wider(names_from = Rater, values_from = ROM) df_wide_values_biased &lt;- df_wide_biased %&gt;% dplyr::select(-ID) icc_results_biased &lt;- psych::ICC(df_wide_values_biased) # Extract relevant ICC values icc_biased_df &lt;- icc_results_biased$results %&gt;% dplyr::select(type, ICC) %&gt;% dplyr::rename(`Biased ICC` = ICC) icc_merged_df &lt;- left_join(icc_unbiased_df, icc_biased_df, by = &quot;type&quot;) %&gt;% slice(1:3) ft &lt;- flextable(icc_merged_df) %&gt;% flextable::set_header_labels(type = &quot;ICC Type&quot;) %&gt;% flextable::set_caption(&quot;Intraclass Correlation Coefficients - Unbiased vs. Biased&quot;) %&gt;% flextable::set_table_properties(width = .5, layout = &quot;autofit&quot;) ft .cl-277026aa{table-layout:auto;width:50%;}.cl-276d04e8{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-276e55e6{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-276e55e7{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-276e6360{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-276e6361{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-276e636a{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-276e636b{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-276e636c{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-276e6374{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} Table 5.1: Intraclass Correlation Coefficients - Unbiased vs. Biased ICC TypeUnbiased ICCBiased ICCICC10.85125740.8328336ICC20.85125740.8344281ICC30.85125740.8506562 The left column shows that the ICCs are identical for the unbiased case. Specifically, ICC2 (=\\(ICC_{agreement}\\) in the book) and ICC3 (\\(ICC_{consistency}\\) in the book) are based on the same model which explicitely considers a potential bias between the raters. Since there is none, the ICCs are the same. In the biased case, there is as systematic difference between Mary and Peter. ICC1 does not care about it and shows a somewhat lower value compared to before (\\(0.833\\)). The reason is because the agreement line is in a plot with Mary on Y and Peter on X shifted upwards by 5 degrees. If you would introduce a bias of 15 degrees, the ICC would be even lower (\\(ICC1 = 0.61\\), \\(ICC2 = 0.65\\) -&gt; verify as exercise). The unbiased column would of course stay the same. ICC2 now considers the bias of 5 degrees. The model knows about the shift. If we compare the variance components of ICC1 and ICC2, we see: ## [1] &quot;Model for ICC1: ROM ~ (1 | ID)&quot; ## Groups Name Variance ## ID (Intercept) 267.79 ## Residual 53.75 ## [1] &quot;Model for ICC2 (and 3): ROM ~ (1 | ID) + (1 | Rater)&quot; ## Groups Name Variance ## ID (Intercept) 270.882 ## Rater (Intercept) 6.193 ## Residual 47.557 The residual variance is smaller in the model with the rater effect. The model explains the data better, since it knows about the bias. Look at the \\(\\sigma_{\\varepsilon}\\) of the two models, they add up: \\[\\sigma_{\\varepsilon, ICC1}^2 = \\sigma_{\\varepsilon, ICC23}^2 + \\sigma_{Rater}^2\\] \\[53.75 = 47.557 + 6.193\\] Hence, we just split up the error differently by considering the bias. The patient variability (ID Variance in the output) is slightly higher: \\(270.882\\) compared to \\(267.79\\) before. In the first model, patient variability was conflated with rater variation because rater effects were not explicitly modeled. For this reason, ID Variance increases slightly. It is a rather small increase, so ICC1 and ICC2 are not that different. For a bias of 15 degrees, the additivity of the variances remains. The patient variability increases from \\(223.89\\) (ICC1) to \\(270.882\\) (ICC2), hence the difference in ICCs is larger (\\(ICC1=0.613\\) vs. \\(ICC2=0.657\\)). ICC3 considers the bias in the model but does not include it in the measurement error since the raters are fixed. 5.1.5 Difference between correlation and ICC If we do not introduce a bias in the data, the correlation coefficient is the same as the ICC (as seen above). On page 110, Figure 5.3, the authors show nicely what the difference is between the correlation coefficient and the ICC. It is also shown how \\(ICC_{agreement}\\) and \\(ICC_{consistency}\\) change with the bias. \\(ICC_{consistency}\\) stays \\(1\\) if bias is introduced (assuming a hypothetical perfect agreement before). Peter and Mary still rank the patients in the same order. Correlation \\(r\\) is always 1, no matter at what slope (\\(\\ne 0\\)) the line is. It measures the strength and direction of the linear relationship between two variables. \\(ICC_{agreement}\\) changes as soon as you depart from the 45 degree line with respect to slope or shift the line up or down (i.e., introduce a bias). This is a good point in time to think for a moment about the type of measurement for agreement with respect to costs. The ICC below weights each measurement equally, although one larger outlier (large discrepancy between Peter and Mary) may influence the ICC notably (exercise later). One could easily think of a situation where overall agreement measure like the ICC is not adequate since, for instance, exceeding a certain difference threshold could decide between life and death. 5.1.6 Bad news about the ICC? Let’s try to expand our intuitive understanding of what an ICC of 0.8 or so means. For simplicity, we take the overall ICC, which is equal to the correlation coefficient, if there is no bias present. The following example demonstrates the meaning of the Test-Retest reliability of the Hospital Anxiety and Depression Scale - Anxiety subscale (HADS-A). We could take all kinds of other scores where ICC values and a minimally clinically important difference (MCID) is given. Briefly, the MCID is the smallest change in a score that is considered important to the patient. For example, a 5% change in BMI is (in some populations) considered meaningful. Specifically, we: Simulate two correlated measurement at two time points (TP1 and TP2) to get predetermined ICC (\\(=\\rho\\)). Calculate the Intraclass Correlation Coefficient (ICC). Compare the Minimal Clinically Important Difference (MCID) to prediction intervals. Visualize how often a clinically meaningful change of 1.68 points is detected, even if no real change has occurred. The code can be found here and in the github repo of the script. In the code, the sources for the ICC and MCID are cited. # ICC and Test-Retest-Reliability library(pacman) p_load(tidyverse, lme4, conflicted, psych, MASS) # MCID Minimal Clinically Important Difference--------- # HADS score--------- # The Hospital Anxiety and Depression Scale # Test-Retest-Reliability: # https://doi.org/10.1016/S1361-9004(02)00029-8 # Use the numbers from here (Table 1): # https://www.sciencedirect.com/science/article/abs/pii/S1361900402000298 # for demonstration purposes. # Minimal Clinically Important Difference (MCID) for HADS-A: # https://pmc.ncbi.nlm.nih.gov/articles/PMC2459149/ # Not exactly the same population as shift workers, but suffices for demonstration purposes. # MCID HADS anxiety score and 1.68 (1.48–1.87) # Simplification: Score is deemed to be continuous. # Create 2 correlated measurements: # Use HADS-A Anxiety subscale # Use n=100, instead of n=24 for more stability sigma1 &lt;- 3.93 # Standard deviation of variable 1 sigma2 &lt;- 3.52 # Standard deviation of variable 2 rho &lt;- 0.82 # Correlation cov_matrix &lt;- matrix(c(sigma1^2, rho * sigma1 * sigma2, rho * sigma1 * sigma2, sigma2^2), nrow = 2) n &lt;- 100 set.seed(188) # For reproducibility samples &lt;- mvrnorm(n = n, mu = c(7.92, 7.83), Sigma = cov_matrix) df &lt;- as.data.frame(samples) colnames(df) &lt;- c(&quot;TP1&quot;, &quot;TP2&quot;) plot(df, main = &quot;Scatterplot of Multivariate Normal Samples&quot;, xlab = &quot;TP1&quot;, ylab = &quot;TP2&quot;, pch = 19, col = rgb(0, 0, 1, alpha = 0.5)) # https://en.wikipedia.org/wiki/Intraclass_correlation#Modern_ICC_definitions:_simpler_formula_but_positive_bias # ICC should be the correlation within the group (i.e. patient) cor(df$TP1, df$TP2, method = &quot;pearson&quot;) # ~0.8-0.9 ## [1] 0.8184881 ICC(df) # 0.82 ## boundary (singular) fit: see help(&#39;isSingular&#39;) ## Call: ICC(x = df) ## ## Intraclass correlation coefficients ## type ICC F df1 df2 p lower bound upper bound ## Single_raters_absolute ICC1 0.82 10 99 100 5.6e-26 0.74 0.87 ## Single_random_raters ICC2 0.82 10 99 99 8.7e-26 0.74 0.87 ## Single_fixed_raters ICC3 0.82 10 99 99 8.7e-26 0.74 0.87 ## Average_raters_absolute ICC1k 0.90 10 99 100 5.6e-26 0.85 0.93 ## Average_random_raters ICC2k 0.90 10 99 99 8.7e-26 0.85 0.93 ## Average_fixed_raters ICC3k 0.90 10 99 99 8.7e-26 0.85 0.93 ## ## Number of subjects = 100 Number of Judges = 2 ## See the help file for a discussion of the other 4 McGraw and Wong estimates, # check manually df_mod &lt;- data.frame(id = 1:n, df$TP1, df$TP2) names(df_mod) &lt;- c(&quot;id&quot;, &quot;TP1&quot;, &quot;TP2&quot;) df_mod_long &lt;- df_mod %&gt;% pivot_longer(cols = c(TP1, TP2), names_to = &quot;time_point&quot;, values_to = &quot;score&quot;) mod &lt;- lme4::lmer(score ~ time_point + (1|id), data = df_mod_long) variance_df &lt;- as.data.frame(summary(mod)$varcor) # ICC= variance_df$sdcor[1]^2 / (variance_df$sdcor[1]^2 + variance_df$sdcor[2]^2) # ~0.9 ## [1] 0.8170566 # cor and ICC are very very similar, should actually be identical. # check mean(df$TP1) ## [1] 7.964553 mean(df$TP2) ## [1] 7.782436 #data.frame(TP1 = df$TP1, TP2 = df$TP2) %&gt;% # ggplot(aes(x = TP1, y = TP2)) + # geom_point() + # xlab(&quot;Measurement of patients at time point 1&quot;) + # ylab(&quot;Measurement of the same patients at time point 2&quot;) # Range for HADS-A should be 0-21 # (according to &quot;The Hospital Anxiety and Depression Scale, Zigmond &amp; Snaith, 1983&quot;) df &lt;- data.frame(TP1 = df$TP1, TP2 = df$TP2) %&gt;% dplyr::filter(TP1 &gt;= 0) %&gt;% dplyr::filter(TP2 &gt;= 0) %&gt;% # negative not possible dplyr::filter(TP1 &lt;= 21) %&gt;% dplyr::filter(TP2 &lt;= 21) # max. score is 21 df ## TP1 TP2 ## 1 13.003089 14.539674 ## 2 6.980669 9.312346 ## 3 17.751972 12.957041 ## 4 10.344489 6.995323 ## 5 7.861347 7.568915 ## 6 12.892886 11.703021 ## 7 5.478497 7.952075 ## 8 9.583384 7.515242 ## 9 7.519451 4.043160 ## 10 11.499240 11.652541 ## 11 6.468033 6.660218 ## 12 6.048513 3.471018 ## 13 7.697834 9.065112 ## 14 12.254369 8.811619 ## 15 1.614857 4.614998 ## 16 10.619077 10.125575 ## 17 9.419930 8.518226 ## 18 2.937867 4.456727 ## 19 8.236834 11.196117 ## 20 8.954668 12.675367 ## 21 12.320423 12.768905 ## 22 12.314754 10.081370 ## 23 2.160930 6.959311 ## 24 6.832022 6.613443 ## 25 1.093221 4.571882 ## 26 9.725573 9.440133 ## 27 1.355585 4.171266 ## 28 7.752631 9.028429 ## 29 8.764755 5.020493 ## 30 6.347606 3.694110 ## 31 5.375775 4.932552 ## 32 11.278457 10.079779 ## 33 6.740993 6.092677 ## 34 5.812009 4.668937 ## 35 4.349329 6.225931 ## 36 9.895140 12.126645 ## 37 11.148574 9.213335 ## 38 2.047422 2.430490 ## 39 6.486131 6.032311 ## 40 5.645763 7.611138 ## 41 6.726079 10.071178 ## 42 5.755609 7.947849 ## 43 10.642786 9.117806 ## 44 5.141220 5.304112 ## 45 2.642085 1.933020 ## 46 7.684671 6.640758 ## 47 9.262502 8.538370 ## 48 16.254728 15.559716 ## 49 7.156983 6.978574 ## 50 12.081541 10.935277 ## 51 11.764108 9.705782 ## 52 11.558231 10.001998 ## 53 7.207230 8.702822 ## 54 13.271195 12.305426 ## 55 8.662632 9.794167 ## 56 7.202986 3.372489 ## 57 5.857393 10.673803 ## 58 12.606715 8.961083 ## 59 11.081861 13.549278 ## 60 4.900769 5.337160 ## 61 15.309336 11.034889 ## 62 14.589373 13.720623 ## 63 13.671753 10.925029 ## 64 12.180305 12.781404 ## 65 1.762711 5.561035 ## 66 3.140391 6.372191 ## 67 5.492213 5.996299 ## 68 4.466991 8.914347 ## 69 2.502974 2.742313 ## 70 12.667048 9.000329 ## 71 4.580641 6.028937 ## 72 11.858807 10.368234 ## 73 4.537198 2.709857 ## 74 7.419888 10.998858 ## 75 4.879237 4.827545 ## 76 13.618764 9.062266 ## 77 14.472807 14.418930 ## 78 7.952580 7.896180 ## 79 1.912410 3.428163 ## 80 7.801004 2.616797 ## 81 10.336987 11.858491 ## 82 8.417477 10.399787 ## 83 5.491992 7.532053 ## 84 7.596043 3.712851 ## 85 6.912368 8.655686 ## 86 6.201155 2.107871 ## 87 11.707088 13.145075 ## 88 3.443512 1.810893 ## 89 12.406231 12.175912 ## 90 7.231295 8.403967 ## 91 11.070856 10.877902 ## 92 14.508512 13.754604 ## 93 9.936188 10.610818 ## 94 6.590862 3.507825 ## 95 11.660322 10.722280 mod &lt;- lm(TP2 ~ TP1, data = df) pred &lt;- predict(mod, df, interval = &quot;prediction&quot;) # How wide are the prediction intervals for a patient? as.data.frame(pred) %&gt;% mutate(width_prediction_interval = upr - lwr) # width of the prediction interval 8-10 points! ## fit lwr upr width_prediction_interval ## 1 11.517789 7.32000445 15.715573 8.395568 ## 2 7.260698 3.09356695 11.427829 8.334262 ## 3 14.874649 10.57640522 19.172893 8.596488 ## 4 9.638494 5.46784345 13.809144 8.341301 ## 5 7.883226 3.71851506 12.047937 8.329422 ## 6 11.439889 7.24365214 15.636126 8.392473 ## 7 6.198852 2.02213714 10.375568 8.353431 ## 8 9.100489 4.93366030 13.267318 8.333658 ## 9 7.641549 3.47617950 11.806918 8.330738 ## 10 10.454757 6.27494432 14.634571 8.359626 ## 11 6.898329 2.72869927 11.067959 8.339260 ## 12 6.601781 2.42951087 10.774051 8.344541 ## 13 7.767643 3.60266181 11.932624 8.329962 ## 14 10.988538 6.80055090 15.176525 8.375974 ## 15 3.467747 -0.76481930 7.700313 8.465132 ## 16 9.832593 5.66013066 14.005055 8.344925 ## 17 8.984947 4.81870889 13.151186 8.332477 ## 18 4.402947 0.19450442 8.611390 8.416885 ## 19 8.148648 3.98424793 12.313048 8.328800 ## 20 8.656066 4.49106133 12.821072 8.330010 ## 21 11.035230 6.84644646 15.224014 8.377568 ## 22 11.031223 6.84250820 15.219938 8.377430 ## 23 3.853751 -0.36823502 8.075737 8.443972 ## 24 7.155623 2.98785021 11.323396 8.335546 ## 25 3.099016 -1.14446756 7.342499 8.486967 ## 26 9.200999 5.03359021 13.368407 8.334817 ## 27 3.284474 -0.95341998 7.522367 8.475787 ## 28 7.806378 3.64149615 11.971259 8.329763 ## 29 8.521822 4.35713015 12.686514 8.329383 ## 30 6.813202 2.64286933 10.983535 8.340666 ## 31 6.126241 1.94861984 10.303862 8.355242 ## 32 10.298692 6.12094325 14.476441 8.355497 ## 33 7.091277 2.92307764 11.259477 8.336399 ## 34 6.434603 2.26060789 10.608598 8.347990 ## 35 5.400673 1.21224884 9.589097 8.376848 ## 36 9.320861 5.15268035 13.489042 8.336361 ## 37 10.206881 6.03027765 14.383484 8.353206 ## 38 3.773515 -0.45059795 7.997629 8.448227 ## 39 6.911122 2.74159427 11.080650 8.339056 ## 40 6.317088 2.14177936 10.492397 8.350617 ## 41 7.080735 2.91246298 11.249007 8.336544 ## 42 6.394735 2.22030395 10.569166 8.348862 ## 43 9.849352 5.67672294 14.021982 8.345259 ## 44 5.960440 1.78063088 10.140249 8.359619 ## 45 4.193867 -0.01952182 8.407256 8.426777 ## 46 7.758338 3.59333195 11.923345 8.330013 ## 47 8.873666 4.70791894 13.039413 8.331494 ## 48 13.816287 9.55673194 18.075843 8.519111 ## 49 7.385330 3.21887319 11.551787 8.332914 ## 50 10.866371 6.68040625 15.052336 8.371929 ## 51 10.641986 6.45950156 14.824470 8.364969 ## 52 10.496456 6.31606656 14.676846 8.360780 ## 53 7.420848 3.25456616 11.587130 8.332564 ## 54 11.707306 7.50560608 15.909006 8.403400 ## 55 8.449634 4.28506471 12.614202 8.329138 ## 56 7.417848 3.25155183 11.584145 8.332593 ## 57 6.466683 2.29303270 10.640334 8.347301 ## 58 11.237603 7.04521442 15.429991 8.384777 ## 59 10.159723 5.98368848 14.335757 8.352069 ## 60 5.790471 1.60824613 9.972696 8.364450 ## 61 13.148015 8.90959977 17.386429 8.476830 ## 62 12.639092 8.41504000 16.863143 8.448103 ## 63 11.990450 7.78250179 16.198399 8.415897 ## 64 10.936184 6.74907482 15.123294 8.374219 ## 65 3.572261 -0.65735481 7.801876 8.459231 ## 66 4.546106 0.34090074 8.751312 8.410411 ## 67 6.208548 2.03195085 10.385144 8.353194 ## 68 5.483845 1.29682048 9.670870 8.374049 ## 69 4.095533 -0.12027142 8.311337 8.431609 ## 70 11.280250 7.08707078 15.473429 8.386359 ## 71 5.564181 1.37846891 9.749893 8.371425 ## 72 10.708926 6.52543503 14.892417 8.366982 ## 73 5.533472 1.34726300 9.719682 8.372419 ## 74 7.571170 3.40554231 11.736798 8.331256 ## 75 5.775251 1.59280130 9.957701 8.364900 ## 76 11.952994 7.74589920 16.160088 8.414189 ## 77 12.556694 8.33482530 16.778563 8.443737 ## 78 7.947716 3.78312039 12.112312 8.329192 ## 79 3.678079 -0.54861400 7.904772 8.453386 ## 80 7.840572 3.67577039 12.005373 8.329602 ## 81 9.633192 5.46258745 13.803796 8.341208 ## 82 8.276340 4.11193632 12.440744 8.328808 ## 83 6.208392 2.03179294 10.384990 8.353197 ## 84 7.695690 3.53049953 11.860881 8.330381 ## 85 7.212418 3.04500055 11.379836 8.334835 ## 86 6.709680 2.53843261 10.880928 8.342495 ## 87 10.601680 6.41978859 14.783572 8.363783 ## 88 4.760375 0.55978683 8.960963 8.401176 ## 89 11.095886 6.90604714 15.285724 8.379677 ## 90 7.437859 3.27165782 11.604060 8.332402 ## 91 10.151944 5.97600166 14.327886 8.351884 ## 92 12.581933 8.35939957 16.804466 8.445066 ## 93 9.349877 5.18149616 13.518258 8.336761 ## 94 6.985154 2.81619604 11.154112 8.337916 ## 95 10.568622 6.38720944 14.750034 8.362825 # Example: predict(mod, newdata = data.frame(TP1 = 10), interval = &quot;prediction&quot;) # 95% prediction interval for a patient with a score of 10 at time point 1. ## fit lwr upr ## 1 9.394984 5.226282 13.56369 (13.56369 - 5.226282)/1.68 ## [1] 4.962743 # Prediction interval width is ~5 times our minimally clinically important # change of 1.68 for HADS-A. df %&gt;% ggplot(aes(x = TP1, y = TP2)) + # Color points conditionally geom_point(aes(color = ifelse(TP2 &gt; TP1 + 1.68 | TP2 &lt; TP1 - 1.68, &quot;red&quot;, &quot;black&quot;))) + scale_color_manual(values = c(&quot;red&quot; = &quot;red&quot;, &quot;black&quot; = &quot;black&quot;), guide = &quot;none&quot;) + geom_abline(intercept = mod$coefficients[1], slope = mod$coefficients[2]) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + geom_ribbon(aes(ymin = pred[,2], ymax = pred[,3]), alpha = 0.2) + ggtitle(&quot;HADS-A and 95% Prediction Interval for TP2&quot;) + theme(plot.title = element_text(hjust = 0.5)) + geom_abline(intercept = 0, slope = 1, color = &quot;green&quot;, linetype = &quot;dashed&quot;) + geom_abline(intercept = 1.68, slope = 1, color = &quot;red&quot;, linetype = &quot;dashed&quot;) + geom_abline(intercept = -1.68, slope = 1, color = &quot;red&quot;, linetype = &quot;dashed&quot;) ## `geom_smooth()` using formula = &#39;y ~ x&#39; # How often is TP2 within the MCIC of 1.68 points?--------- df$abs_diff &lt;- abs(df$TP1 - df$TP2) hist(df$abs_diff) abline(v = 1.68, col = &quot;red&quot;) table(df$abs_diff &gt; 1.68)/sum(table(df$abs_diff &gt; 1.68)) # ## ## FALSE TRUE ## 0.5368421 0.4631579 # -&gt; in ~46% of cases we detect a minimally clinically important change of 1.68 points. # even though the underlying truth did not change. # This result is near random guessing The example shows that for the given value of ICC (\\(&gt;0.8\\)) and MCID, the test retest reliability is near random guessing with respect to detecting a change, since the second prediction is very often outside the MCID (red dashed lines). Or in short: Even if Mary measures twice with this ICC value, she will detect a clinically meaningful change in almost half of the cases, although the underlying truth did not change. One could play around a little bit with the parameters here (and maybe make the argument more rigorous), but my guess would be that the main message remains stable. What do you think? Can you find literature or logical arguments against this simulation? I would be pleased to hear your thoughts. 5.1.7 Standard Error of Measurement (SEM) Above, we defined the overall ICC as: \\[ICC = \\frac{\\sigma_{\\alpha}^2}{\\sigma_{\\alpha}^2 + \\sigma_{\\varepsilon}^2}\\] The SEM is defined as: \\(\\sqrt{\\sigma_{\\varepsilon}^2}\\). This is a measure for the precision of the model. If this number is small, we know the true but unknown score (\\(\\eta\\)) very precisely. As we have seen, for the \\(ICC_{agreement}\\) the error term includes the rater variability \\(\\sigma_{rater}\\). For ICC2 and 3 the model is the same and: \\[Y_{ij} = \\eta_i + \\beta_j + \\varepsilon_i\\] For \\(ICC_{agreement}\\), the SEM is then: \\[\\sigma_{Y_i}^2 = \\sigma_{\\eta}^2 + \\underbrace{\\sigma_{\\text{rater}}^2 + \\sigma_{\\varepsilon}^2}_{SEM_{agreement}^2}\\] For \\(ICC_{consistency}\\), the SEM is then: \\[\\sigma_{Y_i}^2 = \\sigma_{\\eta}^2 + \\underbrace{\\sigma_{\\varepsilon}^2}_{SEM_{consistency}^2}\\] And since ICC 2 and 3 are based on the same model: \\[SEM_{consistency} \\le SEM_{agreement}\\] (equality if there is no bias) This yields the first method of getting the SEM: Estimate the model (as we did above) and take the square root of the respective error term (with or without the rater variability). One can also show (excercise…) that we can find the \\(SEM_{consistency}\\) by using the standard deviation of the differences between the two measurements of Peter and Mary: We verify this immediately: \\[SEM_{consistency} = \\frac{SD_{difference}}{\\sqrt{2}}\\] mod &lt;- lmer(ROM ~ (1 | ID) + (1 | Rater), data = df_long_bias) print(VarCorr(mod)) ## Groups Name Std.Dev. ## ID (Intercept) 16.4585 ## Rater (Intercept) 2.4886 ## Residual 6.8961 \\[SEM_{consistency} = \\sigma_{residual} = 6.8961\\] Let’s calculate the SEM from the differences between the two measurements: # SEM from differences sd(df_long_bias$ROM[df_long_bias$Rater == &quot;ROMas.Mary&quot;] - df_long_bias$ROM[df_long_bias$Rater == &quot;ROMas.Peter&quot;]) / sqrt(2) ## [1] 6.896154 This is a perfect match! 5.1.8 Bland-Altman Plot The Bland-Altman plot is a graphical method to compare two measurements techniques or raters. The goal is to spot systematic differences between the two methods/raters. On the x axis, we plot the average of the two measurements and on the y axis the difference between the two measurements. So, we could for instance see larger variability in points with higher average values, indicating that Peter and Mary disagree more for higher values. Let’s quickly draw one and explain it: library(BlandAltmanLeh) library(data.table) df_long_bias &lt;- as.data.table(df_long_bias) # https://cran.r-project.org/web/packages/BlandAltmanLeh/BlandAltmanLeh.pdf bland.altman.plot(df_long_bias[Rater == &quot;ROMas.Mary&quot;, ]$ROM, df_long_bias[Rater == &quot;ROMas.Peter&quot;, ]$ROM, two = 1.96, mode = 1, conf.int = 0.95) ## NULL # &quot;two&quot;: Lines are drawn &quot;two&quot; standard deviations from mean differences. # This defaults to 1.96 for proper 95 percent confidence interval # estimation but can be set to 2.0 for better agreement with e. g. # the Bland Altman publication. # &quot;mode&quot;: if 1 then difference group1 minus group2 is used, # if 2 then group2 minus group1 is used. Defaults to 1. … describe.. LOA … and so on. 5.2 Validity … 5.3 TODOS table 2 fallacy mention missing values, missingness mechanisms -&gt; Methodenvertiefung Logistic Regression, Poisson, -&gt; Methodenvertiefung Exercise: Show by simulation what Gelman talks about with significant p values. So I scan the data for significant p values and then simulate data with the same effect size and see how often I get significant p values. Especially the next effect would be probably smaller, especially, if one did p-hacking! Calculate a priori probability for replication (def?). Chapter: Sample size calculations for multivariate regression, Proportions, ICCs, t.test Chapter about Reliability, Validity and ICCs (incl. simulation of what an ICC of 0.9 or so means), but maybe reduced Angenommen man hat ein masking eines Effekts und der Model fit ist aber gut (keine Voraussetzung verletzt), ist diese Situation möglich? What about papers? -&gt; eLearning AIC, BIC, cross-validation, Model selection (best subset, leaps….), Variable selection More on bias variance tradeoff, show for polynomial regression? include eLearning tasks in script. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
